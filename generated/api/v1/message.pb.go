// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/v1/message.proto

package apiv1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoalStatus int32

const (
	GoalStatus_GOAL_STATUS_UNSPECIFIED GoalStatus = 0
	GoalStatus_GOAL_STATUS_ACTIVE      GoalStatus = 1
	GoalStatus_GOAL_STATUS_INACTIVE    GoalStatus = 2
	GoalStatus_GOAL_STATUS_COMPLETED   GoalStatus = 3
	GoalStatus_GOAL_STATUS_DELETE      GoalStatus = 4
)

// Enum value maps for GoalStatus.
var (
	GoalStatus_name = map[int32]string{
		0: "GOAL_STATUS_UNSPECIFIED",
		1: "GOAL_STATUS_ACTIVE",
		2: "GOAL_STATUS_INACTIVE",
		3: "GOAL_STATUS_COMPLETED",
		4: "GOAL_STATUS_DELETE",
	}
	GoalStatus_value = map[string]int32{
		"GOAL_STATUS_UNSPECIFIED": 0,
		"GOAL_STATUS_ACTIVE":      1,
		"GOAL_STATUS_INACTIVE":    2,
		"GOAL_STATUS_COMPLETED":   3,
		"GOAL_STATUS_DELETE":      4,
	}
)

func (x GoalStatus) Enum() *GoalStatus {
	p := new(GoalStatus)
	*p = x
	return p
}

func (x GoalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_message_proto_enumTypes[0].Descriptor()
}

func (GoalStatus) Type() protoreflect.EnumType {
	return &file_api_v1_message_proto_enumTypes[0]
}

func (x GoalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalStatus.Descriptor instead.
func (GoalStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{0}
}

type GoalType int32

const (
	GoalType_GOAL_TYPE_UNSPECIFIED GoalType = 0
	GoalType_GOAL_TYPE_SAVINGS     GoalType = 1
	GoalType_GOAL_TYPE_INVESTMENT  GoalType = 2
	GoalType_GOAL_TYPE_DEBT        GoalType = 3
	GoalType_GOAL_TYPE_EXPENSE     GoalType = 4
)

// Enum value maps for GoalType.
var (
	GoalType_name = map[int32]string{
		0: "GOAL_TYPE_UNSPECIFIED",
		1: "GOAL_TYPE_SAVINGS",
		2: "GOAL_TYPE_INVESTMENT",
		3: "GOAL_TYPE_DEBT",
		4: "GOAL_TYPE_EXPENSE",
	}
	GoalType_value = map[string]int32{
		"GOAL_TYPE_UNSPECIFIED": 0,
		"GOAL_TYPE_SAVINGS":     1,
		"GOAL_TYPE_INVESTMENT":  2,
		"GOAL_TYPE_DEBT":        3,
		"GOAL_TYPE_EXPENSE":     4,
	}
)

func (x GoalType) Enum() *GoalType {
	p := new(GoalType)
	*p = x
	return p
}

func (x GoalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_message_proto_enumTypes[1].Descriptor()
}

func (GoalType) Type() protoreflect.EnumType {
	return &file_api_v1_message_proto_enumTypes[1]
}

func (x GoalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalType.Descriptor instead.
func (GoalType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{1}
}

type PocketType int32

const (
	PocketType_POCKET_TYPE_UNSPECIFIED            PocketType = 0
	PocketType_POCKET_TYPE_DISCRETIONARY_SPENDING PocketType = 1
	PocketType_POCKET_TYPE_FUN_MONEY              PocketType = 2
	PocketType_POCKET_TYPE_DEBT_REDUCTION         PocketType = 3
	PocketType_POCKET_TYPE_EMERGENCY_FUND         PocketType = 4
)

// Enum value maps for PocketType.
var (
	PocketType_name = map[int32]string{
		0: "POCKET_TYPE_UNSPECIFIED",
		1: "POCKET_TYPE_DISCRETIONARY_SPENDING",
		2: "POCKET_TYPE_FUN_MONEY",
		3: "POCKET_TYPE_DEBT_REDUCTION",
		4: "POCKET_TYPE_EMERGENCY_FUND",
	}
	PocketType_value = map[string]int32{
		"POCKET_TYPE_UNSPECIFIED":            0,
		"POCKET_TYPE_DISCRETIONARY_SPENDING": 1,
		"POCKET_TYPE_FUN_MONEY":              2,
		"POCKET_TYPE_DEBT_REDUCTION":         3,
		"POCKET_TYPE_EMERGENCY_FUND":         4,
	}
)

func (x PocketType) Enum() *PocketType {
	p := new(PocketType)
	*p = x
	return p
}

func (x PocketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PocketType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_message_proto_enumTypes[2].Descriptor()
}

func (PocketType) Type() protoreflect.EnumType {
	return &file_api_v1_message_proto_enumTypes[2]
}

func (x PocketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PocketType.Descriptor instead.
func (PocketType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{2}
}

// UserProfile stores high level user profile details
// such as the id, user_id tied to the profile, and many more
type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id tied to the profile
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// many bank accounts (connected) can be tied to a user
	BankAccounts []*BankAccount `protobuf:"bytes,3,rep,name=bank_accounts,json=bankAccounts,proto3" json:"bank_accounts,omitempty"`
	// investment accounts tied to a user
	InvestmentAccounts []*InvestmentAccount `protobuf:"bytes,4,rep,name=investment_accounts,json=investmentAccounts,proto3" json:"investment_accounts,omitempty"`
	// credit accounts tied to a user
	CreditAccounts []*CreditAccount `protobuf:"bytes,5,rep,name=credit_accounts,json=creditAccounts,proto3" json:"credit_accounts,omitempty"`
	// mortgage accounts tied to a user
	MortgageAccounts []*MortgageAccount `protobuf:"bytes,6,rep,name=mortgage_accounts,json=mortgageAccounts,proto3" json:"mortgage_accounts,omitempty"`
	// student loan accounts tied to a user
	StudentLoanAccounts []*StudentLoanAccount `protobuf:"bytes,7,rep,name=student_loan_accounts,json=studentLoanAccounts,proto3" json:"student_loan_accounts,omitempty"`
	// the user plaid access token
	PlaidAccessToken string `protobuf:"bytes,8,opt,name=plaid_access_token,json=plaidAccessToken,proto3" json:"plaid_access_token,omitempty"`
	// the customer id tied to the stripe account
	StripeCustomerId string `protobuf:"bytes,9,opt,name=stripe_customer_id,json=stripeCustomerId,proto3" json:"stripe_customer_id,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *UserProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserProfile) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserProfile) GetBankAccounts() []*BankAccount {
	if x != nil {
		return x.BankAccounts
	}
	return nil
}

func (x *UserProfile) GetInvestmentAccounts() []*InvestmentAccount {
	if x != nil {
		return x.InvestmentAccounts
	}
	return nil
}

func (x *UserProfile) GetCreditAccounts() []*CreditAccount {
	if x != nil {
		return x.CreditAccounts
	}
	return nil
}

func (x *UserProfile) GetMortgageAccounts() []*MortgageAccount {
	if x != nil {
		return x.MortgageAccounts
	}
	return nil
}

func (x *UserProfile) GetStudentLoanAccounts() []*StudentLoanAccount {
	if x != nil {
		return x.StudentLoanAccounts
	}
	return nil
}

func (x *UserProfile) GetPlaidAccessToken() string {
	if x != nil {
		return x.PlaidAccessToken
	}
	return ""
}

func (x *UserProfile) GetStripeCustomerId() string {
	if x != nil {
		return x.StripeCustomerId
	}
	return ""
}

type StudentLoanAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                                 uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaidAccountId                     string   `protobuf:"bytes,2,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	DisbursementDates                  []string `protobuf:"bytes,3,rep,name=disbursement_dates,json=disbursementDates,proto3" json:"disbursement_dates,omitempty"`
	ExpectedPayoffDate                 string   `protobuf:"bytes,4,opt,name=expected_payoff_date,json=expectedPayoffDate,proto3" json:"expected_payoff_date,omitempty"`
	Guarantor                          string   `protobuf:"bytes,5,opt,name=guarantor,proto3" json:"guarantor,omitempty"`
	InterestRatePercentage             float64  `protobuf:"fixed64,6,opt,name=interest_rate_percentage,json=interestRatePercentage,proto3" json:"interest_rate_percentage,omitempty"`
	IsOverdue                          bool     `protobuf:"varint,7,opt,name=is_overdue,json=isOverdue,proto3" json:"is_overdue,omitempty"`
	LastPaymentAmount                  float64  `protobuf:"fixed64,8,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	LastPaymentDate                    string   `protobuf:"bytes,9,opt,name=last_payment_date,json=lastPaymentDate,proto3" json:"last_payment_date,omitempty"`
	LastStatementIssueDate             string   `protobuf:"bytes,10,opt,name=last_statement_issue_date,json=lastStatementIssueDate,proto3" json:"last_statement_issue_date,omitempty"`
	LoanName                           string   `protobuf:"bytes,11,opt,name=loan_name,json=loanName,proto3" json:"loan_name,omitempty"`
	LoanEndDate                        string   `protobuf:"bytes,12,opt,name=loan_end_date,json=loanEndDate,proto3" json:"loan_end_date,omitempty"`
	MinimumPaymentAmount               float64  `protobuf:"fixed64,13,opt,name=minimum_payment_amount,json=minimumPaymentAmount,proto3" json:"minimum_payment_amount,omitempty"`
	NextPaymentDueDate                 string   `protobuf:"bytes,14,opt,name=next_payment_due_date,json=nextPaymentDueDate,proto3" json:"next_payment_due_date,omitempty"`
	OriginationDate                    string   `protobuf:"bytes,15,opt,name=origination_date,json=originationDate,proto3" json:"origination_date,omitempty"`
	OriginationPrincipalAmount         float64  `protobuf:"fixed64,16,opt,name=origination_principal_amount,json=originationPrincipalAmount,proto3" json:"origination_principal_amount,omitempty"`
	OutstandingInterestAmount          float64  `protobuf:"fixed64,17,opt,name=outstanding_interest_amount,json=outstandingInterestAmount,proto3" json:"outstanding_interest_amount,omitempty"`
	PaymentReferenceNumber             string   `protobuf:"bytes,18,opt,name=payment_reference_number,json=paymentReferenceNumber,proto3" json:"payment_reference_number,omitempty"`
	SequenceNumber                     string   `protobuf:"bytes,21,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	YtdInterestPaid                    float64  `protobuf:"fixed64,23,opt,name=ytd_interest_paid,json=ytdInterestPaid,proto3" json:"ytd_interest_paid,omitempty"`
	YtdPrincipalPaid                   float64  `protobuf:"fixed64,24,opt,name=ytd_principal_paid,json=ytdPrincipalPaid,proto3" json:"ytd_principal_paid,omitempty"`
	LoanType                           string   `protobuf:"bytes,25,opt,name=loan_type,json=loanType,proto3" json:"loan_type,omitempty"`
	PslfStatusEstimatedEligibilityDate string   `protobuf:"bytes,26,opt,name=pslf_status_estimated_eligibility_date,json=pslfStatusEstimatedEligibilityDate,proto3" json:"pslf_status_estimated_eligibility_date,omitempty"`
	PslfStatusPaymentsMade             int32    `protobuf:"varint,27,opt,name=pslf_status_payments_made,json=pslfStatusPaymentsMade,proto3" json:"pslf_status_payments_made,omitempty"`
	PslfStatusPaymentsRemaining        int32    `protobuf:"varint,28,opt,name=pslf_status_payments_remaining,json=pslfStatusPaymentsRemaining,proto3" json:"pslf_status_payments_remaining,omitempty"`
	RepaymentPlanType                  string   `protobuf:"bytes,29,opt,name=repayment_plan_type,json=repaymentPlanType,proto3" json:"repayment_plan_type,omitempty"`
	RepaymentPlanDescription           string   `protobuf:"bytes,30,opt,name=repayment_plan_description,json=repaymentPlanDescription,proto3" json:"repayment_plan_description,omitempty"`
	ServicerAddressCity                string   `protobuf:"bytes,31,opt,name=servicer_address_city,json=servicerAddressCity,proto3" json:"servicer_address_city,omitempty"`
	ServicerAddressPostalCode          string   `protobuf:"bytes,32,opt,name=servicer_address_postal_code,json=servicerAddressPostalCode,proto3" json:"servicer_address_postal_code,omitempty"`
	ServicerAddressState               string   `protobuf:"bytes,33,opt,name=servicer_address_state,json=servicerAddressState,proto3" json:"servicer_address_state,omitempty"`
	ServicerAddressStreet              string   `protobuf:"bytes,34,opt,name=servicer_address_street,json=servicerAddressStreet,proto3" json:"servicer_address_street,omitempty"`
	ServicerAddressRegion              string   `protobuf:"bytes,35,opt,name=servicer_address_region,json=servicerAddressRegion,proto3" json:"servicer_address_region,omitempty"`
	ServicerAddressCountry             string   `protobuf:"bytes,36,opt,name=servicer_address_country,json=servicerAddressCountry,proto3" json:"servicer_address_country,omitempty"`
	// the user id to which this bank account is tied to
	UserId string `protobuf:"bytes,37,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the account name
	Name string `protobuf:"bytes,38,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StudentLoanAccount) Reset() {
	*x = StudentLoanAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentLoanAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentLoanAccount) ProtoMessage() {}

func (x *StudentLoanAccount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentLoanAccount.ProtoReflect.Descriptor instead.
func (*StudentLoanAccount) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *StudentLoanAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StudentLoanAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *StudentLoanAccount) GetDisbursementDates() []string {
	if x != nil {
		return x.DisbursementDates
	}
	return nil
}

func (x *StudentLoanAccount) GetExpectedPayoffDate() string {
	if x != nil {
		return x.ExpectedPayoffDate
	}
	return ""
}

func (x *StudentLoanAccount) GetGuarantor() string {
	if x != nil {
		return x.Guarantor
	}
	return ""
}

func (x *StudentLoanAccount) GetInterestRatePercentage() float64 {
	if x != nil {
		return x.InterestRatePercentage
	}
	return 0
}

func (x *StudentLoanAccount) GetIsOverdue() bool {
	if x != nil {
		return x.IsOverdue
	}
	return false
}

func (x *StudentLoanAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLastStatementIssueDate() string {
	if x != nil {
		return x.LastStatementIssueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanName() string {
	if x != nil {
		return x.LoanName
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanEndDate() string {
	if x != nil {
		return x.LoanEndDate
	}
	return ""
}

func (x *StudentLoanAccount) GetMinimumPaymentAmount() float64 {
	if x != nil {
		return x.MinimumPaymentAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetOriginationDate() string {
	if x != nil {
		return x.OriginationDate
	}
	return ""
}

func (x *StudentLoanAccount) GetOriginationPrincipalAmount() float64 {
	if x != nil {
		return x.OriginationPrincipalAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetOutstandingInterestAmount() float64 {
	if x != nil {
		return x.OutstandingInterestAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetPaymentReferenceNumber() string {
	if x != nil {
		return x.PaymentReferenceNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetSequenceNumber() string {
	if x != nil {
		return x.SequenceNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetYtdInterestPaid() float64 {
	if x != nil {
		return x.YtdInterestPaid
	}
	return 0
}

func (x *StudentLoanAccount) GetYtdPrincipalPaid() float64 {
	if x != nil {
		return x.YtdPrincipalPaid
	}
	return 0
}

func (x *StudentLoanAccount) GetLoanType() string {
	if x != nil {
		return x.LoanType
	}
	return ""
}

func (x *StudentLoanAccount) GetPslfStatusEstimatedEligibilityDate() string {
	if x != nil {
		return x.PslfStatusEstimatedEligibilityDate
	}
	return ""
}

func (x *StudentLoanAccount) GetPslfStatusPaymentsMade() int32 {
	if x != nil {
		return x.PslfStatusPaymentsMade
	}
	return 0
}

func (x *StudentLoanAccount) GetPslfStatusPaymentsRemaining() int32 {
	if x != nil {
		return x.PslfStatusPaymentsRemaining
	}
	return 0
}

func (x *StudentLoanAccount) GetRepaymentPlanType() string {
	if x != nil {
		return x.RepaymentPlanType
	}
	return ""
}

func (x *StudentLoanAccount) GetRepaymentPlanDescription() string {
	if x != nil {
		return x.RepaymentPlanDescription
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressCity() string {
	if x != nil {
		return x.ServicerAddressCity
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressPostalCode() string {
	if x != nil {
		return x.ServicerAddressPostalCode
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressState() string {
	if x != nil {
		return x.ServicerAddressState
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressStreet() string {
	if x != nil {
		return x.ServicerAddressStreet
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressRegion() string {
	if x != nil {
		return x.ServicerAddressRegion
	}
	return ""
}

func (x *StudentLoanAccount) GetServicerAddressCountry() string {
	if x != nil {
		return x.ServicerAddressCountry
	}
	return ""
}

func (x *StudentLoanAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StudentLoanAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreditAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this bank account is tied to
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the account name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account number
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// the bank account type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// the bank account balance
	Balance float32 `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// current funds on the account
	CurrentFunds float64 `protobuf:"fixed64,9,opt,name=current_funds,json=currentFunds,proto3" json:"current_funds,omitempty"`
	// balance limit
	BalanceLimit uint64 `protobuf:"varint,10,opt,name=balance_limit,json=balanceLimit,proto3" json:"balance_limit,omitempty"`
	// plaid account id mapped to this bank account
	PlaidAccountId string `protobuf:"bytes,12,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	// accoint subtype
	Subtype string `protobuf:"bytes,13,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// wether the account is overdue
	IsOverdue bool `protobuf:"varint,14,opt,name=is_overdue,json=isOverdue,proto3" json:"is_overdue,omitempty"`
	// the last payment amount
	LastPaymentAmount float64 `protobuf:"fixed64,15,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	// the last payment date
	LastPaymentDate string `protobuf:"bytes,16,opt,name=last_payment_date,json=lastPaymentDate,proto3" json:"last_payment_date,omitempty"`
	// the last statement issue date
	LastStatementIssueDate string `protobuf:"bytes,17,opt,name=last_statement_issue_date,json=lastStatementIssueDate,proto3" json:"last_statement_issue_date,omitempty"`
	// the minimum amount due date
	MinimumAmountDueDate float64 `protobuf:"fixed64,18,opt,name=minimum_amount_due_date,json=minimumAmountDueDate,proto3" json:"minimum_amount_due_date,omitempty"`
	// the next payment date
	NextPaymentDate string `protobuf:"bytes,19,opt,name=next_payment_date,json=nextPaymentDate,proto3" json:"next_payment_date,omitempty"`
	// the aprs
	Aprs []*Apr `protobuf:"bytes,20,rep,name=aprs,proto3" json:"aprs,omitempty"`
	// the last statement balance
	LastStatementBalance float64 `protobuf:"fixed64,21,opt,name=last_statement_balance,json=lastStatementBalance,proto3" json:"last_statement_balance,omitempty"`
	// the minimum payment amount
	MinimumPaymentAmount float64 `protobuf:"fixed64,22,opt,name=minimum_payment_amount,json=minimumPaymentAmount,proto3" json:"minimum_payment_amount,omitempty"`
	// the next payment due date
	NextPaymentDueDate string `protobuf:"bytes,23,opt,name=next_payment_due_date,json=nextPaymentDueDate,proto3" json:"next_payment_due_date,omitempty"`
}

func (x *CreditAccount) Reset() {
	*x = CreditAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditAccount) ProtoMessage() {}

func (x *CreditAccount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditAccount.ProtoReflect.Descriptor instead.
func (*CreditAccount) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *CreditAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreditAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CreditAccount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreditAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CreditAccount) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *CreditAccount) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

func (x *CreditAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *CreditAccount) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *CreditAccount) GetIsOverdue() bool {
	if x != nil {
		return x.IsOverdue
	}
	return false
}

func (x *CreditAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *CreditAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *CreditAccount) GetLastStatementIssueDate() string {
	if x != nil {
		return x.LastStatementIssueDate
	}
	return ""
}

func (x *CreditAccount) GetMinimumAmountDueDate() float64 {
	if x != nil {
		return x.MinimumAmountDueDate
	}
	return 0
}

func (x *CreditAccount) GetNextPaymentDate() string {
	if x != nil {
		return x.NextPaymentDate
	}
	return ""
}

func (x *CreditAccount) GetAprs() []*Apr {
	if x != nil {
		return x.Aprs
	}
	return nil
}

func (x *CreditAccount) GetLastStatementBalance() float64 {
	if x != nil {
		return x.LastStatementBalance
	}
	return 0
}

func (x *CreditAccount) GetMinimumPaymentAmount() float64 {
	if x != nil {
		return x.MinimumPaymentAmount
	}
	return 0
}

func (x *CreditAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

type MortgageAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlaidAccountId              string  `protobuf:"bytes,2,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	AccountNumber               string  `protobuf:"bytes,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	CurrentLateFee              float64 `protobuf:"fixed64,4,opt,name=current_late_fee,json=currentLateFee,proto3" json:"current_late_fee,omitempty"`
	EscrowBalance               float64 `protobuf:"fixed64,5,opt,name=escrow_balance,json=escrowBalance,proto3" json:"escrow_balance,omitempty"`
	HasPmi                      bool    `protobuf:"varint,6,opt,name=has_pmi,json=hasPmi,proto3" json:"has_pmi,omitempty"`
	HasPrepaymentPenalty        bool    `protobuf:"varint,7,opt,name=has_prepayment_penalty,json=hasPrepaymentPenalty,proto3" json:"has_prepayment_penalty,omitempty"`
	LastPaymentAmount           float64 `protobuf:"fixed64,9,opt,name=last_payment_amount,json=lastPaymentAmount,proto3" json:"last_payment_amount,omitempty"`
	LastPaymentDate             string  `protobuf:"bytes,10,opt,name=last_payment_date,json=lastPaymentDate,proto3" json:"last_payment_date,omitempty"`
	LoanTerm                    string  `protobuf:"bytes,11,opt,name=loan_term,json=loanTerm,proto3" json:"loan_term,omitempty"`
	LoanTypeDescription         string  `protobuf:"bytes,12,opt,name=loan_type_description,json=loanTypeDescription,proto3" json:"loan_type_description,omitempty"`
	MaturityDate                string  `protobuf:"bytes,13,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	NextMonthlyPayment          float64 `protobuf:"fixed64,14,opt,name=next_monthly_payment,json=nextMonthlyPayment,proto3" json:"next_monthly_payment,omitempty"`
	NextPaymentDueDate          string  `protobuf:"bytes,15,opt,name=next_payment_due_date,json=nextPaymentDueDate,proto3" json:"next_payment_due_date,omitempty"`
	OriginalPrincipalBalance    float64 `protobuf:"fixed64,16,opt,name=original_principal_balance,json=originalPrincipalBalance,proto3" json:"original_principal_balance,omitempty"`
	OriginalPropertyValue       float64 `protobuf:"fixed64,17,opt,name=original_property_value,json=originalPropertyValue,proto3" json:"original_property_value,omitempty"`
	OutstandingPrincipalBalance float64 `protobuf:"fixed64,18,opt,name=outstanding_principal_balance,json=outstandingPrincipalBalance,proto3" json:"outstanding_principal_balance,omitempty"`
	PaymentAmount               float64 `protobuf:"fixed64,19,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	PaymentDate                 string  `protobuf:"bytes,20,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	OriginationDate             string  `protobuf:"bytes,25,opt,name=origination_date,json=originationDate,proto3" json:"origination_date,omitempty"`
	OriginationPrincipalAmount  float64 `protobuf:"fixed64,26,opt,name=origination_principal_amount,json=originationPrincipalAmount,proto3" json:"origination_principal_amount,omitempty"`
	PastDueAmount               float64 `protobuf:"fixed64,28,opt,name=past_due_amount,json=pastDueAmount,proto3" json:"past_due_amount,omitempty"`
	YtdInterestPaid             float64 `protobuf:"fixed64,29,opt,name=ytd_interest_paid,json=ytdInterestPaid,proto3" json:"ytd_interest_paid,omitempty"`
	YtdPrincipalPaid            float64 `protobuf:"fixed64,30,opt,name=ytd_principal_paid,json=ytdPrincipalPaid,proto3" json:"ytd_principal_paid,omitempty"`
	PropertyAddressCity         string  `protobuf:"bytes,31,opt,name=property_address_city,json=propertyAddressCity,proto3" json:"property_address_city,omitempty"`
	PropertyAddressState        string  `protobuf:"bytes,32,opt,name=property_address_state,json=propertyAddressState,proto3" json:"property_address_state,omitempty"`
	PropertyAddressStreet       string  `protobuf:"bytes,33,opt,name=property_address_street,json=propertyAddressStreet,proto3" json:"property_address_street,omitempty"`
	PropertyAddressPostalCode   string  `protobuf:"bytes,34,opt,name=property_address_postal_code,json=propertyAddressPostalCode,proto3" json:"property_address_postal_code,omitempty"`
	PropertyRegion              string  `protobuf:"bytes,35,opt,name=property_region,json=propertyRegion,proto3" json:"property_region,omitempty"`
	PropertyCountry             string  `protobuf:"bytes,36,opt,name=property_country,json=propertyCountry,proto3" json:"property_country,omitempty"`
	InterestRatePercentage      float64 `protobuf:"fixed64,37,opt,name=interest_rate_percentage,json=interestRatePercentage,proto3" json:"interest_rate_percentage,omitempty"`
	InterestRateType            string  `protobuf:"bytes,38,opt,name=interest_rate_type,json=interestRateType,proto3" json:"interest_rate_type,omitempty"`
}

func (x *MortgageAccount) Reset() {
	*x = MortgageAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MortgageAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MortgageAccount) ProtoMessage() {}

func (x *MortgageAccount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MortgageAccount.ProtoReflect.Descriptor instead.
func (*MortgageAccount) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *MortgageAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MortgageAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *MortgageAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *MortgageAccount) GetCurrentLateFee() float64 {
	if x != nil {
		return x.CurrentLateFee
	}
	return 0
}

func (x *MortgageAccount) GetEscrowBalance() float64 {
	if x != nil {
		return x.EscrowBalance
	}
	return 0
}

func (x *MortgageAccount) GetHasPmi() bool {
	if x != nil {
		return x.HasPmi
	}
	return false
}

func (x *MortgageAccount) GetHasPrepaymentPenalty() bool {
	if x != nil {
		return x.HasPrepaymentPenalty
	}
	return false
}

func (x *MortgageAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *MortgageAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *MortgageAccount) GetLoanTerm() string {
	if x != nil {
		return x.LoanTerm
	}
	return ""
}

func (x *MortgageAccount) GetLoanTypeDescription() string {
	if x != nil {
		return x.LoanTypeDescription
	}
	return ""
}

func (x *MortgageAccount) GetMaturityDate() string {
	if x != nil {
		return x.MaturityDate
	}
	return ""
}

func (x *MortgageAccount) GetNextMonthlyPayment() float64 {
	if x != nil {
		return x.NextMonthlyPayment
	}
	return 0
}

func (x *MortgageAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *MortgageAccount) GetOriginalPrincipalBalance() float64 {
	if x != nil {
		return x.OriginalPrincipalBalance
	}
	return 0
}

func (x *MortgageAccount) GetOriginalPropertyValue() float64 {
	if x != nil {
		return x.OriginalPropertyValue
	}
	return 0
}

func (x *MortgageAccount) GetOutstandingPrincipalBalance() float64 {
	if x != nil {
		return x.OutstandingPrincipalBalance
	}
	return 0
}

func (x *MortgageAccount) GetPaymentAmount() float64 {
	if x != nil {
		return x.PaymentAmount
	}
	return 0
}

func (x *MortgageAccount) GetPaymentDate() string {
	if x != nil {
		return x.PaymentDate
	}
	return ""
}

func (x *MortgageAccount) GetOriginationDate() string {
	if x != nil {
		return x.OriginationDate
	}
	return ""
}

func (x *MortgageAccount) GetOriginationPrincipalAmount() float64 {
	if x != nil {
		return x.OriginationPrincipalAmount
	}
	return 0
}

func (x *MortgageAccount) GetPastDueAmount() float64 {
	if x != nil {
		return x.PastDueAmount
	}
	return 0
}

func (x *MortgageAccount) GetYtdInterestPaid() float64 {
	if x != nil {
		return x.YtdInterestPaid
	}
	return 0
}

func (x *MortgageAccount) GetYtdPrincipalPaid() float64 {
	if x != nil {
		return x.YtdPrincipalPaid
	}
	return 0
}

func (x *MortgageAccount) GetPropertyAddressCity() string {
	if x != nil {
		return x.PropertyAddressCity
	}
	return ""
}

func (x *MortgageAccount) GetPropertyAddressState() string {
	if x != nil {
		return x.PropertyAddressState
	}
	return ""
}

func (x *MortgageAccount) GetPropertyAddressStreet() string {
	if x != nil {
		return x.PropertyAddressStreet
	}
	return ""
}

func (x *MortgageAccount) GetPropertyAddressPostalCode() string {
	if x != nil {
		return x.PropertyAddressPostalCode
	}
	return ""
}

func (x *MortgageAccount) GetPropertyRegion() string {
	if x != nil {
		return x.PropertyRegion
	}
	return ""
}

func (x *MortgageAccount) GetPropertyCountry() string {
	if x != nil {
		return x.PropertyCountry
	}
	return ""
}

func (x *MortgageAccount) GetInterestRatePercentage() float64 {
	if x != nil {
		return x.InterestRatePercentage
	}
	return 0
}

func (x *MortgageAccount) GetInterestRateType() string {
	if x != nil {
		return x.InterestRateType
	}
	return ""
}

type InvestmentAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this bank account is tied to
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the account name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account number
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// the bank account type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// the bank account balance
	Balance      float32 `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	CurrentFunds float64 `protobuf:"fixed64,9,opt,name=current_funds,json=currentFunds,proto3" json:"current_funds,omitempty"`
	BalanceLimit uint64  `protobuf:"varint,10,opt,name=balance_limit,json=balanceLimit,proto3" json:"balance_limit,omitempty"`
	// plaid account id mapped to this bank account
	PlaidAccountId string `protobuf:"bytes,12,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	// accoint subtype
	Subtype string `protobuf:"bytes,13,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// invesment holding is the set of securities this account witholds
	Holdings []*InvesmentHolding `protobuf:"bytes,7,rep,name=holdings,proto3" json:"holdings,omitempty"`
	// the set of securities this account witholds
	Securities []*InvestmentSecurity `protobuf:"bytes,8,rep,name=securities,proto3" json:"securities,omitempty"`
}

func (x *InvestmentAccount) Reset() {
	*x = InvestmentAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentAccount) ProtoMessage() {}

func (x *InvestmentAccount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentAccount.ProtoReflect.Descriptor instead.
func (*InvestmentAccount) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *InvestmentAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestmentAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InvestmentAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvestmentAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *InvestmentAccount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InvestmentAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *InvestmentAccount) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *InvestmentAccount) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

func (x *InvestmentAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *InvestmentAccount) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *InvestmentAccount) GetHoldings() []*InvesmentHolding {
	if x != nil {
		return x.Holdings
	}
	return nil
}

func (x *InvestmentAccount) GetSecurities() []*InvestmentSecurity {
	if x != nil {
		return x.Securities
	}
	return nil
}

type BankAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this bank account is tied to
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the bank account name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the bank account number
	Number string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// the bank account type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// the bank account balance
	Balance float32 `protobuf:"fixed32,6,opt,name=balance,proto3" json:"balance,omitempty"`
	// the bank account currency
	Currency     string  `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CurrentFunds float64 `protobuf:"fixed64,9,opt,name=current_funds,json=currentFunds,proto3" json:"current_funds,omitempty"`
	BalanceLimit uint64  `protobuf:"varint,10,opt,name=balance_limit,json=balanceLimit,proto3" json:"balance_limit,omitempty"`
	// the set of "virtualized accounts this user witholds"
	// NOTE: these pockets are automatically created by the system
	// when a user connects a bank account
	Pockets []*Pocket `protobuf:"bytes,11,rep,name=pockets,proto3" json:"pockets,omitempty"`
	// plaid account id mapped to this bank account
	PlaidAccountId string `protobuf:"bytes,12,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	// account subtype
	Subtype string `protobuf:"bytes,13,opt,name=subtype,proto3" json:"subtype,omitempty"`
}

func (x *BankAccount) Reset() {
	*x = BankAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccount) ProtoMessage() {}

func (x *BankAccount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccount.ProtoReflect.Descriptor instead.
func (*BankAccount) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *BankAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BankAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BankAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BankAccount) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BankAccount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BankAccount) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *BankAccount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BankAccount) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *BankAccount) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

func (x *BankAccount) GetPockets() []*Pocket {
	if x != nil {
		return x.Pockets
	}
	return nil
}

func (x *BankAccount) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *BankAccount) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

// Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account
// NOTE: these pockets are automatically created by the system and should not be exposed for mutation
// by any client. The only operations that can be performed against a pocket are:
// 1. Get the pocket
// 2. Get the pocket's smart goals
// 3. Adding a smart goal to the pocket
type Pocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the set of smart goals this user witholds
	Goals []*SmartGoal `protobuf:"bytes,3,rep,name=goals,proto3" json:"goals,omitempty"`
	// The type of the pocket
	Type PocketType `protobuf:"varint,4,opt,name=type,proto3,enum=api.v1.PocketType" json:"type,omitempty"`
}

func (x *Pocket) Reset() {
	*x = Pocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pocket) ProtoMessage() {}

func (x *Pocket) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pocket.ProtoReflect.Descriptor instead.
func (*Pocket) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *Pocket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pocket) GetGoals() []*SmartGoal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *Pocket) GetType() PocketType {
	if x != nil {
		return x.Type
	}
	return PocketType_POCKET_TYPE_UNSPECIFIED
}

// SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,
// its description, the target amount of money the user wants to save or invest, and the expected date of completion.
//
// The Goals table also includes columns for the start date of the goal, the current amount of money saved or
// invested towards the goal, and a boolean flag indicating whether the goal has been achieved.
// These additional columns allow the user to track their progress towards the goal and see how much
// more they need to save or invest to reach their target amount.
type SmartGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the user id to which this goal is tied to
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The name of the goal
	// Validations:
	// - must be at least 3 characters long
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the goal
	// Validations:
	// - must be at least 3 characters long
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// wether the goal has been achieved or not
	IsCompleted bool `protobuf:"varint,5,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// The type of the goal
	GoalType GoalType `protobuf:"varint,9,opt,name=goal_type,json=goalType,proto3,enum=api.v1.GoalType" json:"goal_type,omitempty"`
	// The duration of the goal
	Duration string `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
	// the start date of the goal
	StartDate string `protobuf:"bytes,11,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// the end date of the goal
	EndDate string `protobuf:"bytes,12,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// the target amount of the goal
	// amount of money the user wants to save or invest
	TargetAmount string `protobuf:"bytes,13,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	// the current amount of the goal
	// current amount of money saved or invested towards the goal
	CurrentAmount string `protobuf:"bytes,14,opt,name=current_amount,json=currentAmount,proto3" json:"current_amount,omitempty"`
	// Milestones associated with the goal
	Milestones []*Milestone `protobuf:"bytes,15,rep,name=milestones,proto3" json:"milestones,omitempty"`
	// Forecasts associated with the goal
	Forecasts *Forecast `protobuf:"bytes,16,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (x *SmartGoal) Reset() {
	*x = SmartGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartGoal) ProtoMessage() {}

func (x *SmartGoal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartGoal.ProtoReflect.Descriptor instead.
func (*SmartGoal) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *SmartGoal) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmartGoal) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SmartGoal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmartGoal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SmartGoal) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *SmartGoal) GetGoalType() GoalType {
	if x != nil {
		return x.GoalType
	}
	return GoalType_GOAL_TYPE_UNSPECIFIED
}

func (x *SmartGoal) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *SmartGoal) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SmartGoal) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SmartGoal) GetTargetAmount() string {
	if x != nil {
		return x.TargetAmount
	}
	return ""
}

func (x *SmartGoal) GetCurrentAmount() string {
	if x != nil {
		return x.CurrentAmount
	}
	return ""
}

func (x *SmartGoal) GetMilestones() []*Milestone {
	if x != nil {
		return x.Milestones
	}
	return nil
}

func (x *SmartGoal) GetForecasts() *Forecast {
	if x != nil {
		return x.Forecasts
	}
	return nil
}

// The Forecast table stores information about each forecast generated for a particular goal,
// including the forecast date, the forecasted amount of money saved or invested for the
// goal by the target date, and the variance between the forecasted and target amounts.
// This allows the user to track how well they are progressing towards their goal and make adjustments as needed.
type Forecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the forecasted amount of the goal
	ForecastedAmount string `protobuf:"bytes,2,opt,name=forecasted_amount,json=forecastedAmount,proto3" json:"forecasted_amount,omitempty"`
	// the forecasted completion date of the goal
	ForecastedCompletionDate string `protobuf:"bytes,3,opt,name=forecasted_completion_date,json=forecastedCompletionDate,proto3" json:"forecasted_completion_date,omitempty"`
	// the forecasted variance of the goal between the forecasted and target amounts
	VarianceAmount string `protobuf:"bytes,4,opt,name=variance_amount,json=varianceAmount,proto3" json:"variance_amount,omitempty"`
}

func (x *Forecast) Reset() {
	*x = Forecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forecast) ProtoMessage() {}

func (x *Forecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forecast.ProtoReflect.Descriptor instead.
func (*Forecast) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *Forecast) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Forecast) GetForecastedAmount() string {
	if x != nil {
		return x.ForecastedAmount
	}
	return ""
}

func (x *Forecast) GetForecastedCompletionDate() string {
	if x != nil {
		return x.ForecastedCompletionDate
	}
	return ""
}

func (x *Forecast) GetVarianceAmount() string {
	if x != nil {
		return x.VarianceAmount
	}
	return ""
}

// Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart
// and achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id
type Milestone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the milestone
	// Validations:
	// - must be at least 3 characters long
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the miletone
	// Validations:
	// - must be at least 3 characters long
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the target date of the milestone
	// Validations:
	// - must be at least 3 characters long
	TargetDate string `protobuf:"bytes,4,opt,name=target_date,json=targetDate,proto3" json:"target_date,omitempty"`
	// the target amount of the milestone
	TargetAmount string `protobuf:"bytes,5,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	// wethe milestone is completed or not
	IsCompleted bool `protobuf:"varint,6,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// the budget associated with the milestone
	Budget []*Budget `protobuf:"bytes,13,rep,name=budget,proto3" json:"budget,omitempty"`
}

func (x *Milestone) Reset() {
	*x = Milestone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Milestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Milestone) ProtoMessage() {}

func (x *Milestone) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Milestone.ProtoReflect.Descriptor instead.
func (*Milestone) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *Milestone) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Milestone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Milestone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Milestone) GetTargetDate() string {
	if x != nil {
		return x.TargetDate
	}
	return ""
}

func (x *Milestone) GetTargetAmount() string {
	if x != nil {
		return x.TargetAmount
	}
	return ""
}

func (x *Milestone) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *Milestone) GetBudget() []*Budget {
	if x != nil {
		return x.Budget
	}
	return nil
}

// The Budgets table stores information about each budget created by the user,
// including the name of the budget, the start and end dates, and the user ID.
type Budget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the budget
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the time the goal was created
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// the time the goal was updated
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// category associated with the goal
	Category *Category `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Budget) Reset() {
	*x = Budget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Budget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Budget) ProtoMessage() {}

func (x *Budget) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Budget.ProtoReflect.Descriptor instead.
func (*Budget) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *Budget) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Budget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Budget) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Budget) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Budget) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Budget) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// The Categories table stores information about the different categories of expenses or income,
// such as "Housing", "Food", "Transportation", and "Entertainment". Each category has one or more
// subcategories, which are stored in the Subcategories table.
//
// For example, the "Housing" category might have subcategories for "Rent", "Utilities", and "Home Maintenance".
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the category
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the category
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// the sub categories of the category
	Subcategories []string `protobuf:"bytes,4,rep,name=subcategories,proto3" json:"subcategories,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *Category) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetSubcategories() []string {
	if x != nil {
		return x.Subcategories
	}
	return nil
}

type InvesmentHolding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the investment holding
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// plaid account id
	PlaidAccountId           string  `protobuf:"bytes,3,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	CostBasis                float64 `protobuf:"fixed64,4,opt,name=cost_basis,json=costBasis,proto3" json:"cost_basis,omitempty"`
	InstitutionPrice         float64 `protobuf:"fixed64,5,opt,name=institution_price,json=institutionPrice,proto3" json:"institution_price,omitempty"`
	InstitutionPriceAsOf     string  `protobuf:"bytes,6,opt,name=institution_price_as_of,json=institutionPriceAsOf,proto3" json:"institution_price_as_of,omitempty"`
	InstitutionPriceDatetime string  `protobuf:"bytes,7,opt,name=institution_price_datetime,json=institutionPriceDatetime,proto3" json:"institution_price_datetime,omitempty"`
	InstitutionValue         float64 `protobuf:"fixed64,8,opt,name=institution_value,json=institutionValue,proto3" json:"institution_value,omitempty"`
	IsoCurrencyCode          string  `protobuf:"bytes,9,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty"`
	Quantity                 float64 `protobuf:"fixed64,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	SecurityId               string  `protobuf:"bytes,11,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	UnofficialCurrencyCode   string  `protobuf:"bytes,12,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty"`
}

func (x *InvesmentHolding) Reset() {
	*x = InvesmentHolding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvesmentHolding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvesmentHolding) ProtoMessage() {}

func (x *InvesmentHolding) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvesmentHolding.ProtoReflect.Descriptor instead.
func (*InvesmentHolding) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *InvesmentHolding) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvesmentHolding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvesmentHolding) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *InvesmentHolding) GetCostBasis() float64 {
	if x != nil {
		return x.CostBasis
	}
	return 0
}

func (x *InvesmentHolding) GetInstitutionPrice() float64 {
	if x != nil {
		return x.InstitutionPrice
	}
	return 0
}

func (x *InvesmentHolding) GetInstitutionPriceAsOf() string {
	if x != nil {
		return x.InstitutionPriceAsOf
	}
	return ""
}

func (x *InvesmentHolding) GetInstitutionPriceDatetime() string {
	if x != nil {
		return x.InstitutionPriceDatetime
	}
	return ""
}

func (x *InvesmentHolding) GetInstitutionValue() float64 {
	if x != nil {
		return x.InstitutionValue
	}
	return 0
}

func (x *InvesmentHolding) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *InvesmentHolding) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *InvesmentHolding) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *InvesmentHolding) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

type InvestmentSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id                     uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClosePrice             float64 `protobuf:"fixed64,2,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	ClosePriceAsOf         string  `protobuf:"bytes,3,opt,name=close_price_as_of,json=closePriceAsOf,proto3" json:"close_price_as_of,omitempty"`
	Cusip                  string  `protobuf:"bytes,4,opt,name=cusip,proto3" json:"cusip,omitempty"`
	InstitutionId          string  `protobuf:"bytes,5,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	InstitutionSecurityId  string  `protobuf:"bytes,6,opt,name=institution_security_id,json=institutionSecurityId,proto3" json:"institution_security_id,omitempty"`
	IsCashEquivalent       bool    `protobuf:"varint,7,opt,name=is_cash_equivalent,json=isCashEquivalent,proto3" json:"is_cash_equivalent,omitempty"`
	Isin                   string  `protobuf:"bytes,8,opt,name=isin,proto3" json:"isin,omitempty"`
	IsoCurrencyCode        string  `protobuf:"bytes,9,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty"`
	Name                   string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	ProxySecurityId        string  `protobuf:"bytes,11,opt,name=proxy_security_id,json=proxySecurityId,proto3" json:"proxy_security_id,omitempty"`
	SecurityId             string  `protobuf:"bytes,12,opt,name=security_id,json=securityId,proto3" json:"security_id,omitempty"`
	Sedol                  string  `protobuf:"bytes,13,opt,name=sedol,proto3" json:"sedol,omitempty"`
	TickerSymbol           string  `protobuf:"bytes,14,opt,name=ticker_symbol,json=tickerSymbol,proto3" json:"ticker_symbol,omitempty"`
	Type                   string  `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	UnofficialCurrencyCode string  `protobuf:"bytes,16,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty"`
	UpdateDatetime         string  `protobuf:"bytes,17,opt,name=update_datetime,json=updateDatetime,proto3" json:"update_datetime,omitempty"`
}

func (x *InvestmentSecurity) Reset() {
	*x = InvestmentSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentSecurity) ProtoMessage() {}

func (x *InvestmentSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentSecurity.ProtoReflect.Descriptor instead.
func (*InvestmentSecurity) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{13}
}

func (x *InvestmentSecurity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestmentSecurity) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *InvestmentSecurity) GetClosePriceAsOf() string {
	if x != nil {
		return x.ClosePriceAsOf
	}
	return ""
}

func (x *InvestmentSecurity) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *InvestmentSecurity) GetInstitutionId() string {
	if x != nil {
		return x.InstitutionId
	}
	return ""
}

func (x *InvestmentSecurity) GetInstitutionSecurityId() string {
	if x != nil {
		return x.InstitutionSecurityId
	}
	return ""
}

func (x *InvestmentSecurity) GetIsCashEquivalent() bool {
	if x != nil {
		return x.IsCashEquivalent
	}
	return false
}

func (x *InvestmentSecurity) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *InvestmentSecurity) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *InvestmentSecurity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvestmentSecurity) GetProxySecurityId() string {
	if x != nil {
		return x.ProxySecurityId
	}
	return ""
}

func (x *InvestmentSecurity) GetSecurityId() string {
	if x != nil {
		return x.SecurityId
	}
	return ""
}

func (x *InvestmentSecurity) GetSedol() string {
	if x != nil {
		return x.Sedol
	}
	return ""
}

func (x *InvestmentSecurity) GetTickerSymbol() string {
	if x != nil {
		return x.TickerSymbol
	}
	return ""
}

func (x *InvestmentSecurity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InvestmentSecurity) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *InvestmentSecurity) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

type Apr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Percentage           float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Type                 string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	BalanceSubjectToApr  float64 `protobuf:"fixed64,4,opt,name=balance_subject_to_apr,json=balanceSubjectToApr,proto3" json:"balance_subject_to_apr,omitempty"`
	InterestChargeAmount float64 `protobuf:"fixed64,5,opt,name=interest_charge_amount,json=interestChargeAmount,proto3" json:"interest_charge_amount,omitempty"`
}

func (x *Apr) Reset() {
	*x = Apr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Apr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Apr) ProtoMessage() {}

func (x *Apr) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Apr.ProtoReflect.Descriptor instead.
func (*Apr) Descriptor() ([]byte, []int) {
	return file_api_v1_message_proto_rawDescGZIP(), []int{14}
}

func (x *Apr) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Apr) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Apr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Apr) GetBalanceSubjectToApr() float64 {
	if x != nil {
		return x.BalanceSubjectToApr
	}
	return 0
}

func (x *Apr) GetInterestChargeAmount() float64 {
	if x != nil {
		return x.InterestChargeAmount
	}
	return 0
}

var File_api_v1_message_proto protoreflect.FileDescriptor

var file_api_v1_message_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x22,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x04, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x48, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x10, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xe9, 0x0e, 0x0a, 0x12, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x09, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x18, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x12, 0x33, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x19, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x11, 0x79, 0x74,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x79, 0x74, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x79,
	0x74, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x79, 0x74,
	0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x57, 0x0a, 0x26, 0x70, 0x73, 0x6c, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x22, 0x70, 0x73, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x19, 0x70, 0x73, 0x6c,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x16, 0x70, 0x73, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x73, 0x6c,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1b, 0x70, 0x73, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x18, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa9, 0x06,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x70, 0x72, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x72, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x61, 0x70,
	0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x83, 0x0d, 0x0a, 0x0f, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x0e,
	0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0d, 0x65, 0x73, 0x63, 0x72, 0x6f,
	0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x6d, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06,
	0x68, 0x61, 0x73, 0x50, 0x6d, 0x69, 0x12, 0x39, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14, 0x68, 0x61, 0x73,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x15, 0x6c, 0x6f, 0x61,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x13, 0x6c,
	0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x14,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x12, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1a, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x1d, 0x6f,
	0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1c, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0d, 0x70,
	0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11,
	0x79, 0x74, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x79, 0x74,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x12, 0x79, 0x74, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10,
	0x79, 0x74, 0x64, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x19, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xd0, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xa3, 0x03, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0x92, 0x41, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c,
	0x0a, 0x07, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x12, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x04, 0xba, 0xb9, 0x19, 0x04, 0x2a,
	0x02, 0x48, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x05, 0x67, 0x6f,
	0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0x9a, 0x05, 0x0a, 0x09, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x47, 0x6f, 0x61,
	0x6c, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92,
	0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20,
	0x63, 0x61, 0x72, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75,
	0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x6f,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x67, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a,
	0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x42, 0x10, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02,
	0x48, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xfd, 0x01, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x03, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08,
	0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52,
	0x18, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xee, 0x02, 0x0a, 0x09, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63,
	0x61, 0x72, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79,
	0x20, 0x61, 0x20, 0x63, 0x61, 0x72, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x74, 0x65, 0x73, 0x74, 0x74, 0x61, 0x67, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x0a, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48,
	0x01, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xe9, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x10, 0x4a, 0x0b, 0x22, 0x42, 0x75, 0x79, 0x20, 0x61, 0x20, 0x63, 0x61, 0x72,
	0x22, 0x80, 0x01, 0x0a, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x0a, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xdb, 0x01,
	0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x0e, 0x4a, 0x09, 0x22, 0x48, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x03,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x32, 0x4a, 0x2d, 0x22, 0x48, 0x6f, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x6f,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x0a, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x0a,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x84, 0x06, 0x0a, 0x10,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1c, 0x4a, 0x17, 0x22, 0x6e, 0x66, 0x64, 0x6b, 0x6a,
	0x66, 0x6a, 0x6b, 0x73, 0x64, 0x68, 0x6a, 0x68, 0x66, 0x6a, 0x73, 0x64, 0x68, 0x6a, 0x67, 0x66,
	0x22, 0x80, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29,
	0x4a, 0x27, 0x22, 0x6b, 0x36, 0x37, 0x45, 0x34, 0x78, 0x4b, 0x76, 0x4d, 0x6c, 0x68, 0x6d, 0x6c,
	0x65, 0x45, 0x61, 0x34, 0x70, 0x67, 0x39, 0x68, 0x6c, 0x77, 0x47, 0x47, 0x4e, 0x6e, 0x6e, 0x45,
	0x65, 0x69, 0x78, 0x50, 0x6f, 0x6c, 0x47, 0x6d, 0x22, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x4a, 0x04, 0x22, 0x31, 0x35, 0x22, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c,
	0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x31, 0x33, 0x2e, 0x37, 0x33, 0x22, 0x52, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x48,
	0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x34, 0x2d, 0x31,
	0x33, 0x22, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x41, 0x73, 0x4f, 0x66, 0x12, 0x59, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x36, 0x2d, 0x30, 0x37, 0x54, 0x32,
	0x33, 0x3a, 0x30, 0x31, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x34, 0x34, 0x33, 0x37, 0x2e, 0x33, 0x35, 0x39, 0x30, 0x35,
	0x22, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53, 0x44, 0x22, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0x92,
	0x41, 0x09, 0x4a, 0x07, 0x22, 0x32, 0x35, 0x30, 0x30, 0x30, 0x22, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x4a,
	0x27, 0x22, 0x76, 0x4c, 0x52, 0x4d, 0x56, 0x33, 0x4d, 0x76, 0x59, 0x31, 0x46, 0x59, 0x4e, 0x50,
	0x39, 0x31, 0x6f, 0x6e, 0x33, 0x35, 0x43, 0x4a, 0x44, 0x35, 0x51, 0x4e, 0x35, 0x72, 0x77, 0x39,
	0x46, 0x70, 0x61, 0x39, 0x71, 0x4f, 0x4c, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53,
	0x44, 0x22, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xbc, 0x07, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x20, 0x30, 0x2e, 0x31, 0x34,
	0x30, 0x30, 0x33, 0x34, 0x36, 0x31, 0x36, 0x22, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x31, 0x2d, 0x32,
	0x34, 0x22, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x73,
	0x4f, 0x66, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67,
	0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22, 0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x12, 0x33,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x69, 0x6e,
	0x73, 0x5f, 0x33, 0x22, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a,
	0x68, 0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x10, 0x69, 0x73, 0x43, 0x61,
	0x73, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a,
	0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22,
	0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53, 0x44, 0x22, 0x52, 0x0f, 0x69,
	0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41,
	0x0c, 0x4a, 0x0a, 0x22, 0x44, 0x6f, 0x67, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68, 0x64, 0x67, 0x6a, 0x64, 0x68,
	0x68, 0x67, 0x64, 0x22, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x4a,
	0x27, 0x22, 0x76, 0x4c, 0x52, 0x4d, 0x56, 0x33, 0x4d, 0x76, 0x59, 0x31, 0x46, 0x59, 0x4e, 0x50,
	0x39, 0x31, 0x6f, 0x6e, 0x33, 0x35, 0x43, 0x4a, 0x44, 0x35, 0x51, 0x4e, 0x35, 0x72, 0x77, 0x39,
	0x46, 0x70, 0x61, 0x39, 0x71, 0x4f, 0x4c, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x64, 0x66, 0x6b, 0x6a, 0x68,
	0x64, 0x67, 0x6a, 0x64, 0x68, 0x68, 0x67, 0x64, 0x22, 0x52, 0x05, 0x73, 0x65, 0x64, 0x6f, 0x6c,
	0x12, 0x30, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x44,
	0x4f, 0x47, 0x45, 0x22, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a,
	0x18, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x55, 0x53, 0x44, 0x22, 0x52, 0x16, 0x75, 0x6e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x32, 0x2d, 0x30, 0x36, 0x2d, 0x30, 0x37, 0x54, 0x32,
	0x33, 0x3a, 0x30, 0x31, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0xbc, 0x01, 0x0a, 0x03, 0x41, 0x70, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41,
	0x70, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x2a, 0x8e, 0x01, 0x0a, 0x0a, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x17, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x4f, 0x41,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x04, 0x2a, 0x81, 0x01, 0x0a, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4f, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4f,
	0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x54, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45,
	0x4e, 0x53, 0x45, 0x10, 0x04, 0x2a, 0xac, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x10, 0x04, 0x42, 0xa1, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x53, 0x69, 0x6d, 0x69, 0x66, 0x69, 0x6e, 0x69, 0x69, 0x43, 0x54, 0x4f, 0x2f, 0x73, 0x69, 0x6d,
	0x66, 0x69, 0x6e, 0x79, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x70, 0x69, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x07, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_message_proto_rawDescOnce sync.Once
	file_api_v1_message_proto_rawDescData = file_api_v1_message_proto_rawDesc
)

func file_api_v1_message_proto_rawDescGZIP() []byte {
	file_api_v1_message_proto_rawDescOnce.Do(func() {
		file_api_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_message_proto_rawDescData)
	})
	return file_api_v1_message_proto_rawDescData
}

var file_api_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_v1_message_proto_goTypes = []interface{}{
	(GoalStatus)(0),            // 0: api.v1.GoalStatus
	(GoalType)(0),              // 1: api.v1.GoalType
	(PocketType)(0),            // 2: api.v1.PocketType
	(*UserProfile)(nil),        // 3: api.v1.UserProfile
	(*StudentLoanAccount)(nil), // 4: api.v1.StudentLoanAccount
	(*CreditAccount)(nil),      // 5: api.v1.CreditAccount
	(*MortgageAccount)(nil),    // 6: api.v1.MortgageAccount
	(*InvestmentAccount)(nil),  // 7: api.v1.InvestmentAccount
	(*BankAccount)(nil),        // 8: api.v1.BankAccount
	(*Pocket)(nil),             // 9: api.v1.Pocket
	(*SmartGoal)(nil),          // 10: api.v1.SmartGoal
	(*Forecast)(nil),           // 11: api.v1.Forecast
	(*Milestone)(nil),          // 12: api.v1.Milestone
	(*Budget)(nil),             // 13: api.v1.Budget
	(*Category)(nil),           // 14: api.v1.Category
	(*InvesmentHolding)(nil),   // 15: api.v1.InvesmentHolding
	(*InvestmentSecurity)(nil), // 16: api.v1.InvestmentSecurity
	(*Apr)(nil),                // 17: api.v1.Apr
}
var file_api_v1_message_proto_depIdxs = []int32{
	8,  // 0: api.v1.UserProfile.bank_accounts:type_name -> api.v1.BankAccount
	7,  // 1: api.v1.UserProfile.investment_accounts:type_name -> api.v1.InvestmentAccount
	5,  // 2: api.v1.UserProfile.credit_accounts:type_name -> api.v1.CreditAccount
	6,  // 3: api.v1.UserProfile.mortgage_accounts:type_name -> api.v1.MortgageAccount
	4,  // 4: api.v1.UserProfile.student_loan_accounts:type_name -> api.v1.StudentLoanAccount
	17, // 5: api.v1.CreditAccount.aprs:type_name -> api.v1.Apr
	15, // 6: api.v1.InvestmentAccount.holdings:type_name -> api.v1.InvesmentHolding
	16, // 7: api.v1.InvestmentAccount.securities:type_name -> api.v1.InvestmentSecurity
	9,  // 8: api.v1.BankAccount.pockets:type_name -> api.v1.Pocket
	10, // 9: api.v1.Pocket.goals:type_name -> api.v1.SmartGoal
	2,  // 10: api.v1.Pocket.type:type_name -> api.v1.PocketType
	1,  // 11: api.v1.SmartGoal.goal_type:type_name -> api.v1.GoalType
	12, // 12: api.v1.SmartGoal.milestones:type_name -> api.v1.Milestone
	11, // 13: api.v1.SmartGoal.forecasts:type_name -> api.v1.Forecast
	13, // 14: api.v1.Milestone.budget:type_name -> api.v1.Budget
	14, // 15: api.v1.Budget.category:type_name -> api.v1.Category
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_v1_message_proto_init() }
func file_api_v1_message_proto_init() {
	if File_api_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudentLoanAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MortgageAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Milestone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Budget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvesmentHolding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Apr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_message_proto_goTypes,
		DependencyIndexes: file_api_v1_message_proto_depIdxs,
		EnumInfos:         file_api_v1_message_proto_enumTypes,
		MessageInfos:      file_api_v1_message_proto_msgTypes,
	}.Build()
	File_api_v1_message_proto = out.File
	file_api_v1_message_proto_rawDesc = nil
	file_api_v1_message_proto_goTypes = nil
	file_api_v1_message_proto_depIdxs = nil
}
