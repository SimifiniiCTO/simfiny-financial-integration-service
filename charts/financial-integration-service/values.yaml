# Default values for fis.

replicaCount: 3
logLevel: info
host: #0.0.0.0
backend: #http://backend-fis:9898/echo
backends: [ ]

image:
  repository: feelguuds/financial-integration-service
  tag: latest
  pullPolicy: IfNotPresent

ui:
  color: "#34577c"
  message: ""
  logo: ""

# failure conditions
faults:
  delay: false
  error: false
  unhealthy: false
  unready: false
  test_fail: false
  test_timeout: false

openai:
  apiKey: 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
  configs:
    model: text-davinci-003
    # degree of randomness in the text
    temperature: 0.7
    # maximum tokens to generate
    maxToken: 2000
    # control diversity via nucleus sampling. 0.5 means half of all likelihood weighted options are considered
    topP: 1.0
    # how much to penalize new token based on their existing presence in the text
    frequencyPenalty: 0.0
    # how much to penalize new token based on wether they exist already in the text
    presencePenalty: 1
    
clickhouse:
  host: l77zn1po0n.us-east-1.aws.clickhouse.cloud
  port: 8443
  user: default
  password: 8OnfmVp~U6xnZ
  maxConnectionAttempts: 4
  maxConnectionRetries: 4
  maxConnectionRetryTimeout: 500ms
  maxConnectionRetrySleepInterval: 100ms
  maxQueryTimeout: 500ms
  uri: https://default:8OnfmVp~U6xnZ@l77zn1po0n.us-east-1.aws.clickhouse.cloud:8443/default?secure=true&skip_verify=true
  
database:
  host: financial-integration-service-db
  port: 5432
  user: financial_integration_service
  password: financial_integration_service
  name: financial_integration_service
  sslMode: disable
  maxConnectionAttempts: 4
  maxConnectionRetries: 4
  maxConnectionRetryTimeout: 500ms
  maxConnectionRetrySleepInterval: 100ms
  maxQueryTimeout: 500ms
  maxIdleConnections: 10
  maxOpenConnections: 10
  connectionMaxLifetime: 10h

batch-jobs:
  recurring-transactions:
    interval: "@daily"
    enabled: true
  sync-all-accounts:
    interval: "@every 1h"
    enabled: true
  actionable-insights:
    interval: "@weekly"
    enabled: true

aws:
  # access key id for credentials provisioning
  accessKeyID: AKIA5HFOAJRN7YDEYPST
  # aws secret key for credentials provisioning
  secretAccessKey: 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
  # aws region
  region: us-east-2
  # aws key management id
  kmsID: mrk-e44f269bc0034feb95ede34154c3cfe4

plaid:
  enabled: true
  clientID: 61eb5d49ea3b4700127560d1
  secretKey: 465686056e8fd1b87db3d993d096d8
  env: sandbox
  # Only institutions that support ALL listed products will be displayed in Link.
  # If you don't see the institution you want in Link, remove any products you aren't using.
  # Important: When moving to Production, make sure to update this list with only the products
  # you plan to use. Otherwise, you may be billed for unneeded products.
  products: transactions,auth,balance,investments,liabilities
  # Only required for OAuth:
  # For sandbox, set PLAID_REDIRECT_URI to 'http://localhost:3000/'
  # The OAuth redirect flow requires an endpoint on the developer's website
  # that the bank website should redirect to. You will need to configure
  # this redirect URI for your client ID through the Plaid developer dashboard
  # at https://dashboard.plaid.com/team/api.
  # For development or production, you will need to use an https:// url
  # If you are not set up to use localhost with https:// on your system, you will be unable to test OAuth in development or production.
  # In this case you can leave the PLAID_REDIRECT_URI blank.
  oauthDomain: simfiny
  webhookOauthDomain: simfiny
  webhookEnabled: true

stripe:
  # wether or not stripe api level interactions are available
  enabled: true
  # api key
  apiKey: sk_test_4eC39HqLyjWDarjtT1zdp7dc
  endpointSigningKey: whsec_21441814697a4a51dc01395a030498131d56ec4d7155bb216cc75f36548c86bf

newRelic:
  # wether or not to enable metrics and traces
  enabled: true
  # new-relic api key
  apiKey: 62fd721c712d5863a4e75b8f547b7c1ea884NRAL

# Kubernetes Service settings
service:
  enabled: true
  # environment can either take values: local, dev, staging, prod
  environment: local
  annotations: { }
  type: ClusterIP
  metricsPort: 9797
  httpPort: 9898
  externalPort: 9898
  grpcPort: 9896
  grpcService: financial-integration-service
  nodePort: 31198
  # the port used to bind the http port to the host
  # NOTE: requires privileged container with NET_BIND_SERVICE capability -- this is useful for testing
  # in local clusters such as kind without port forwarding
  hostPort:
  env: "dev"
  http:
    client:
      timeout: 1s
    server:
      timeout: 1s
      shutdownTimeout: 5s
  rpc:
    timeout: 1s

dependencies:
  temporal:
    enabled: true
    name: temporal-cluster-frontend
    port: 7233
    clusterNamespace: temporal
    config:
      namespace: simfiny
      taskQueue: financial-integration-service-task-queue
      concurrentActivityExecutionSize: 5000
      concurrentWorkflowTaskPollers: 100
      workflowExecutionTimeout: 1s
      workflowTaskTimeout: 1s
      workflowRunTimeout: 1s
    retry:
      retryInterval: 100ms
      backoffCoefficient: 1.5
      maxRetryAttempts: 1
      maxRetryInterval: 1s
    rpc:
      timeout: 700ms

# enable h2c protocol (non-TLS version of HTTP/2)
h2c:
  enabled: false

# enable tls on the fis service
tls:
  enabled: false
  # the name of the secret used to mount the certificate key pair
  secretName:
  # the path where the certificate key pair will be mounted
  certPath: /data/cert
  # the port used to host the tls endpoint on the service
  port: 9899
  # the port used to bind the tls port to the host
  # NOTE: requires privileged container with NET_BIND_SERVICE capability -- this is useful for testing
  # in local clusters such as kind without port forwarding
  hostPort:

# create a certificate manager certificate (cert-manager required)
certificate:
  create: false
  # the issuer used to issue the certificate
  issuerRef:
    kind: ClusterIssuer
    name: self-signed
  # the hostname / subject alternative names for the certificate
  dnsNames:
    - financial-integration-service

# metrics-server add-on required
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 5
  # average total CPU usage per pod (1-100)
  cpu: 80
  # average memory usage per pod (100Mi-1Gi)
  memory: 80
  # average http requests per second per pod (k8s-prometheus-adapter)
  requests: 10000

# Redis address in the format <host>:<port>
cache: ""
cacheTLSEnabled: true

cacheTTLInSeconds: 3600
  
# Redis deployment
redis:
  enabled: false
  repository: redis
  tag: 6.0.8

postgresLocalDB:
  enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  enabled: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# set container security context
securityContext: { }

ingress:
  enabled: false
  className: ""
  annotations:
    { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: financial-integration-service.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# create Prometheus Operator monitor
serviceMonitor:
  enabled: false
  interval: 15s
  additionalLabels: { }

resources:
  limits:
  requests:
    cpu: 1m
    memory: 16Mi

nodeSelector: { }

tolerations: [ ]

affinity: { }

podAnnotations: { }

integrationTests:
  enabled: false

linkerd:
  profile:
    enabled: true
  annotations:
    linkerd.io/inject: enabled # Controls whether or not a pod should be injected; accepted values are enabled, disabled and ingress
    prometheus.io/scrape: "true"
    prometheus.io/port: 4191"
    prometheus.io/path: "/metrics"

taskProcessorWorkers: 5