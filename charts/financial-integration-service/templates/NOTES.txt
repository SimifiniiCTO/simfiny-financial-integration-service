# This block determines how to retrieve the application URL based on various configurations.
1. Get the application URL by running these commands:

{{- /* Check if ingress is enabled for the application. */ -}}
{{- if .Values.ingress.enabled }}
  {{- /* Loop through each host and path in the ingress configuration. */ -}}
  {{- range $host := .Values.ingress.hosts }}
    {{- range .paths }}
      # URL constructed from ingress configuration.
      echo http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
    {{- end }}
  {{- end }}

{{- /* Check if the service type is NodePort. */ -}}
{{- else if contains "NodePort" .Values.service.type }}
  # Using NodePort to retrieve application URL.
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "platform.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- /* Check if the service type is LoadBalancer. */ -}}
{{- else if contains "LoadBalancer" .Values.service.type }}
  # Note: Acquiring a LoadBalancer IP can take some time.
  echo "NOTE: It may take a few minutes for the LoadBalancer IP to be available."
  echo "You can watch the status by running:"
  echo "kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "fis.fullname" . }}"
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "fis.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.httpPort }}

{{- /* Check if the service type is ClusterIP. */ -}}
{{- else if contains "ClusterIP" .Values.service.type }}
  # Using ClusterIP with port forwarding to access the application locally.
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "fis.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT

{{- end }}
