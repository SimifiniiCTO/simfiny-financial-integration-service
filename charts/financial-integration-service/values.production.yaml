# Default values for fis.

replicaCount: 3
logLevel: info
host: #0.0.0.0
backend: #http://backend-fis:9898/echo
backends: [ ]

image:
  repository: feelguuds/financial-integration-service
  tag: latest
  pullPolicy: Always

ui:
  color: "#34577c"
  message: ""
  logo: ""

# failure conditions
faults:
  delay: false
  error: false
  unhealthy: false
  unready: false
  test_fail: false
  test_timeout: false

openai:
  apiKey: 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
  configs:
    model: text-davinci-003
    # degree of randomness in the text
    temperature: 0.7
    # maximum tokens to generate
    maxToken: 2000
    # control diversity via nucleus sampling. 0.5 means half of all likelihood weighted options are considered
    topP: 1.0
    # how much to penalize new token based on their existing presence in the text
    frequencyPenalty: 0.0
    # how much to penalize new token based on wether they exist already in the text
    presencePenalty: 1

clickhouse:
  host: l77zn1po0n.us-east-1.aws.clickhouse.cloud
  port: 8443
  user: default
  password: 8OnfmVp~U6xnZ
  maxConnectionAttempts: 4
  maxConnectionRetries: 4
  maxConnectionRetryTimeout: 500ms
  maxConnectionRetrySleepInterval: 100ms
  maxQueryTimeout: 500ms
  # ref: https://clickhouse.com/docs/en/interfaces/cli
  uri: clickhouse://default:8OnfmVp~U6xnZ@l77zn1po0n.us-east-1.aws.clickhouse.cloud:9440/Production # https://default:8OnfmVp~U6xnZ@l77zn1po0n.us-east-1.aws.clickhouse.cloud:8443/FinancialIntegrationService?secure=true&skip_verify=true
database:
  host: simfiny-db-cluster-do-user-11446161-0.b.db.ondigitalocean.com
  port: 25061
  user: doadmin
  password: AVNS_QIibiEIbI5JVODo
  name: fis-service-pool
  sslMode: require
  maxConnectionAttempts: 4
  maxConnectionRetries: 4
  maxConnectionRetryTimeout: 500ms
  maxConnectionRetrySleepInterval: 100ms
  maxQueryTimeout: 500ms
  maxIdleConnections: 10
  maxOpenConnections: 10
  connectionMaxLifetime: 10h

batchJobs:
  recurringTransactions:
    interval: "@every 6h"
    enabled: true
  syncAllAccounts:
    interval: "@every 6h"
    enabled: true
  actionableInsights:
    interval: "@weekly"
    enabled: true

aws:
  # access key id for credentials provisioning
  accessKeyID: AKIA5HFOAJRN7YDEYPST
  # aws secret key for credentials provisioning
  secretAccessKey: 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
  # aws r/egion
  region: us-east-2
  # aws key management id
  kmsID: mrk-e44f269bc0034feb95ede34154c3cfe4

plaid:
  # wether or not to enable plaid api level interactions
  enabled: true
  # plaid client id
  clientID: 61eb5d49ea3b4700127560d1
  # plaid secret key
  secretKey: 6f127c086ba9c1d5dafe7e38541783
  # plaid environment
  env: production
  # Only institutions that support ALL listed products will be displayed in Link.
  # If you don't see the institution you want in Link, remove any products you aren't using.
  # Important: When moving to Production, make sure to update this list with only the products
  # you plan to use. Otherwise, you may be billed for unneeded products.
  products: transactions
  # Only required for OAuth:
  # For sandbox, set PLAID_REDIRECT_URI to 'http://localhost:3000/'
  # The OAuth redirect flow requires an endpoint on the developer's website
  # that the bank website should redirect to. You will need to configure
  # this redirect URI for your client ID through the Plaid developer dashboard
  # at https://dashboard.plaid.com/team/api.
  # For development or production, you will need to use a https:// url
  # If you are not set up to use localhost with https:// on your system, you will be unable to test OAuth in development or production.
  # In this case you can leave the PLAID_REDIRECT_URI blank.
  oauthDomain: simfiny.dev/v1/gateway/service/financials
  # A webhook is an HTTP request used to provide push notifications. Plaid sends webhooks to programmatically
  # inform you about changes to Plaid Items or the status of asynchronous processes. For example, Plaid will send
  # a webhook when an Item is in an error state or has additional data available, or when a non-blocking process
  # (like gathering transaction data or verifying a bank account via micro-deposits) is com plete.
  #
  # To receive Plaid webhooks, set up a dedicated endpoint on your server as a webhook listener that can receive
  # POST requests, then provide this endpoint URL to Plaid as described in the next section. You can also test
  # webhooks without setting up your own endpoint following the instructions in Testing webhooks in Sandbox.
  #
  # ref: https://plaid.com/docs/api/webhooks/#introduction-to-webhooks
  webhookOauthDomain: simfiny.dev/v1/gateway/service/financials
  # wether or not a webhook is enabled
  webhookEnabled: true
  # max plaid links is the maximal amount of authorized institution a user can have
  maxPlaidLinks: 5

stripe:
  # wether or not stripe api level interactions are available
  enabled: true
  # api key
  apiKey: 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
  endpointSigningKey: whsec_vCoLvHA2R76QygUhsHEI8gEhtK91v8Wh

newRelic:
  # wether or not to enable metrics and traces
  enabled: true
  # new-relic api key
  apiKey: 62fd721c712d5863a4e75b8f547b7c1ea884NRAL

# Kubernetes Service settings
service:
  enabled: true
  # environment can either take values: local, dev, staging, prod
  environment: prod
  annotations: { }
  type: ClusterIP
  metricsPort: 9797
  httpPort: 9898
  externalPort: 9898
  grpcPort: 9896
  grpcService: financial-integration-service
  nodePort: 31198
  # the port used to bind the http port to the host
  # NOTE: requires privileged container with NET_BIND_SERVICE capability -- this is useful for testing
  # in local clusters such as kind without port forwarding
  hostPort:
  env: "prod"
  http:
    client:
      timeout: 1s
    server:
      timeout: 1s
      shutdownTimeout: 5s
  rpc:
    timeout: 1s

dependencies:
  temporal:
    enabled: true
    name: temporal-cluster-frontend
    port: 7233
    clusterNamespace: temporal
    config:
      namespace: simfiny
      taskQueue: financial-integration-service-task-queue
      concurrentActivityExecutionSize: 5000
      concurrentWorkflowTaskPollers: 100
      workflowExecutionTimeout: 1s
      workflowTaskTimeout: 1s
      workflowRunTimeout: 1s
    retry:
      retryInterval: 100ms
      backoffCoefficient: 1.5
      maxRetryAttempts: 1
      maxRetryInterval: 1s
    rpc:
      timeout: 700ms

# enable h2c protocol (non-TLS version of HTTP/2)
h2c:
  enabled: false

# enable tls on the fis service
tls:
  enabled: false
  # the name of the secret used to mount the certificate key pair
  secretName:
  # the path where the certificate key pair will be mounted
  certPath: /data/cert
  # the port used to host the tls endpoint on the service
  port: 9899
  # the port used to bind the tls port to the host
  # NOTE: requires privileged container with NET_BIND_SERVICE capability -- this is useful for testing
  # in local clusters such as kind without port forwarding
  hostPort:

# metrics-server add-on required
# -- autoscaling configuration for pod traffic scalibility
autoscaling:
  # -- Whether the autoscaler should be applied or not.
  enabled: true
  # -- Minimum replicas for the deployment
  minReplicas: 1
  # -- Maximum replicas for the deployment
  maxReplicas: 10
  # -- Target average utilizations for CPU and Memory, respectively.
  # These are thresholds that, when surpassed, will trigger the autoscaler
  # to increase the pod count, or decrease if the utilization is below the threshold for a certain time.
  cpu: 90   # Target average utilization for CPU in percentage
  # -- Target average utilization for Memory in percentage
  memory: 90
  # -- Define the scaling policies and behavior for scaling up and scaling down.
  # This is particularly useful to avoid rapid fluctuations in pod counts.
  behavior:
    # -- Scale up configuration
    scaleUp:
      # -- The number of seconds for which past recommendations
      # should be considered when scaling up or down.
      stabilizationWindowSeconds: 0
      # -- The percentage by which the autoscaler can increase or decrease the current replica count.
      percent: 100
      # -- The time window to consider when applying the percent scaling policy.
      periodSeconds: 15
    # -- Scale down configuration
    scaleDown:
      # -- The number of seconds for which past recommendations
      # should be considered when scaling up or down.
      stabilizationWindowSeconds: 300
      # -- The percentage by which the autoscaler can increase or decrease the current replica count.
      percent: 100
      # -- The time window to consider when applying the percent scaling policy.
      periodSeconds: 15

# Redis address in the format <host>:<port>
cache: "rediss://default:AVNS_B0xiuGf7QSnREFG@simfiny-redis-cluster-do-user-11446161-0.b.db.ondigitalocean.com:25061"
cacheTLSEnabled: true
cacheTTLInSeconds: 3600


# Redis deployment
redis:
  enabled: false
  repository: redis
  tag: 6.0.8

postgresLocalDB:
  enabled: false

serviceAccount:
  # Specifies whether a service account should be created
  enabled: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# set container security context
securityContext: { }

ingress:
  enabled: false
  className: ""
  annotations:
    { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: financial-integration-service.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# create Prometheus Operator monitor
serviceMonitor:
  enabled: false
  interval: 15s
  additionalLabels: { }

resources:
  limits:
    memory: "256Mi"
  requests:
    cpu: "100m"
    memory: "64Mi"

nodeSelector: { }

tolerations: [ ]

affinity: { }

podAnnotations: { }

integrationTests:
  enabled: false

linkerd:
  profile:
    enabled: true
  annotations:
    linkerd.io/inject: enabled # Controls whether or not a pod should be injected; accepted values are enabled, disabled and ingress
    prometheus.io/scrape: "true"
    prometheus.io/port: 4191"
    prometheus.io/path: "/metrics"

taskProcessorWorkers: 5

# Create a Certificate Manager certificate (cert-manager required).
certificate:
  # Whether to create the Certificate resource.
  create: false

  # The namespace in which the certificate should be created. Leave empty for default namespace.
  namespace: "" # optional

  # The validity duration of the certificate.
  duration: "24h"

  # Duration before the certificate expiration to renew it.
  renewBefore: "12h"

  # IP addresses to associate with the certificate (usually for internal services).
  ipAddresses: {}

  # The hostname and any subject alternative names for the certificate.
  dnsNames:
    - financial-integration-service

  # Reference to the Issuer or ClusterIssuer resource that will issue the certificate.
  issuerRef:
    # Name of the issuer resource.
    name: "self-signed"

    # Type of the issuer resource. Can be either 'Issuer' (namespace-scoped) or 'ClusterIssuer' (cluster-scoped).
    kind: "ClusterIssuer"

  # Intended usage of the certificate, determining its key usages and extended key usages.
  usages:
    - "server auth"
    - "client auth"

  # Configuration related to the private key of the certificate.
  key:
    # Cryptographic algorithm used for the key.
    algorithm: "rsa"

    # Size (in bits) of the key. Common sizes are 2048, 3072 or 4096 for RSA.
    size: "2048"

    # Policy that determines when to rotate the private key. 'Never' means no automatic rotation.
    rotationPolicy: "Never"
