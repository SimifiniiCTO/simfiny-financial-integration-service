syntax = "proto3";

package financial_integration_service_api.v1;

import "financial_integration_service_api/v1/request_response_financial_analytics_service.proto";
import "financial_integration_service_api/v1/request_response_financial_service.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// import "google/api/field_behavior.proto";
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/wrappers.proto";
option go_package = "github.com/SimifiniiCTO/simfiny-financial-integration-service/pkg/generated/financial_integration_service_api/v1";

// FinancialService API.
service FinancialService {
  rpc PlaidInitiateTokenExchange(PlaidInitiateTokenExchangeRequest) returns (PlaidInitiateTokenExchangeResponse) {
    option (google.api.http) = {
      post: "/api/v1/plaid/initiate-token-exchange"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "initiate plaid setup"
      tags: ["plaid"]
      operation_id: "InitiatePlaidSetup"
      description: "This endpoint initiates a plaid link token creation"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.PlaidSetupResponse"}
          }
        }
      }
    };
  }

  rpc PlaidInitiateTokenUpdate(PlaidInitiateTokenUpdateRequest) returns (PlaidInitiateTokenUpdateResponse) {
    option (google.api.http) = {
      post: "/api/v1/plaid/initiate-token-update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "initiate plaid link token update"
      tags: ["plaid"]
      operation_id: "InitiatePlaidTokenUpdate"
      description: "This endpoint initiates a plaid link token update"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.PlaidInitiateTokenUpdateResponse"}
          }
        }
      }
    };
  }

  rpc PlaidExchangeToken(PlaidExchangeTokenRequest) returns (PlaidExchangeTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/plaid/exchange-token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "exchange plaid token"
      tags: ["plaid"]
      operation_id: "ExchangePlaidToken"
      description: "This endpoint exchanges a plaid link token for a plaid access token"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.PlaidExchangeTokenResponse"}
          }
        }
      }
    };
  }

  rpc CreateUserProfile(CreateUserProfileRequest) returns (CreateUserProfileResponse) {
    option (google.api.http) = {
      post: "/api/v1/profile"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a user profile"
      tags: ["user profile"]
      operation_id: "CreateUserProfile"
      description:
        "This endpoint performs an a creation operation of a user profile based on the provided parameters"
        "This operation is implemented as a distributed transactions as this operation can span multiple services"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateUserProfileResponse"}
          }
        }
      }
    };
  }

  rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {get: "/api/v1/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Gets a user profile"
      tags: ["user profile"]
      operation_id: "GetUserProfile"
      description: "Queries and obtains a user profile based on the provided parameters"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetUserProfileResponse"}
          }
        }
      }
    };
  }

  rpc DeleteUserProfile(DeleteUserProfileRequest) returns (DeleteUserProfileResponse) {
    option (google.api.http) = {delete: "/api/v1/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "deletes a user profile"
      tags: ["user profile"]
      operation_id: "DeleteUserProfile"
      description:
        "This endpoint performs a delete operation on a user profile based on the provided parameters"
        "This deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend services"
        "The operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the request"
        "Divergent state is not expected to be encountered with this endpoint."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteUserProfileResponse"}
          }
        }
      }
    };
  }
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse) {
    option (google.api.http) = {
      put: "/api/v1/profile"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a user profile"
      tags: ["user profile"]
      operation_id: "UpdateUserProfile"
      description:
        "This endpoint performs an updates operation on a user profile based on the provided parameters"
        "This update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)"
        "All update operations are atomic by nature hence we should not expect any form of divergent state"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateUserResponse"}
          }
        }
      }
    };
  }

  rpc CreateBankAccount(CreateBankAccountRequest) returns (CreateBankAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/bank-account/profile/{user_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "CreateBankAccount"
      description: "This endpoint creates a bank account for a given user profile"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateUserResponse"}
          }
        }
      }
    };
  }

  rpc GetBankAccount(GetBankAccountRequest) returns (GetBankAccountResponse) {
    option (google.api.http) = {get: "/api/v1/bank-account/{bank_account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "GetBankAccount"
      description:
        "This endpoint returns the bank account if the user record id and bank account id exists"
        "\n"
        "example: /api/v1/bank-account?user_id=xxxxxx&&bank_account_id=xxxxxxx"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetBankAccountResponse"}
          }
        }
      }
    };
  }


  rpc UpdateBankAccount(UpdateBankAccountRequest) returns (UpdateBankAccountResponse) {
    option (google.api.http) = {
      put: "/api/v1/bank-account"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "UpdateBankAccount"
      description: "This endpoint updates a bank account if the user record id and bank account id exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateBankAccountResponse"}
          }
        }
      }
    };
  }

  rpc DeleteBankAccount(DeleteBankAccountRequest) returns (DeleteBankAccountResponse) {
    option (google.api.http) = {delete: "/api/v1/bank-account/{bank_account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "deletes a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "DeleteUserProfile"
      description:
        "This endpoint performs a delete operation on a user profile based on the provided parameters"
        "This deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend services"
        "The operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the request"
        "Divergent state is not expected to be encountered with this endpoint."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteBankAccountResponse"}
          }
        }
      }
    };
  }

  rpc GetPocket(GetPocketRequest) returns (GetPocketResponse) {
    option (google.api.http) = {get: "/api/v1/pocket/{pocket_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a pocket"
      tags: ["pocket"]
      operation_id: "GetPocket"
      description:
        "This endpoint returns the pocket if the pocket exists"
        "\n"
        "example: /api/v1/pocket/xxxxxxx"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetPocketResponse"}
          }
        }
      }
    };
  }

  rpc GetSmartGoalsByPocketId(GetSmartGoalsByPocketIdRequest) returns (GetSmartGoalsByPocketIdResponse) {
    option (google.api.http) = {get: "/api/v1/smart-goal/pocket/{pocket_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get smart goals by pocket id"
      tags: ["smart goals"]
      operation_id: "GetSmartGoalsByPocketId"
      description: "This endpoint returns the smart goals if the pocket exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetSmartGoalsByPocketIdResponse"}
          }
        }
      }
    };
  }

  rpc CreateSmartGoal(CreateSmartGoalRequest) returns (CreateSmartGoalResponse) {
    option (google.api.http) = {
      post: "/api/v1/smart-goal"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a smart goal"
      tags: ["smart goals"]
      operation_id: "CreateSmartGoal"
      description: "This endpoint creates a smart goal"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateSmartGoalResponse"}
          }
        }
      }
    };
  }

  rpc UpdateSmartGoal(UpdateSmartGoalRequest) returns (UpdateSmartGoalResponse) {
    option (google.api.http) = {
      put: "/api/v1/smart-goal"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a smart goal"
      tags: ["smart goals"]
      operation_id: "UpdateSmartGoal"
      description: "This endpoint updates a smart goal"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateSmartGoalResponse"}
          }
        }
      }
    };
  }

  rpc DeleteSmartGoal(DeleteSmartGoalRequest) returns (DeleteSmartGoalResponse) {
    option (google.api.http) = {delete: "/api/v1/smart-goal/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a smart goal"
      tags: ["smart goals"]
      operation_id: "DeleteSmartGoal"
      description: "This endpoint deletes a smart goal"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteSmartGoalResponse"}
          }
        }
      }
    };
  }

  rpc CreateMilestone(CreateMilestoneRequest) returns (CreateMilestoneResponse) {
    option (google.api.http) = {
      post: "/api/v1/milestone"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a milestone"
      tags: ["milestone"]
      operation_id: "CreateMilestone"
      description: "This endpoint creates a milestone"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateMilestoneResponse"}
          }
        }
      }
    };
  }

  rpc DeleteMilestone(DeleteMilestoneRequest) returns (DeleteMilestoneResponse) {
    option (google.api.http) = {delete: "/api/v1/milestone/{milestone_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a milestone"
      tags: ["milestone"]
      operation_id: "DeleteMilestone"
      description: "This endpoint deletes a milestone"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteMilestoneResponse"}
          }
        }
      }
    };
  }

  rpc UpdateMilestone(UpdateMilestoneRequest) returns (UpdateMilestoneResponse) {
    option (google.api.http) = {
      put: "/api/v1/milestone"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "updates a milestone"
      tags: ["milestone"]
      operation_id: "UpdatesMilestone"
      description: "This endpoint updates a milestone"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateMilestoneResponse"}
          }
        }
      }
    };
  }

  rpc GetMilestone(GetMilestoneRequest) returns (GetMilestoneResponse) {
    option (google.api.http) = {get: "/api/v1/milestone/{milestone_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get milestone by id"
      tags: ["milestone"]
      operation_id: "GetMilestone"
      description: "This endpoint returns the milestone if the milestone exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetMilestoneByIdResponse"}
          }
        }
      }
    };
  }

  rpc GetMilestonesBySmartGoalId(GetMilestonesBySmartGoalIdRequest) returns (GetMilestonesBySmartGoalIdResponse) {
    option (google.api.http) = {get: "/api/v1/milestone/smart-goal/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get milestones by smart goal id"
      tags: ["milestone"]
      operation_id: "GetMilestones"
      description: "This endpoint returns the milestones if the smart goal exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetMilestonesBySmartGoalIdResponse"}
          }
        }
      }
    };
  }

  rpc GetForecast(GetForecastRequest) returns (GetForecastResponse) {
    option (google.api.http) = {get: "/api/v1/forecast/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get forecast by id"
      tags: ["forecast"]
      operation_id: "GetForecast"
      description: "This endpoint returns the forecast if the forecast exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetForecastResponse"}
          }
        }
      }
    };
  }

  rpc CreateBudget(CreateBudgetRequest) returns (CreateBudgetResponse) {
    option (google.api.http) = {
      post: "/api/v1/budget"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a budget"
      tags: ["budget"]
      operation_id: "CreateBudget"
      description: "This endpoint creates a budget"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateBudgetResponse"}
          }
        }
      }
    };
  }

  rpc UpdateBudget(UpdateBudgetRequest) returns (UpdateBudgetResponse) {
    option (google.api.http) = {
      put: "/api/v1/budget"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "updates a budget"
      tags: ["budget"]
      operation_id: "UpdatesBudget"
      description: "This endpoint updates a budget"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateBudgetResponse"}
          }
        }
      }
    };
  }

  rpc DeleteBudget(DeleteBudgetRequest) returns (DeleteBudgetResponse) {
    option (google.api.http) = {delete: "/api/v1/budget/{budget_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a budget"
      tags: ["budget"]
      operation_id: "DeleteBudget"
      description: "This endpoint deletes a budget"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteBudgetResponse"}
          }
        }
      }
    };
  }

  rpc GetBudget(GetBudgetRequest) returns (GetBudgetResponse) {
    option (google.api.http) = {get: "/api/v1/budget/{budget_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get budget by id"
      tags: ["budget"]
      operation_id: "GetBudget"
      description: "This endpoint returns the budget if the budget exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetBudgetResponse"}
          }
        }
      }
    };
  }

  rpc GetAllBudgets(GetAllBudgetsRequest) returns (GetAllBudgetsResponse) {
    option (google.api.http) = {get: "/api/v1/budget"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get all budgets"
      tags: ["budget"]
      operation_id: "GetAllBudgets"
      description: "This endpoint returns all budgets"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetAllBudgetsResponse"}
          }
        }
      }
    };
  }

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {get: "/api/v1/health"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "health check"
      tags: ["service health"]
      operation_id: "HealthCheck"
      description: "This endpoint performs a healc check on the service"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.HealthCheckResponse"}
          }
        }
      }
    };
  }

  rpc ReadynessCheck(ReadynessCheckRequest) returns (ReadynessCheckResponse) {
    option (google.api.http) = {get: "/api/v1/ready"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "readyness check"
      tags: ["service readyness"]
      operation_id: "ReadynessCheck"
      description: "This endpoint performs a readiness check on the service"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.ReadynessCheckResponse"}
          }
        }
      }
    };
  }

  rpc GetInvestmentAcccount(GetInvestmentAcccountRequest) returns (GetInvestmentAcccountResponse) {
    option (google.api.http) = {get: "/api/v1/account/{user_id}/investment/{investment_account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get investment account by id"
      tags: ["investment account"]
      operation_id: "GetInvestmentAccount"
      description: "This endpoint returns the investment account if the investment account exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetInvestmentAccountResponse"}
          }
        }
      }
    };
  }

  rpc GetMortgageAccount(GetMortgageAccountRequest) returns (GetMortgageAccountResponse) {
    option (google.api.http) = {get: "/api/v1/account/{user_id}/mortgage/{mortgage_account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get mortgage account by id"
      tags: ["mortgage account"]
      operation_id: "GetMortageAccount"
      description: "This endpoint returns the mortgage account if the mortgage account exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetMortageAccountResponse"}
          }
        }
      }
    };
  }

  rpc GetLiabilityAccount(GetLiabilityAccountRequest) returns (GetLiabilityAccountResponse) {
    option (google.api.http) = {get: "/api/v1/account/{user_id}/liability/{liability_account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get liability account by id"
      tags: ["liability account"]
      operation_id: "GetLiabilityAccount"
      description: "This endpoint returns the liability account if the liability account exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetLiabilityAccountResponse"}
          }
        }
      }
    };
  }

  rpc GetStudentLoanAccount(GetStudentLoanAccountRequest) returns (GetStudentLoanAccountResponse) {
    option (google.api.http) = {get: "/api/v1/account/{user_id}/student-loan/{student_loan_account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get student loan account by id"
      tags: ["student loan account"]
      operation_id: "GetStudentLoanAccount"
      description: "This endpoint returns the student loan account if the student loan account exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetStudentLoanAccountResponse"}
          }
        }
      }
    };
  }

  rpc CreateManualLink(CreateManualLinkRequest) returns (CreateManualLinkResponse) {
    option (google.api.http) = {
      post: "/api/v1/link"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create link"
      tags: ["link"]
      operation_id: "CreateLink"
      description: "This endpoint creates a link"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateLinkResponse"}
          }
        }
      }
    };
  }

  rpc GetLink(GetLinkRequest) returns (GetLinkResponse) {
    option (google.api.http) = {get: "/api/v1/link/{link_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get link by id"
      tags: ["link"]
      operation_id: "GetLink"
      description: "This endpoint returns the link if the link exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetLinkResponse"}
          }
        }
      }
    };
  }

  rpc GetLinks(GetLinksRequest) returns (GetLinksResponse) {
    option (google.api.http) = {get: "/api/v1/links/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get links"
      tags: ["link"]
      operation_id: "GetLinks"
      description: "This endpoint returns the links"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetLinksResponse"}
          }
        }
      }
    };
  }

  rpc DeleteLink(DeleteLinkRequest) returns (DeleteLinkResponse) {
    option (google.api.http) = {delete: "/api/v1/link/{link_id}/user/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete link by id"
      tags: ["link"]
      operation_id: "DeleteLink"
      description: "This endpoint deletes the link if the link exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteLinkResponse"}
          }
        }
      }
    };
  }

  rpc GetReCurringTransactions(GetReCurringTransactionsRequest) returns (GetReCurringTransactionsResponse) {
    option (google.api.http) = {get: "/api/v1/transactions/recurring-transactions/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get recurring transactions"
      tags: ["recurring transactions"]
      operation_id: "GetRecurringTransactions"
      description: "This endpoint returns the recurring transactions for a given user id"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {json_schema: {ref: ".api.v1.GetRecurringTransactionsResponse"}}
        }
      }
    };
  }

  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {get: "/api/v1/transactions/{user_id}/pageNumber/{page_number}/pageSize/{page_size}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get transactions"
      tags: ["transactions"]
      operation_id: "GetTransactions"
      description: "This endpoint returns the transactions for a given user id"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {json_schema: {ref: ".api.v1.GetTransactionsResponse"}}
        }
      }
    };
  }

  rpc ProcessWebhook(ProcessWebhookRequest) returns (ProcessWebhookResponse) {
    option (google.api.http) = {
      post: "/api/v1/plaid/webhook"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Processes a webhook obtained from plaid"
      tags: ["webhook"]
      operation_id: "ProcessWebhook"
      description: "This endpoint enabled simfiny to process triggered webhooks"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.ProcessWebhookResponse"}
          }
        }
      }
    };
  }

  rpc StripeWebhook(StripeWebhookRequest) returns (StripeWebhookResponse){
    option (google.api.http) = {
      post: "/api/v1/stripe/webhook"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Processes a webhook obtained from stripe"
      tags: ["webhook"]
      operation_id: "ProcessStripeWebhook"
      description: "This endpoint enabled simfiny to process triggered webhooks from stripe"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.StripeWebhookResponse"}
          }
        }
      }
    };
  }

  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {
    option (google.api.http) = {
      post: "/api/v1/stripe/subscription"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Creates a new subscription for a given customer against stripe"
      tags: ["payment"]
      operation_id: "CreateSubscription"
      description: "This endpoint enabled a user to create a new subscription against stripe"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateSubscriptionResponse"}
          }
        }
      }
    };
  }

  // Transaction Aggregates By Queries
  rpc GetTransactionAggregates(GetTransactionAggregatesRequest) returns (GetTransactionAggregatesResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/transaction-aggregates/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the aggregated transactions for a user and month"
      tags: ["transaction-aggregates"]
      operation_id: "TransactionAggregates"
      description: "This API could accept user_id and month as input parameters and return the aggregated transactions for that user and month."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetTransactionAggregatesResponse"}
          }
        }
      }
    };
  }

  rpc GetUserAccountBalanceHistory(GetUserAccountBalanceHistoryRequest) returns (GetUserAccountBalanceHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/balance-history/user/{user_id}/pagenumber/{page_number}/pagesize/{page_size}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the account balance history for a user"
      tags: ["balance-history"]
      operation_id: "GetUserAccountBalanceHistory"
      description: "This API could accept user_id as input parameters and return the account balance history for that user."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetUserAccountBalanceHistoryResponse"}
          }
        }
      }
    };
  }

  rpc GetAccountBalanceHistory(GetAccountBalanceHistoryRequest) returns (GetAccountBalanceHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/balance-history/account/{plaid_account_id}/pagenumber/{page_number}/pagesize/{page_size}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the account balance history for an account"
      tags: ["balance-history"]
      operation_id: "GetAccountBalanceHistory"
      description: "This API could accept account_id as input parameters and return the account balance history for that account."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetAccountBalanceHistoryResponse"}
          }
        }
      }
    };
  }

  // Get user category monthly expenditure
  rpc GetUserCategoryMonthlyExpenditure(GetUserCategoryMonthlyExpenditureRequest) returns (GetUserCategoryMonthlyExpenditureResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/category-monthly-expenditure/user/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the monthly category expenditure for a user"
      tags: ["category", "expenditures"]
      operation_id: "GetUserCategoryMonthlyExpenditure"
      description: "This API could accept user_id as an input parameter and return the monthly category expenditure for that user."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetUserCategoryMonthlyExpenditureResponse"}
          }
        }
      }
    };
  }

  // Get CategoryMonthlyIncome by Category and User - This would return all CategoryMonthlyIncome records for a specific user for a specific personal finance category
  rpc GetUserCategoryMonthlyIncome(GetUserCategoryMonthlyIncomeRequest) returns (GetUserCategoryMonthlyIncomeResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/category-monthly-income/user/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get monthly income by user for a specific category"
      tags: ["category", "income"]
      operation_id: "GetUserCategoryMonthlyIncome"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetUserCategoryMonthlyIncomeResponse"}
          }
        }
      }
    };
  }

  // Get CategoryMonthlyTransactionCount by User - This would return all CategoryMonthlyTransactionCount records for a specific user
  rpc GetCategoryMonthlyTransactionCount(GetCategoryMonthlyTransactionCountRequest) returns (GetCategoryMonthlyTransactionCountResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/category-monthly-transaction-count/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get monthly transaction count by user, month, and category"
      tags: ["category", "transactions"]
      operation_id: "GetCategoryMonthlyTransactionCount"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetCategoryMonthlyTransactionCountResponse"}
          }
        }
      }
    };
  }

  rpc GetDebtToIncomeRatio(GetDebtToIncomeRatioRequest) returns (GetDebtToIncomeRatioResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/debt-to-income-ratio/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Debt-to-Income ratio by user and month"
      tags: ["finance"]
      operation_id: "GetDebtToIncomeRatio"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetDebtToIncomeRatioResponse"}
          }
        }
      }
    };
  }

  rpc GetExpenseMetrics(GetExpenseMetricsRequest) returns (GetExpenseMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/expenses/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Expense Metrics by user, month and category"
      tags: ["finance"]
      operation_id: "GetExpenseMetrics"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetExpenseMetricsResponse"}
          }
        }
      }
    };
  }

  rpc GetFinancialProfile(GetFinancialProfileRequest) returns (GetFinancialProfileResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/finance-profile/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Financial Profile by user and month"
      tags: ["finance"]
      operation_id: "GetFinancialProfile"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetFinancialProfileResponse"}
          }
        }
      }
    };
  }

  rpc GetIncomeExpenseRatio(GetIncomeExpenseRatioRequest) returns (GetIncomeExpenseRatioResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/income-expense-ratio/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Income Expense Ratio by user and month"
      tags: ["finance"]
      operation_id: "GetIncomeExpenseRatio"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetIncomeExpenseRatioResponse"}
          }
        }
      }
    };
  }

  rpc GetIncomeMetrics(GetIncomeMetricsRequest) returns (GetIncomeMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/income/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Income Metrics by user, month and category"
      tags: ["finance"]
      operation_id: "GetIncomeMetrics"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetIncomeMetricsResponse"}
          }
        }
      }
    };
  }

  rpc GetMerchantMonthlyExpenditure(GetMerchantMonthlyExpenditureRequest) returns (GetMerchantMonthlyExpenditureResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/merchant-monthly-expenditure/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Merchant Monthly Expenditure by user, month and merchant name"
      tags: ["finance"]
      operation_id: "GetMerchantMonthlyExpenditure"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMerchantMonthlyExpenditureResponse"}
          }
        }
      }
    };
  }

  //@here
  rpc GetMonthlyBalance(GetMonthlyBalanceRequest) returns (GetMonthlyBalanceResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/monthly-balance/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Monthly Balance by user and month"
      tags: ["finance"]
      operation_id: "GetMonthlyBalance"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMonthlyBalanceResponse"}
          }
        }
      }
    };
  }

  rpc GetMonthlyExpenditure(GetMonthlyExpenditureRequest) returns (GetMonthlyExpenditureResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/monthly-expenditure/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Monthly Expenditure by user and month"
      tags: ["finance"]
      operation_id: "GetMonthlyExpenditure"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMonthlyExpenditureResponse"}
          }
        }
      }
    };
  }

  rpc GetMonthlyIncome(GetMonthlyIncomeRequest) returns (GetMonthlyIncomeResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/monthly-income/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Monthly Income by user and month"
      tags: ["finance"]
      operation_id: "GetMonthlyIncome"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMonthlyIncomeResponse"}
          }
        }
      }
    };
  }

  rpc GetMonthlySavings(GetMonthlySavingsRequest) returns (GetMonthlySavingsResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/monthly-savings/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Monthly Savings by user and month"
      tags: ["finance"]
      operation_id: "GetMonthlySavings"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMonthlySavingsResponse"}
          }
        }
      }
    };
  }

  rpc GetMonthlyTotalQuantityBySecurityAndUser(GetMonthlyTotalQuantityBySecurityAndUserRequest) returns (GetMonthlyTotalQuantityBySecurityAndUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/monthly-total-quantity-by-security-and-user/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Monthly Total Quantity of Security by user, month and security"
      tags: ["finance"]
      operation_id: "GetMonthlyTotalQuantityBySecurityAndUser"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMonthlyTotalQuantityBySecurityAndUserResponse"}
          }
        }
      }
    };
  }

  rpc GetMonthlyTransactionCount(GetMonthlyTransactionCountRequest) returns (GetMonthlyTransactionCountResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/monthly-transaction-count/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Monthly Transaction Count by user and month"
      tags: ["finance"]
      operation_id: "GetMonthlyTransactionCount"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMonthlyTransactionCountResponse"}
          }
        }
      }
    };
  }

  rpc GetPaymentChannelMonthlyExpenditure(GetPaymentChannelMonthlyExpenditureRequest) returns (GetPaymentChannelMonthlyExpenditureResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/payment-channel-expenditure/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Payment Channel Monthly Expenditure by user, month, and payment channel"
      tags: ["finance"]
      operation_id: "GetPaymentChannelMonthlyExpenditure"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetPaymentChannelMonthlyExpenditureResponse"}
          }
        }
      }
    };
  }

  rpc GetTotalInvestmentBySecurity(GetTotalInvestmentBySecurityRequest) returns (GetTotalInvestmentBySecurityResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/total-investment/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Total Investment by user and security"
      tags: ["finance"]
      operation_id: "GetTotalInvestmentBySecurity"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetTotalInvestmentBySecurityResponse"}
          }
        }
      }
    };
  }

  rpc GetMelodyFinancialContext(GetMelodyFinancialContextRequest) returns (GetMelodyFinancialContextResponse) {
    option (google.api.http) = {
      get: "/api/v1/analytics/melody-financial-context/{user_id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Melody Financial Context"
      tags: ["finance"]
      operation_id: "GetMelodyFinancialContext"
      responses: {
        key: "200"
        value: {
          description: "Successful operation"
          schema: {
            json_schema: {ref: ".api.v1.GetMelodyFinancialContextResponse"}
          }
        }
      }
    };
  }

  rpc GetTransactionsForBankAccount(GetTransactionsForBankAccountRequest) returns (GetTransactionsForBankAccountResponse) {
    option (google.api.http) = {get: "/api/v1/transactions/{user_id}/plaid-account-id/{plaid_account_id}/pageNumber/{page_number}/pageSize/{page_size}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get transactions tied to a bank account and account id"
      tags: ["transactions"]
      operation_id: "GetTransactions"
      description: "This endpoint returns the transactions for a given user id and a business account id"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {json_schema: {ref: ".api.v1.GetTransactionsForBankAccountResponse"}}
        }
      }
    };
  }
}
