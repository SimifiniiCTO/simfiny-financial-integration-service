syntax = "proto3";

package api.v1;

option go_package = "github.com/SimifiniiCTO/simfiny-financial-integration-service/generate/api/v1";
import "protoc-gen-gorm/options/gorm.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "gogoproto/gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

enum ReOccuringTransactionsFrequency {
    RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED = 0;
    RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY = 1;
    RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY = 2;
    RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY = 3;
    RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY = 4;
    RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY = 5;
}

enum ReOccuringTransactionsStatus {
    RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED = 0;
    // A MATURE recurring stream should have at least 3 transactions and happen
    //  on a regular cadence (For Annual recurring stream, we will mark it MATURE after 2 instances).
    RE_OCCURING_TRANSACTIONS_STATUS_MATURE = 1;
    // When a recurring transaction first appears in the transaction history and before it fulfills
    // the requirement of a mature stream, the status will be EARLY_DETECTION.
    RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION = 2;
    // A stream that was previously in the EARLY_DETECTION status will move to the TOMBSTONED
    // status when no further transactions were found at the next expected date.
    RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED = 3;
}

message PersonalFinanceCategory {
    string primary = 1;
    string detailed = 2;
}

enum ReCurringFlow {
    RE_CURRING_FLOW_UNSPECIFIED = 0;
    RE_CURRING_FLOW_INFLOW = 1;
    RE_CURRING_FLOW_OUTFLOW = 2;
}

message InvestmentTransaction {
    // @gotag: clickhouse:"account_id"
    string account_id = 1;
    // @gotag: clickhouse:"amount"
    string ammount = 2;
    // @gotag: clickhouse:"investment_transaction_id"
    string investment_transaction_id = 3;
    // @gotag: clickhouse:"security_id"
    string security_id = 4;
    // @gotag: clickhouse:"date"
    string date = 5;
    // @gotag: clickhouse:"name"
    string name = 6;
    // @gotag: clickhouse:"quantity"
    double quantity = 7;
    // @gotag: clickhouse:"amount"
    double amount = 8;
    // @gotag: clickhouse:"price"
    double price = 9;
    // @gotag: clickhouse:"fees"
    double fees = 10;
    // @gotag: clickhouse:"type"
    string type = 11;
    // @gotag: clickhouse:"subtype"
    string subtype = 12;
    // @gotag: clickhouse:"iso_currency_code"
    string iso_currency_code = 13;
    // @gotag: clickhouse:"unofficial_currency_code"
    string unofficial_currency_code = 14;
     // @gotag: clickhouse:"link_id"
    uint64 link_id = 15 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: clickhouse:"id"
    uint64 id = 16 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
        // @gotag: clickhouse:"user_id"
    uint64 user_id = 17 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];

    string created_at = 18;
    option (gorm.opts) = {ormable: true};
    int32 sign = 19;
}

message ReOccuringTransaction {
    // @gotag: clickhouse:"account_id"
    string account_id = 1;
    // @gotag: clickhouse:"stream_id"
    string stream_id = 2;
    // @gotag: clickhouse:"category"
    repeated string category = 3;
    // @gotag: clickhouse:"category_id"
    string category_id = 4;
    // @gotag: clickhouse:"description"
    string description = 5;
    // @gotag: clickhouse:"merchant_name"
    string merchant_name = 6;
    // @gotag: clickhouse:"personal_finance_category_primary"
    string personal_finance_category_primary = 7;
    // @gotag: clickhouse:"personal_finance_category_detailed"
    string personal_finance_category_detailed = 8;
    // @gotag: clickhouse:"first_date"
    string first_date = 9;
    // @gotag: clickhouse:"last_date"
    string last_date = 10;
    // @gotag: clickhouse:"frequency"
    ReOccuringTransactionsFrequency frequency = 11;
    // @gotag: clickhouse:"transaction_ids"
    repeated string transaction_ids = 12;
    // @gotag: clickhouse:"average_amount"
    string average_amount = 13;
    // @gotag: clickhouse:"average_amount_iso_currency_code"
    string average_amount_iso_currency_code = 14;
    // @gotag: clickhouse:"last_amount"
    string last_amount = 15;
    // @gotag: clickhouse:"last_amount_iso_currency_code"
    string last_amount_iso_currency_code = 16;
    // @gotag: clickhouse:"is_active"
    bool is_active = 17;
    // @gotag: clickhouse:"status"
    ReOccuringTransactionsStatus status = 18;
    // @gotag: clickhouse:"updated_time"
    string updated_time = 19;
    // @gotag: clickhouse:"user_id"
    uint64 user_id = 20 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: clickhouse:"link_id"
    uint64 link_id = 21 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: clickhouse:"id"
    uint64 id = 22 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    // @gotag: clickhouse:"flow"
    ReCurringFlow flow = 23;
    option (gorm.opts) = {ormable: true};
    int32 sign = 24;
}

message Transaction {
    message Location {
        string address = 1;
        string city = 2;
        string region = 3;
        string postal_code = 4;
        string country = 5;
        double lat = 6;
        double lon = 7;
        string store_number = 8;
    }
    
    message PaymentMeta {
        string by_order_of = 1;
        string payee = 2;
        string payer = 3;
        string payment_method = 4;
        string payment_processor = 5;
        string ppd_id = 6;
        string reason = 7;
        string reference_number = 8;
    }

    option (gorm.opts) = {ormable: true};
    // @gotag: clickhouse:"account_id"
    string account_id = 1;
    // @gotag: clickhouse:"amount"
    double amount = 2;
    // @gotag: clickhouse:"iso_currency_code"
    string iso_currency_code = 3;
    // @gotag: clickhouse:"unofficial_currency_code"
    string unofficial_currency_code = 4;
    // @gotag: clickhouse:"category"
    repeated string category = 5;
    // @gotag: clickhouse:"category_id"
    string category_id = 6;
    // @gotag: clickhouse:"check_number"
    string check_number = 7;
    // @gotag: clickhouse:"date"
    string date = 8;
    // @gotag: clickhouse:"datetime"
    string datetime = 9;
    // @gotag: clickhouse:"authorized_date"
    string authorized_date = 10;
    // @gotag: clickhouse:"authorized_datetime"
    string authorized_datetime = 11;
    // @gotag: clickhouse:"location"
    Location location = 12;
    // @gotag: clickhouse:"name"
    string name = 13;
    // @gotag: clickhouse:"merchant_name"
    string merchant_name = 14;
    // @gotag: clickhouse:"payment_meta"
    PaymentMeta payment_meta = 15;
    // @gotag: clickhouse:"payment_channel"
    string payment_channel = 16;
    // @gotag: clickhouse:"pending"
    bool pending = 17;
    // @gotag: clickhouse:"pending_transaction_id"
    string pending_transaction_id = 18;
    // @gotag: clickhouse:"account_owner"
    string account_owner = 19;
    // @gotag: clickhouse:"transaction_id"
    string transaction_id = 20;
    // @gotag: clickhouse:"transaction_code"
    string transaction_code = 21;
    uint64 id = 22 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""}
    ];
    // @gotag: clickhouse:"user_id"
    uint64 user_id = 23 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    // @gotag: clickhouse:"link_id"
    uint64 link_id = 24 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {example: ""},
        (validate.rules).uint64.gt = 0
    ];
    int32 sign = 25;
}

message TransactionAmountByCountryMetric {
    string country = 1;
    double amount = 2;
}

message AverageTransactionAmountByCategoryMetric {
    string category = 1;
    double amount = 2;
}

message MonthlyTransactionCountByCategoryMetric {
    string category = 1;
    uint32 count = 2;
    string month = 3;
}

message TransactionCountByMerchantPaymentChannelMetric {
    string merchant_name = 1;
    string payment_channel = 2;
    uint32 transaction_count = 3;
}

message TransactionAmountDistributionByCategoryMetric {
    string category = 1;
    double mean = 2;
    double median = 3;
    double standard_deviation = 4;
}