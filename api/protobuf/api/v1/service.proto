syntax = "proto3";

package api.v1;

import "api/v1/request_response.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// import "google/api/field_behavior.proto";
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/wrappers.proto";
option go_package = "github.com/SimifiniiCTO/simfiny-financial-integration-service/generate/api/v1";

// FinancialService API.
service FinancialService {
  rpc CreateUserProfile(CreateUserProfileRequest) returns (CreateUserProfileResponse) {
    option (google.api.http) = {
      post: "/api/v1/profile"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a user profile"
      tags: ["user profile"]
      operation_id: "CreateUserProfile"
      description:
        "This endpoint performs an a creation operation of a user profile based on the provided parameters"
        "This operation is implemented as a distributed transactions as this operation can span multiple services"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateUserProfileResponse"}
          }
        }
      }
    };
  }

  rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
    option (google.api.http) = {get: "/api/v1/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Gets a user profile"
      tags: ["user profile"]
      operation_id: "GetUserProfile"
      description: "Queries and obtains a user profile based on the provided parameters"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetUserProfileResponse"}
          }
        }
      }
    };
  }

  rpc DeleteUserProfile(DeleteUserProfileRequest) returns (DeleteUserProfileResponse) {
    option (google.api.http) = {delete: "/api/v1/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "deletes a user profile"
      tags: ["user profile"]
      operation_id: "DeleteUserProfile"
      description:
        "This endpoint performs a delete operation on a user profile based on the provided parameters"
        "This deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend services"
        "The operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the request"
        "Divergent state is not expected to be encountered with this endpoint."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteUserProfileResponse"}
          }
        }
      }
    };
  }

  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse) {
    option (google.api.http) = {
      put: "/api/v1/profile"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a user profile"
      tags: ["user profile"]
      operation_id: "UpdateUserProfile"
      description:
        "This endpoint performs an updates operation on a user profile based on the provided parameters"
        "This update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)"
        "All update operations are atomic by nature hence we should not expect any form of divergent state"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateUserResponse"}
          }
        }
      }
    };
  }

  rpc CreateBankAccount(CreateBankAccountRequest) returns (CreateBankAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/bank-account/profile/{user_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "CreateBankAccount"
      description: "This endpoint creates a bank account for a given user profile"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateUserResponse"}
          }
        }
      }
    };
  }

  rpc GetBankAccount(GetBankAccountRequest) returns (GetBankAccountResponse) {
    option (google.api.http) = {get: "/api/v1/bank-account/bank_account_id}/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "GetBankAccount"
      description:
        "This endpoint returns the bank account if the user record id and bank account id exists"
        "\n"
        "example: /api/v1/bank-account?user_id=xxxxxx&&bank_account_id=xxxxxxx"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetBankAccountResponse"}
          }
        }
      }
    };
  }

  rpc UpdateBankAccount(UpdateBankAccountRequest) returns (UpdateBankAccountResponse) {
    option (google.api.http) = {put: "/api/v1/bank-account/bank_account_id}/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "UpdateBankAccount"
      description: "This endpoint updates a bank account if the user record id and bank account id exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateBankAccountResponse"}
          }
        }
      }
    };
  }

  rpc DeleteBankAccount(DeleteBankAccountRequest) returns (DeleteBankAccountResponse) {
    option (google.api.http) = {delete: "/api/v1/bank-account/bank_account_id}/profile/{user_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "deletes a bank account for a given user profile"
      tags: ["bank account"]
      operation_id: "DeleteUserProfile"
      description:
        "This endpoint performs a delete operation on a user profile based on the provided parameters"
        "This deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend services"
        "The operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the request"
        "Divergent state is not expected to be encountered with this endpoint."
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteBankAccountResponse"}
          }
        }
      }
    };
  }

  rpc GetPocket(GetPocketRequest) returns (GetPocketResponse) {
    option (google.api.http) = {get: "/api/v1/pocket/{pocket_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a pocket"
      tags: ["pocket"]
      operation_id: "GetPocket"
      description:
        "This endpoint returns the pocket if the pocket exists"
        "\n"
        "example: /api/v1/pocket/xxxxxxx"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetPocketResponse"}
          }
        }
      }
    };
  }

  rpc GetSmartGoalsByPocketId(GetSmartGoalsByPocketIdRequest) returns (GetSmartGoalsByPocketIdResponse) {
    option (google.api.http) = {get: "/api/v1/smart-goal/pocket/{pocket_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get smart goals by pocket id"
      tags: ["smart goals"]
      operation_id: "GetSmartGoalsByPocketId"
      description: "This endpoint returns the smart goals if the pocket exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetSmartGoalsByPocketIdResponse"}
          }
        }
      }
    };
  }

  rpc CreateSmartGoal(CreateSmartGoalRequest) returns (CreateSmartGoalResponse) {
    option (google.api.http) = {post: "/api/v1/smart-goal"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a smart goal"
      tags: ["smart goals"]
      operation_id: "CreateSmartGoal"
      description: "This endpoint creates a smart goal"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateSmartGoalResponse"}
          }
        }
      }
    };
  }

  rpc UpdateSmartGoal(UpdateSmartGoalRequest) returns (UpdateSmartGoalResponse) {
    option (google.api.http) = {put: "/api/v1/smart-goal/{smart_goal_id}/pocket/{pocket_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a smart goal"
      tags: ["smart goals"]
      operation_id: "UpdateSmartGoal"
      description: "This endpoint updates a smart goal"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateSmartGoalResponse"}
          }
        }
      }
    };
  }

  rpc DeleteSmartGoal(DeleteSmartGoalRequest) returns (DeleteSmartGoalResponse) {
    option (google.api.http) = {delete: "/api/v1/smart-goal/{smart_goal_id}/pocket/{pocket_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a smart goal"
      tags: ["smart goals"]
      operation_id: "DeleteSmartGoal"
      description: "This endpoint deletes a smart goal"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteSmartGoalResponse"}
          }
        }
      }
    };
  }

  rpc CreateMilestone(CreateMilestoneRequest) returns (CreateMilestoneResponse) {
    option (google.api.http) = {post: "/api/v1/milestone"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a milestone"
      tags: ["milestone"]
      operation_id: "CreateMilestone"
      description: "This endpoint creates a milestone"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateMilestoneResponse"}
          }
        }
      }
    };
  }

  rpc DeleteMilestone(DeleteMilestoneRequest) returns (DeleteMilestoneResponse) {
    option (google.api.http) = {delete: "/api/v1/milestone/{milestone_id}/smart-goal/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a milestone"
      tags: ["milestone"]
      operation_id: "DeleteMilestone"
      description: "This endpoint deletes a milestone"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteMilestoneResponse"}
          }
        }
      }
    };
  }

  rpc UpdateMilestone(UpdateMilestoneRequest) returns (UpdateMilestoneResponse) {
    option (google.api.http) = {put: "/api/v1/milestone/{milestone_id}/smart-goal/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "updates a milestone"
      tags: ["milestone"]
      operation_id: "UpdatesMilestone"
      description: "This endpoint updates a milestone"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateMilestoneResponse"}
          }
        }
      }
    };
  }

  rpc GetMilestone(GetMilestoneRequest) returns (GetMilestoneResponse) {
    option (google.api.http) = {get: "/api/v1/milestone/{milestone_id}/smart-goal/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get milestone by id"
      tags: ["milestone"]
      operation_id: "GetMilestone"
      description: "This endpoint returns the milestone if the milestone exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetMilestoneByIdResponse"}
          }
        }
      }
    };
  }

  rpc GetMilestonesBySmartGoalId(GetMilestonesBySmartGoalIdRequest) returns (GetMilestonesBySmartGoalIdResponse) {
    option (google.api.http) = {get: "/api/v1/milestone/smart-goal/{smart_goal_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get milestones by smart goal id"
      tags: ["milestone"]
      operation_id: "GetMilestones"
      description: "This endpoint returns the milestones if the smart goal exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetMilestonesBySmartGoalIdResponse"}
          }
        }
      }
    };
  }

  rpc GetForecast(GetForecastRequest) returns (GetForecastResponse) {
    option (google.api.http) = {get: "/api/v1/forecast/{forecast_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get forecast by id"
      tags: ["forecast"]
      operation_id: "GetForecast"
      description: "This endpoint returns the forecast if the forecast exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetForecastResponse"}
          }
        }
      }
    };
  }

  rpc CreateBudget(CreateBudgetRequest) returns (CreateBudgetResponse) {
    option (google.api.http) = {post: "/api/v1/budget"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a budget"
      tags: ["budget"]
      operation_id: "CreateBudget"
      description: "This endpoint creates a budget"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.CreateBudgetResponse"}
          }
        }
      }
    };
  }

  rpc UpdateBudget(UpdateBudgetRequest) returns (UpdateBudgetResponse) {
    option (google.api.http) = {put: "/api/v1/budget/{budget_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "updates a budget"
      tags: ["budget"]
      operation_id: "UpdatesBudget"
      description: "This endpoint updates a budget"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.UpdateBudgetResponse"}
          }
        }
      }
    };
  }

  rpc DeleteBudget(DeleteBudgetRequest) returns (DeleteBudgetResponse) {
    option (google.api.http) = {delete: "/api/v1/budget/{budget_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a budget"
      tags: ["budget"]
      operation_id: "DeleteBudget"
      description: "This endpoint deletes a budget"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.DeleteBudgetResponse"}
          }
        }
      }
    };
  }

  rpc GetBudget(GetBudgetRequest) returns (GetBudgetResponse) {
    option (google.api.http) = {get: "/api/v1/budget/{budget_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get budget by id"
      tags: ["budget"]
      operation_id: "GetBudget"
      description: "This endpoint returns the budget if the budget exists"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetBudgetResponse"}
          }
        }
      }
    };
  }

  rpc GetAllBudgets(GetAllBudgetsRequest) returns (GetAllBudgetsResponse) {
    option (google.api.http) = {get: "/api/v1/budget"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get all budgets"
      tags: ["budget"]
      operation_id: "GetAllBudgets"
      description: "This endpoint returns all budgets"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.GetAllBudgetsResponse"}
          }
        }
      }
    };
  }

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {get: "/api/v1/health"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "health check"
      tags: ["service health"]
      operation_id: "HealthCheck"
      description: "This endpoint performs a healc check on the service"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.HealthCheckResponse"}
          }
        }
      }
    };
  }

  rpc ReadynessCheck(ReadynessCheckRequest) returns (ReadynessCheckResponse) {
    option (google.api.http) = {get: "/api/v1/ready"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "readyness check"
      tags: ["service readyness"]
      operation_id: "ReadynessCheck"
      description: "This endpoint performs a readiness check on the service"
      responses: {
        key: "200"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {ref: ".api.v1.ReadynessCheckResponse"}
          }
        }
      }
    };
  }
}
