// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinancialServiceClient is the client API for FinancialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancialServiceClient interface {
	PlaidInitiateTokenExchange(ctx context.Context, in *PlaidInitiateTokenExchangeRequest, opts ...grpc.CallOption) (*PlaidInitiateTokenExchangeResponse, error)
	PlaidExchangeToken(ctx context.Context, in *PlaidExchangeTokenRequest, opts ...grpc.CallOption) (*PlaidExchangeTokenResponse, error)
	CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error)
	GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error)
	UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error)
	DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error)
	GetPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*GetPocketResponse, error)
	GetSmartGoalsByPocketId(ctx context.Context, in *GetSmartGoalsByPocketIdRequest, opts ...grpc.CallOption) (*GetSmartGoalsByPocketIdResponse, error)
	CreateSmartGoal(ctx context.Context, in *CreateSmartGoalRequest, opts ...grpc.CallOption) (*CreateSmartGoalResponse, error)
	UpdateSmartGoal(ctx context.Context, in *UpdateSmartGoalRequest, opts ...grpc.CallOption) (*UpdateSmartGoalResponse, error)
	DeleteSmartGoal(ctx context.Context, in *DeleteSmartGoalRequest, opts ...grpc.CallOption) (*DeleteSmartGoalResponse, error)
	CreateMilestone(ctx context.Context, in *CreateMilestoneRequest, opts ...grpc.CallOption) (*CreateMilestoneResponse, error)
	DeleteMilestone(ctx context.Context, in *DeleteMilestoneRequest, opts ...grpc.CallOption) (*DeleteMilestoneResponse, error)
	UpdateMilestone(ctx context.Context, in *UpdateMilestoneRequest, opts ...grpc.CallOption) (*UpdateMilestoneResponse, error)
	GetMilestone(ctx context.Context, in *GetMilestoneRequest, opts ...grpc.CallOption) (*GetMilestoneResponse, error)
	GetMilestonesBySmartGoalId(ctx context.Context, in *GetMilestonesBySmartGoalIdRequest, opts ...grpc.CallOption) (*GetMilestonesBySmartGoalIdResponse, error)
	GetForecast(ctx context.Context, in *GetForecastRequest, opts ...grpc.CallOption) (*GetForecastResponse, error)
	CreateBudget(ctx context.Context, in *CreateBudgetRequest, opts ...grpc.CallOption) (*CreateBudgetResponse, error)
	UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error)
	DeleteBudget(ctx context.Context, in *DeleteBudgetRequest, opts ...grpc.CallOption) (*DeleteBudgetResponse, error)
	GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error)
	GetAllBudgets(ctx context.Context, in *GetAllBudgetsRequest, opts ...grpc.CallOption) (*GetAllBudgetsResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error)
	GetInvestmentAcccount(ctx context.Context, in *GetInvestmentAcccountRequest, opts ...grpc.CallOption) (*GetInvestmentAcccountResponse, error)
	GetMortageAccount(ctx context.Context, in *GetMortageAccountRequest, opts ...grpc.CallOption) (*GetMortageAccountResponse, error)
	GetLiabilityAccount(ctx context.Context, in *GetLiabilityAccountRequest, opts ...grpc.CallOption) (*GetLiabilityAccountResponse, error)
	GetStudentLoanAccount(ctx context.Context, in *GetStudentLoanAccountRequest, opts ...grpc.CallOption) (*GetStudentLoanAccountResponse, error)
}

type financialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialServiceClient(cc grpc.ClientConnInterface) FinancialServiceClient {
	return &financialServiceClient{cc}
}

func (c *financialServiceClient) PlaidInitiateTokenExchange(ctx context.Context, in *PlaidInitiateTokenExchangeRequest, opts ...grpc.CallOption) (*PlaidInitiateTokenExchangeResponse, error) {
	out := new(PlaidInitiateTokenExchangeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/PlaidInitiateTokenExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) PlaidExchangeToken(ctx context.Context, in *PlaidExchangeTokenRequest, opts ...grpc.CallOption) (*PlaidExchangeTokenResponse, error) {
	out := new(PlaidExchangeTokenResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/PlaidExchangeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateUserProfile(ctx context.Context, in *CreateUserProfileRequest, opts ...grpc.CallOption) (*CreateUserProfileResponse, error) {
	out := new(CreateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/CreateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteUserProfile(ctx context.Context, in *DeleteUserProfileRequest, opts ...grpc.CallOption) (*DeleteUserProfileResponse, error) {
	out := new(DeleteUserProfileResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/DeleteUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error) {
	out := new(CreateBankAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/CreateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error) {
	out := new(GetBankAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error) {
	out := new(UpdateBankAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/UpdateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error) {
	out := new(DeleteBankAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/DeleteBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetPocket(ctx context.Context, in *GetPocketRequest, opts ...grpc.CallOption) (*GetPocketResponse, error) {
	out := new(GetPocketResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetPocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetSmartGoalsByPocketId(ctx context.Context, in *GetSmartGoalsByPocketIdRequest, opts ...grpc.CallOption) (*GetSmartGoalsByPocketIdResponse, error) {
	out := new(GetSmartGoalsByPocketIdResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetSmartGoalsByPocketId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateSmartGoal(ctx context.Context, in *CreateSmartGoalRequest, opts ...grpc.CallOption) (*CreateSmartGoalResponse, error) {
	out := new(CreateSmartGoalResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/CreateSmartGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateSmartGoal(ctx context.Context, in *UpdateSmartGoalRequest, opts ...grpc.CallOption) (*UpdateSmartGoalResponse, error) {
	out := new(UpdateSmartGoalResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/UpdateSmartGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteSmartGoal(ctx context.Context, in *DeleteSmartGoalRequest, opts ...grpc.CallOption) (*DeleteSmartGoalResponse, error) {
	out := new(DeleteSmartGoalResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/DeleteSmartGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateMilestone(ctx context.Context, in *CreateMilestoneRequest, opts ...grpc.CallOption) (*CreateMilestoneResponse, error) {
	out := new(CreateMilestoneResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/CreateMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteMilestone(ctx context.Context, in *DeleteMilestoneRequest, opts ...grpc.CallOption) (*DeleteMilestoneResponse, error) {
	out := new(DeleteMilestoneResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/DeleteMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateMilestone(ctx context.Context, in *UpdateMilestoneRequest, opts ...grpc.CallOption) (*UpdateMilestoneResponse, error) {
	out := new(UpdateMilestoneResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/UpdateMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMilestone(ctx context.Context, in *GetMilestoneRequest, opts ...grpc.CallOption) (*GetMilestoneResponse, error) {
	out := new(GetMilestoneResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMilestonesBySmartGoalId(ctx context.Context, in *GetMilestonesBySmartGoalIdRequest, opts ...grpc.CallOption) (*GetMilestonesBySmartGoalIdResponse, error) {
	out := new(GetMilestonesBySmartGoalIdResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetMilestonesBySmartGoalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetForecast(ctx context.Context, in *GetForecastRequest, opts ...grpc.CallOption) (*GetForecastResponse, error) {
	out := new(GetForecastResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateBudget(ctx context.Context, in *CreateBudgetRequest, opts ...grpc.CallOption) (*CreateBudgetResponse, error) {
	out := new(CreateBudgetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/CreateBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error) {
	out := new(UpdateBudgetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/UpdateBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) DeleteBudget(ctx context.Context, in *DeleteBudgetRequest, opts ...grpc.CallOption) (*DeleteBudgetResponse, error) {
	out := new(DeleteBudgetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/DeleteBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error) {
	out := new(GetBudgetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetAllBudgets(ctx context.Context, in *GetAllBudgetsRequest, opts ...grpc.CallOption) (*GetAllBudgetsResponse, error) {
	out := new(GetAllBudgetsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetAllBudgets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ReadynessCheck(ctx context.Context, in *ReadynessCheckRequest, opts ...grpc.CallOption) (*ReadynessCheckResponse, error) {
	out := new(ReadynessCheckResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/ReadynessCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetInvestmentAcccount(ctx context.Context, in *GetInvestmentAcccountRequest, opts ...grpc.CallOption) (*GetInvestmentAcccountResponse, error) {
	out := new(GetInvestmentAcccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetInvestmentAcccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetMortageAccount(ctx context.Context, in *GetMortageAccountRequest, opts ...grpc.CallOption) (*GetMortageAccountResponse, error) {
	out := new(GetMortageAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetMortageAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetLiabilityAccount(ctx context.Context, in *GetLiabilityAccountRequest, opts ...grpc.CallOption) (*GetLiabilityAccountResponse, error) {
	out := new(GetLiabilityAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetLiabilityAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetStudentLoanAccount(ctx context.Context, in *GetStudentLoanAccountRequest, opts ...grpc.CallOption) (*GetStudentLoanAccountResponse, error) {
	out := new(GetStudentLoanAccountResponse)
	err := c.cc.Invoke(ctx, "/api.v1.FinancialService/GetStudentLoanAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialServiceServer is the server API for FinancialService service.
// All implementations must embed UnimplementedFinancialServiceServer
// for forward compatibility
type FinancialServiceServer interface {
	PlaidInitiateTokenExchange(context.Context, *PlaidInitiateTokenExchangeRequest) (*PlaidInitiateTokenExchangeResponse, error)
	PlaidExchangeToken(context.Context, *PlaidExchangeTokenRequest) (*PlaidExchangeTokenResponse, error)
	CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error)
	GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error)
	UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error)
	DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error)
	GetPocket(context.Context, *GetPocketRequest) (*GetPocketResponse, error)
	GetSmartGoalsByPocketId(context.Context, *GetSmartGoalsByPocketIdRequest) (*GetSmartGoalsByPocketIdResponse, error)
	CreateSmartGoal(context.Context, *CreateSmartGoalRequest) (*CreateSmartGoalResponse, error)
	UpdateSmartGoal(context.Context, *UpdateSmartGoalRequest) (*UpdateSmartGoalResponse, error)
	DeleteSmartGoal(context.Context, *DeleteSmartGoalRequest) (*DeleteSmartGoalResponse, error)
	CreateMilestone(context.Context, *CreateMilestoneRequest) (*CreateMilestoneResponse, error)
	DeleteMilestone(context.Context, *DeleteMilestoneRequest) (*DeleteMilestoneResponse, error)
	UpdateMilestone(context.Context, *UpdateMilestoneRequest) (*UpdateMilestoneResponse, error)
	GetMilestone(context.Context, *GetMilestoneRequest) (*GetMilestoneResponse, error)
	GetMilestonesBySmartGoalId(context.Context, *GetMilestonesBySmartGoalIdRequest) (*GetMilestonesBySmartGoalIdResponse, error)
	GetForecast(context.Context, *GetForecastRequest) (*GetForecastResponse, error)
	CreateBudget(context.Context, *CreateBudgetRequest) (*CreateBudgetResponse, error)
	UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error)
	DeleteBudget(context.Context, *DeleteBudgetRequest) (*DeleteBudgetResponse, error)
	GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error)
	GetAllBudgets(context.Context, *GetAllBudgetsRequest) (*GetAllBudgetsResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error)
	GetInvestmentAcccount(context.Context, *GetInvestmentAcccountRequest) (*GetInvestmentAcccountResponse, error)
	GetMortageAccount(context.Context, *GetMortageAccountRequest) (*GetMortageAccountResponse, error)
	GetLiabilityAccount(context.Context, *GetLiabilityAccountRequest) (*GetLiabilityAccountResponse, error)
	GetStudentLoanAccount(context.Context, *GetStudentLoanAccountRequest) (*GetStudentLoanAccountResponse, error)
	mustEmbedUnimplementedFinancialServiceServer()
}

// UnimplementedFinancialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinancialServiceServer struct {
}

func (UnimplementedFinancialServiceServer) PlaidInitiateTokenExchange(context.Context, *PlaidInitiateTokenExchangeRequest) (*PlaidInitiateTokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaidInitiateTokenExchange not implemented")
}
func (UnimplementedFinancialServiceServer) PlaidExchangeToken(context.Context, *PlaidExchangeTokenRequest) (*PlaidExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaidExchangeToken not implemented")
}
func (UnimplementedFinancialServiceServer) CreateUserProfile(context.Context, *CreateUserProfileRequest) (*CreateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteUserProfile(context.Context, *DeleteUserProfileRequest) (*DeleteUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedFinancialServiceServer) CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetPocket(context.Context, *GetPocketRequest) (*GetPocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPocket not implemented")
}
func (UnimplementedFinancialServiceServer) GetSmartGoalsByPocketId(context.Context, *GetSmartGoalsByPocketIdRequest) (*GetSmartGoalsByPocketIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmartGoalsByPocketId not implemented")
}
func (UnimplementedFinancialServiceServer) CreateSmartGoal(context.Context, *CreateSmartGoalRequest) (*CreateSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateSmartGoal(context.Context, *UpdateSmartGoalRequest) (*UpdateSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteSmartGoal(context.Context, *DeleteSmartGoalRequest) (*DeleteSmartGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmartGoal not implemented")
}
func (UnimplementedFinancialServiceServer) CreateMilestone(context.Context, *CreateMilestoneRequest) (*CreateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteMilestone(context.Context, *DeleteMilestoneRequest) (*DeleteMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateMilestone(context.Context, *UpdateMilestoneRequest) (*UpdateMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) GetMilestone(context.Context, *GetMilestoneRequest) (*GetMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestone not implemented")
}
func (UnimplementedFinancialServiceServer) GetMilestonesBySmartGoalId(context.Context, *GetMilestonesBySmartGoalIdRequest) (*GetMilestonesBySmartGoalIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestonesBySmartGoalId not implemented")
}
func (UnimplementedFinancialServiceServer) GetForecast(context.Context, *GetForecastRequest) (*GetForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}
func (UnimplementedFinancialServiceServer) CreateBudget(context.Context, *CreateBudgetRequest) (*CreateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBudget not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudget not implemented")
}
func (UnimplementedFinancialServiceServer) DeleteBudget(context.Context, *DeleteBudgetRequest) (*DeleteBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudget not implemented")
}
func (UnimplementedFinancialServiceServer) GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudget not implemented")
}
func (UnimplementedFinancialServiceServer) GetAllBudgets(context.Context, *GetAllBudgetsRequest) (*GetAllBudgetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBudgets not implemented")
}
func (UnimplementedFinancialServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFinancialServiceServer) ReadynessCheck(context.Context, *ReadynessCheckRequest) (*ReadynessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadynessCheck not implemented")
}
func (UnimplementedFinancialServiceServer) GetInvestmentAcccount(context.Context, *GetInvestmentAcccountRequest) (*GetInvestmentAcccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestmentAcccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetMortageAccount(context.Context, *GetMortageAccountRequest) (*GetMortageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMortageAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetLiabilityAccount(context.Context, *GetLiabilityAccountRequest) (*GetLiabilityAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiabilityAccount not implemented")
}
func (UnimplementedFinancialServiceServer) GetStudentLoanAccount(context.Context, *GetStudentLoanAccountRequest) (*GetStudentLoanAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentLoanAccount not implemented")
}
func (UnimplementedFinancialServiceServer) mustEmbedUnimplementedFinancialServiceServer() {}

// UnsafeFinancialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialServiceServer will
// result in compilation errors.
type UnsafeFinancialServiceServer interface {
	mustEmbedUnimplementedFinancialServiceServer()
}

func RegisterFinancialServiceServer(s grpc.ServiceRegistrar, srv FinancialServiceServer) {
	s.RegisterService(&FinancialService_ServiceDesc, srv)
}

func _FinancialService_PlaidInitiateTokenExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaidInitiateTokenExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).PlaidInitiateTokenExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/PlaidInitiateTokenExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).PlaidInitiateTokenExchange(ctx, req.(*PlaidInitiateTokenExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_PlaidExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaidExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).PlaidExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/PlaidExchangeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).PlaidExchangeToken(ctx, req.(*PlaidExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/CreateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateUserProfile(ctx, req.(*CreateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/DeleteUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteUserProfile(ctx, req.(*DeleteUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/CreateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateBankAccount(ctx, req.(*CreateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetBankAccount(ctx, req.(*GetBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/UpdateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateBankAccount(ctx, req.(*UpdateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/DeleteBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteBankAccount(ctx, req.(*DeleteBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetPocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetPocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetPocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetPocket(ctx, req.(*GetPocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetSmartGoalsByPocketId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmartGoalsByPocketIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetSmartGoalsByPocketId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetSmartGoalsByPocketId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetSmartGoalsByPocketId(ctx, req.(*GetSmartGoalsByPocketIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/CreateSmartGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateSmartGoal(ctx, req.(*CreateSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/UpdateSmartGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateSmartGoal(ctx, req.(*UpdateSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteSmartGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmartGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteSmartGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/DeleteSmartGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteSmartGoal(ctx, req.(*DeleteSmartGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/CreateMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateMilestone(ctx, req.(*CreateMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/DeleteMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteMilestone(ctx, req.(*DeleteMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/UpdateMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateMilestone(ctx, req.(*UpdateMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMilestone(ctx, req.(*GetMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMilestonesBySmartGoalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestonesBySmartGoalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMilestonesBySmartGoalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetMilestonesBySmartGoalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMilestonesBySmartGoalId(ctx, req.(*GetMilestonesBySmartGoalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetForecast(ctx, req.(*GetForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/CreateBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateBudget(ctx, req.(*CreateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/UpdateBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateBudget(ctx, req.(*UpdateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_DeleteBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).DeleteBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/DeleteBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).DeleteBudget(ctx, req.(*DeleteBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetBudget(ctx, req.(*GetBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetAllBudgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBudgetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetAllBudgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetAllBudgets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetAllBudgets(ctx, req.(*GetAllBudgetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ReadynessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadynessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ReadynessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/ReadynessCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ReadynessCheck(ctx, req.(*ReadynessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetInvestmentAcccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestmentAcccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetInvestmentAcccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetInvestmentAcccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetInvestmentAcccount(ctx, req.(*GetInvestmentAcccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetMortageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMortageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetMortageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetMortageAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetMortageAccount(ctx, req.(*GetMortageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetLiabilityAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiabilityAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetLiabilityAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetLiabilityAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetLiabilityAccount(ctx, req.(*GetLiabilityAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetStudentLoanAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentLoanAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetStudentLoanAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.FinancialService/GetStudentLoanAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetStudentLoanAccount(ctx, req.(*GetStudentLoanAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialService_ServiceDesc is the grpc.ServiceDesc for FinancialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.FinancialService",
	HandlerType: (*FinancialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaidInitiateTokenExchange",
			Handler:    _FinancialService_PlaidInitiateTokenExchange_Handler,
		},
		{
			MethodName: "PlaidExchangeToken",
			Handler:    _FinancialService_PlaidExchangeToken_Handler,
		},
		{
			MethodName: "CreateUserProfile",
			Handler:    _FinancialService_CreateUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _FinancialService_GetUserProfile_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _FinancialService_DeleteUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _FinancialService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "CreateBankAccount",
			Handler:    _FinancialService_CreateBankAccount_Handler,
		},
		{
			MethodName: "GetBankAccount",
			Handler:    _FinancialService_GetBankAccount_Handler,
		},
		{
			MethodName: "UpdateBankAccount",
			Handler:    _FinancialService_UpdateBankAccount_Handler,
		},
		{
			MethodName: "DeleteBankAccount",
			Handler:    _FinancialService_DeleteBankAccount_Handler,
		},
		{
			MethodName: "GetPocket",
			Handler:    _FinancialService_GetPocket_Handler,
		},
		{
			MethodName: "GetSmartGoalsByPocketId",
			Handler:    _FinancialService_GetSmartGoalsByPocketId_Handler,
		},
		{
			MethodName: "CreateSmartGoal",
			Handler:    _FinancialService_CreateSmartGoal_Handler,
		},
		{
			MethodName: "UpdateSmartGoal",
			Handler:    _FinancialService_UpdateSmartGoal_Handler,
		},
		{
			MethodName: "DeleteSmartGoal",
			Handler:    _FinancialService_DeleteSmartGoal_Handler,
		},
		{
			MethodName: "CreateMilestone",
			Handler:    _FinancialService_CreateMilestone_Handler,
		},
		{
			MethodName: "DeleteMilestone",
			Handler:    _FinancialService_DeleteMilestone_Handler,
		},
		{
			MethodName: "UpdateMilestone",
			Handler:    _FinancialService_UpdateMilestone_Handler,
		},
		{
			MethodName: "GetMilestone",
			Handler:    _FinancialService_GetMilestone_Handler,
		},
		{
			MethodName: "GetMilestonesBySmartGoalId",
			Handler:    _FinancialService_GetMilestonesBySmartGoalId_Handler,
		},
		{
			MethodName: "GetForecast",
			Handler:    _FinancialService_GetForecast_Handler,
		},
		{
			MethodName: "CreateBudget",
			Handler:    _FinancialService_CreateBudget_Handler,
		},
		{
			MethodName: "UpdateBudget",
			Handler:    _FinancialService_UpdateBudget_Handler,
		},
		{
			MethodName: "DeleteBudget",
			Handler:    _FinancialService_DeleteBudget_Handler,
		},
		{
			MethodName: "GetBudget",
			Handler:    _FinancialService_GetBudget_Handler,
		},
		{
			MethodName: "GetAllBudgets",
			Handler:    _FinancialService_GetAllBudgets_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FinancialService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadynessCheck",
			Handler:    _FinancialService_ReadynessCheck_Handler,
		},
		{
			MethodName: "GetInvestmentAcccount",
			Handler:    _FinancialService_GetInvestmentAcccount_Handler,
		},
		{
			MethodName: "GetMortageAccount",
			Handler:    _FinancialService_GetMortageAccount_Handler,
		},
		{
			MethodName: "GetLiabilityAccount",
			Handler:    _FinancialService_GetLiabilityAccount_Handler,
		},
		{
			MethodName: "GetStudentLoanAccount",
			Handler:    _FinancialService_GetStudentLoanAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}
