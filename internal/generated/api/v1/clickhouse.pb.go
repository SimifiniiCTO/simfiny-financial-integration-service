// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/v1/clickhouse.proto

package apiv1

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReOccuringTransactionsFrequency int32

const (
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED  ReOccuringTransactionsFrequency = 0
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY       ReOccuringTransactionsFrequency = 1
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY     ReOccuringTransactionsFrequency = 2
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY ReOccuringTransactionsFrequency = 3
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY      ReOccuringTransactionsFrequency = 4
	ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY     ReOccuringTransactionsFrequency = 5
)

// Enum value maps for ReOccuringTransactionsFrequency.
var (
	ReOccuringTransactionsFrequency_name = map[int32]string{
		0: "RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED",
		1: "RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY",
		2: "RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY",
		3: "RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY",
		4: "RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY",
		5: "RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY",
	}
	ReOccuringTransactionsFrequency_value = map[string]int32{
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED":  0,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_WEEKLY":       1,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_BIWEEKLY":     2,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_SEMI_MONTHLY": 3,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_MONTHLY":      4,
		"RE_OCCURING_TRANSACTIONS_FREQUENCY_ANNUALLY":     5,
	}
)

func (x ReOccuringTransactionsFrequency) Enum() *ReOccuringTransactionsFrequency {
	p := new(ReOccuringTransactionsFrequency)
	*p = x
	return p
}

func (x ReOccuringTransactionsFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReOccuringTransactionsFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_clickhouse_proto_enumTypes[0].Descriptor()
}

func (ReOccuringTransactionsFrequency) Type() protoreflect.EnumType {
	return &file_api_v1_clickhouse_proto_enumTypes[0]
}

func (x ReOccuringTransactionsFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReOccuringTransactionsFrequency.Descriptor instead.
func (ReOccuringTransactionsFrequency) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{0}
}

type ReOccuringTransactionsStatus int32

const (
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED ReOccuringTransactionsStatus = 0
	// A MATURE recurring stream should have at least 3 transactions and happen
	//
	//	on a regular cadence (For Annual recurring stream, we will mark it MATURE after 2 instances).
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_MATURE ReOccuringTransactionsStatus = 1
	// When a recurring transaction first appears in the transaction history and before it fulfills
	// the requirement of a mature stream, the status will be EARLY_DETECTION.
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION ReOccuringTransactionsStatus = 2
	// A stream that was previously in the EARLY_DETECTION status will move to the TOMBSTONED
	// status when no further transactions were found at the next expected date.
	ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED ReOccuringTransactionsStatus = 3
)

// Enum value maps for ReOccuringTransactionsStatus.
var (
	ReOccuringTransactionsStatus_name = map[int32]string{
		0: "RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED",
		1: "RE_OCCURING_TRANSACTIONS_STATUS_MATURE",
		2: "RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION",
		3: "RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED",
	}
	ReOccuringTransactionsStatus_value = map[string]int32{
		"RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED":     0,
		"RE_OCCURING_TRANSACTIONS_STATUS_MATURE":          1,
		"RE_OCCURING_TRANSACTIONS_STATUS_EARLY_DETECTION": 2,
		"RE_OCCURING_TRANSACTIONS_STATUS_TOMBSTONED":      3,
	}
)

func (x ReOccuringTransactionsStatus) Enum() *ReOccuringTransactionsStatus {
	p := new(ReOccuringTransactionsStatus)
	*p = x
	return p
}

func (x ReOccuringTransactionsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReOccuringTransactionsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_clickhouse_proto_enumTypes[1].Descriptor()
}

func (ReOccuringTransactionsStatus) Type() protoreflect.EnumType {
	return &file_api_v1_clickhouse_proto_enumTypes[1]
}

func (x ReOccuringTransactionsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReOccuringTransactionsStatus.Descriptor instead.
func (ReOccuringTransactionsStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{1}
}

type ReCurringFlow int32

const (
	ReCurringFlow_RE_CURRING_FLOW_UNSPECIFIED ReCurringFlow = 0
	ReCurringFlow_RE_CURRING_FLOW_INFLOW      ReCurringFlow = 1
	ReCurringFlow_RE_CURRING_FLOW_OUTFLOW     ReCurringFlow = 2
)

// Enum value maps for ReCurringFlow.
var (
	ReCurringFlow_name = map[int32]string{
		0: "RE_CURRING_FLOW_UNSPECIFIED",
		1: "RE_CURRING_FLOW_INFLOW",
		2: "RE_CURRING_FLOW_OUTFLOW",
	}
	ReCurringFlow_value = map[string]int32{
		"RE_CURRING_FLOW_UNSPECIFIED": 0,
		"RE_CURRING_FLOW_INFLOW":      1,
		"RE_CURRING_FLOW_OUTFLOW":     2,
	}
)

func (x ReCurringFlow) Enum() *ReCurringFlow {
	p := new(ReCurringFlow)
	*p = x
	return p
}

func (x ReCurringFlow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReCurringFlow) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_clickhouse_proto_enumTypes[2].Descriptor()
}

func (ReCurringFlow) Type() protoreflect.EnumType {
	return &file_api_v1_clickhouse_proto_enumTypes[2]
}

func (x ReCurringFlow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReCurringFlow.Descriptor instead.
func (ReCurringFlow) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{2}
}

type PersonalFinanceCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Primary  string `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	Detailed string `protobuf:"bytes,2,opt,name=detailed,proto3" json:"detailed,omitempty"`
}

func (x *PersonalFinanceCategory) Reset() {
	*x = PersonalFinanceCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalFinanceCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalFinanceCategory) ProtoMessage() {}

func (x *PersonalFinanceCategory) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalFinanceCategory.ProtoReflect.Descriptor instead.
func (*PersonalFinanceCategory) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{0}
}

func (x *PersonalFinanceCategory) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *PersonalFinanceCategory) GetDetailed() string {
	if x != nil {
		return x.Detailed
	}
	return ""
}

type ReOccuringTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: clickhouse:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// @gotag: clickhouse:"stream_id"
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// @gotag: clickhouse:"category"
	Category []string `protobuf:"bytes,3,rep,name=category,proto3" json:"category,omitempty"`
	// @gotag: clickhouse:"category_id"
	CategoryId string `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// @gotag: clickhouse:"description"
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// @gotag: clickhouse:"merchant_name"
	MerchantName string `protobuf:"bytes,6,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	// @gotag: clickhouse:"personal_finance_category_primary"
	PersonalFinanceCategoryPrimary string `protobuf:"bytes,7,opt,name=personal_finance_category_primary,json=personalFinanceCategoryPrimary,proto3" json:"personal_finance_category_primary,omitempty"`
	// @gotag: clickhouse:"personal_finance_category_detailed"
	PersonalFinanceCategoryDetailed string `protobuf:"bytes,8,opt,name=personal_finance_category_detailed,json=personalFinanceCategoryDetailed,proto3" json:"personal_finance_category_detailed,omitempty"`
	// @gotag: clickhouse:"first_date"
	FirstDate string `protobuf:"bytes,9,opt,name=first_date,json=firstDate,proto3" json:"first_date,omitempty"`
	// @gotag: clickhouse:"last_date"
	LastDate string `protobuf:"bytes,10,opt,name=last_date,json=lastDate,proto3" json:"last_date,omitempty"`
	// @gotag: clickhouse:"frequency"
	Frequency ReOccuringTransactionsFrequency `protobuf:"varint,11,opt,name=frequency,proto3,enum=api.v1.ReOccuringTransactionsFrequency" json:"frequency,omitempty"`
	// @gotag: clickhouse:"transaction_ids"
	TransactionIds []string `protobuf:"bytes,12,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
	// @gotag: clickhouse:"average_amount"
	AverageAmount string `protobuf:"bytes,13,opt,name=average_amount,json=averageAmount,proto3" json:"average_amount,omitempty"`
	// @gotag: clickhouse:"average_amount_iso_currency_code"
	AverageAmountIsoCurrencyCode string `protobuf:"bytes,14,opt,name=average_amount_iso_currency_code,json=averageAmountIsoCurrencyCode,proto3" json:"average_amount_iso_currency_code,omitempty"`
	// @gotag: clickhouse:"last_amount"
	LastAmount string `protobuf:"bytes,15,opt,name=last_amount,json=lastAmount,proto3" json:"last_amount,omitempty"`
	// @gotag: clickhouse:"last_amount_iso_currency_code"
	LastAmountIsoCurrencyCode string `protobuf:"bytes,16,opt,name=last_amount_iso_currency_code,json=lastAmountIsoCurrencyCode,proto3" json:"last_amount_iso_currency_code,omitempty"`
	// @gotag: clickhouse:"is_active"
	IsActive bool `protobuf:"varint,17,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// @gotag: clickhouse:"status"
	Status ReOccuringTransactionsStatus `protobuf:"varint,18,opt,name=status,proto3,enum=api.v1.ReOccuringTransactionsStatus" json:"status,omitempty"`
	// @gotag: clickhouse:"updated_time"
	UpdatedTime string `protobuf:"bytes,19,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	// @gotag: clickhouse:"user_id"
	UserId uint64 `protobuf:"varint,20,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// @gotag: clickhouse:"link_id"
	LinkId uint64 `protobuf:"varint,21,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// @gotag: clickhouse:"id"
	Id uint64 `protobuf:"varint,22,opt,name=id,proto3" json:"id,omitempty"`
	// @gotag: clickhouse:"flow"
	Flow ReCurringFlow `protobuf:"varint,23,opt,name=flow,proto3,enum=api.v1.ReCurringFlow" json:"flow,omitempty"`
}

func (x *ReOccuringTransaction) Reset() {
	*x = ReOccuringTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReOccuringTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReOccuringTransaction) ProtoMessage() {}

func (x *ReOccuringTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReOccuringTransaction.ProtoReflect.Descriptor instead.
func (*ReOccuringTransaction) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{1}
}

func (x *ReOccuringTransaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReOccuringTransaction) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ReOccuringTransaction) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ReOccuringTransaction) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *ReOccuringTransaction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReOccuringTransaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *ReOccuringTransaction) GetPersonalFinanceCategoryPrimary() string {
	if x != nil {
		return x.PersonalFinanceCategoryPrimary
	}
	return ""
}

func (x *ReOccuringTransaction) GetPersonalFinanceCategoryDetailed() string {
	if x != nil {
		return x.PersonalFinanceCategoryDetailed
	}
	return ""
}

func (x *ReOccuringTransaction) GetFirstDate() string {
	if x != nil {
		return x.FirstDate
	}
	return ""
}

func (x *ReOccuringTransaction) GetLastDate() string {
	if x != nil {
		return x.LastDate
	}
	return ""
}

func (x *ReOccuringTransaction) GetFrequency() ReOccuringTransactionsFrequency {
	if x != nil {
		return x.Frequency
	}
	return ReOccuringTransactionsFrequency_RE_OCCURING_TRANSACTIONS_FREQUENCY_UNSPECIFIED
}

func (x *ReOccuringTransaction) GetTransactionIds() []string {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

func (x *ReOccuringTransaction) GetAverageAmount() string {
	if x != nil {
		return x.AverageAmount
	}
	return ""
}

func (x *ReOccuringTransaction) GetAverageAmountIsoCurrencyCode() string {
	if x != nil {
		return x.AverageAmountIsoCurrencyCode
	}
	return ""
}

func (x *ReOccuringTransaction) GetLastAmount() string {
	if x != nil {
		return x.LastAmount
	}
	return ""
}

func (x *ReOccuringTransaction) GetLastAmountIsoCurrencyCode() string {
	if x != nil {
		return x.LastAmountIsoCurrencyCode
	}
	return ""
}

func (x *ReOccuringTransaction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ReOccuringTransaction) GetStatus() ReOccuringTransactionsStatus {
	if x != nil {
		return x.Status
	}
	return ReOccuringTransactionsStatus_RE_OCCURING_TRANSACTIONS_STATUS_UNSPECIFIED
}

func (x *ReOccuringTransaction) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *ReOccuringTransaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReOccuringTransaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

func (x *ReOccuringTransaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReOccuringTransaction) GetFlow() ReCurringFlow {
	if x != nil {
		return x.Flow
	}
	return ReCurringFlow_RE_CURRING_FLOW_UNSPECIFIED
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotag: clickhouse:"account_id"
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// @gotag: clickhouse:"amount"
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// @gotag: clickhouse:"iso_currency_code"
	IsoCurrencyCode string `protobuf:"bytes,3,opt,name=iso_currency_code,json=isoCurrencyCode,proto3" json:"iso_currency_code,omitempty"`
	// @gotag: clickhouse:"unofficial_currency_code"
	UnofficialCurrencyCode string `protobuf:"bytes,4,opt,name=unofficial_currency_code,json=unofficialCurrencyCode,proto3" json:"unofficial_currency_code,omitempty"`
	// @gotag: clickhouse:"category"
	Category string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	// @gotag: clickhouse:"category_id"
	CategoryId string `protobuf:"bytes,6,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// @gotag: clickhouse:"check_number"
	CheckNumber string `protobuf:"bytes,7,opt,name=check_number,json=checkNumber,proto3" json:"check_number,omitempty"`
	// @gotag: clickhouse:"date"
	Date string `protobuf:"bytes,8,opt,name=date,proto3" json:"date,omitempty"`
	// @gotag: clickhouse:"datetime"
	Datetime string `protobuf:"bytes,9,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// @gotag: clickhouse:"authorized_date"
	AuthorizedDate string `protobuf:"bytes,10,opt,name=authorized_date,json=authorizedDate,proto3" json:"authorized_date,omitempty"`
	// @gotag: clickhouse:"authorized_datetime"
	AuthorizedDatetime string `protobuf:"bytes,11,opt,name=authorized_datetime,json=authorizedDatetime,proto3" json:"authorized_datetime,omitempty"`
	// @gotag: clickhouse:"location"
	Location *Transaction_Location `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`
	// @gotag: clickhouse:"name"
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// @gotag: clickhouse:"merchant_name"
	MerchantName string `protobuf:"bytes,14,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	// @gotag: clickhouse:"payment_meta"
	PaymentMeta *Transaction_PaymentMeta `protobuf:"bytes,15,opt,name=payment_meta,json=paymentMeta,proto3" json:"payment_meta,omitempty"`
	// @gotag: clickhouse:"payment_channel"
	PaymentChannel string `protobuf:"bytes,16,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`
	// @gotag: clickhouse:"pending"
	Pending bool `protobuf:"varint,17,opt,name=pending,proto3" json:"pending,omitempty"`
	// @gotag: clickhouse:"pending_transaction_id"
	PendingTransactionId string `protobuf:"bytes,18,opt,name=pending_transaction_id,json=pendingTransactionId,proto3" json:"pending_transaction_id,omitempty"`
	// @gotag: clickhouse:"account_owner"
	AccountOwner string `protobuf:"bytes,19,opt,name=account_owner,json=accountOwner,proto3" json:"account_owner,omitempty"`
	// @gotag: clickhouse:"transaction_id"
	TransactionId string `protobuf:"bytes,20,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// @gotag: clickhouse:"transaction_code"
	TransactionCode string `protobuf:"bytes,21,opt,name=transaction_code,json=transactionCode,proto3" json:"transaction_code,omitempty"`
	Id              uint64 `protobuf:"varint,22,opt,name=id,proto3" json:"id,omitempty"`
	// @gotag: clickhouse:"user_id"
	UserId uint64 `protobuf:"varint,23,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// @gotag: clickhouse:"link_id"
	LinkId uint64 `protobuf:"varint,24,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Transaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetIsoCurrencyCode() string {
	if x != nil {
		return x.IsoCurrencyCode
	}
	return ""
}

func (x *Transaction) GetUnofficialCurrencyCode() string {
	if x != nil {
		return x.UnofficialCurrencyCode
	}
	return ""
}

func (x *Transaction) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Transaction) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Transaction) GetCheckNumber() string {
	if x != nil {
		return x.CheckNumber
	}
	return ""
}

func (x *Transaction) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Transaction) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *Transaction) GetAuthorizedDate() string {
	if x != nil {
		return x.AuthorizedDate
	}
	return ""
}

func (x *Transaction) GetAuthorizedDatetime() string {
	if x != nil {
		return x.AuthorizedDatetime
	}
	return ""
}

func (x *Transaction) GetLocation() *Transaction_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Transaction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transaction) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *Transaction) GetPaymentMeta() *Transaction_PaymentMeta {
	if x != nil {
		return x.PaymentMeta
	}
	return nil
}

func (x *Transaction) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *Transaction) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *Transaction) GetPendingTransactionId() string {
	if x != nil {
		return x.PendingTransactionId
	}
	return ""
}

func (x *Transaction) GetAccountOwner() string {
	if x != nil {
		return x.AccountOwner
	}
	return ""
}

func (x *Transaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction) GetTransactionCode() string {
	if x != nil {
		return x.TransactionCode
	}
	return ""
}

func (x *Transaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transaction) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transaction) GetLinkId() uint64 {
	if x != nil {
		return x.LinkId
	}
	return 0
}

type TransactionAmountByCountryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Amount  float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransactionAmountByCountryMetric) Reset() {
	*x = TransactionAmountByCountryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAmountByCountryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAmountByCountryMetric) ProtoMessage() {}

func (x *TransactionAmountByCountryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAmountByCountryMetric.ProtoReflect.Descriptor instead.
func (*TransactionAmountByCountryMetric) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionAmountByCountryMetric) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *TransactionAmountByCountryMetric) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type AverageTransactionAmountByCategoryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string  `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Amount   float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AverageTransactionAmountByCategoryMetric) Reset() {
	*x = AverageTransactionAmountByCategoryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AverageTransactionAmountByCategoryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AverageTransactionAmountByCategoryMetric) ProtoMessage() {}

func (x *AverageTransactionAmountByCategoryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AverageTransactionAmountByCategoryMetric.ProtoReflect.Descriptor instead.
func (*AverageTransactionAmountByCategoryMetric) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{4}
}

func (x *AverageTransactionAmountByCategoryMetric) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AverageTransactionAmountByCategoryMetric) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type MonthlyTransactionCountByCategoryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Count    uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Month    string `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *MonthlyTransactionCountByCategoryMetric) Reset() {
	*x = MonthlyTransactionCountByCategoryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyTransactionCountByCategoryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyTransactionCountByCategoryMetric) ProtoMessage() {}

func (x *MonthlyTransactionCountByCategoryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyTransactionCountByCategoryMetric.ProtoReflect.Descriptor instead.
func (*MonthlyTransactionCountByCategoryMetric) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{5}
}

func (x *MonthlyTransactionCountByCategoryMetric) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MonthlyTransactionCountByCategoryMetric) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MonthlyTransactionCountByCategoryMetric) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

type TransactionCountByMerchantPaymentChannelMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantName     string `protobuf:"bytes,1,opt,name=merchant_name,json=merchantName,proto3" json:"merchant_name,omitempty"`
	PaymentChannel   string `protobuf:"bytes,2,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`
	TransactionCount uint32 `protobuf:"varint,3,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
}

func (x *TransactionCountByMerchantPaymentChannelMetric) Reset() {
	*x = TransactionCountByMerchantPaymentChannelMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionCountByMerchantPaymentChannelMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionCountByMerchantPaymentChannelMetric) ProtoMessage() {}

func (x *TransactionCountByMerchantPaymentChannelMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionCountByMerchantPaymentChannelMetric.ProtoReflect.Descriptor instead.
func (*TransactionCountByMerchantPaymentChannelMetric) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionCountByMerchantPaymentChannelMetric) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *TransactionCountByMerchantPaymentChannelMetric) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *TransactionCountByMerchantPaymentChannelMetric) GetTransactionCount() uint32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

type TransactionAmountDistributionByCategoryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category          string  `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Mean              float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty"`
	Median            float64 `protobuf:"fixed64,3,opt,name=median,proto3" json:"median,omitempty"`
	StandardDeviation float64 `protobuf:"fixed64,4,opt,name=standard_deviation,json=standardDeviation,proto3" json:"standard_deviation,omitempty"`
}

func (x *TransactionAmountDistributionByCategoryMetric) Reset() {
	*x = TransactionAmountDistributionByCategoryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAmountDistributionByCategoryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAmountDistributionByCategoryMetric) ProtoMessage() {}

func (x *TransactionAmountDistributionByCategoryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAmountDistributionByCategoryMetric.ProtoReflect.Descriptor instead.
func (*TransactionAmountDistributionByCategoryMetric) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionAmountDistributionByCategoryMetric) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *TransactionAmountDistributionByCategoryMetric) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *TransactionAmountDistributionByCategoryMetric) GetMedian() float64 {
	if x != nil {
		return x.Median
	}
	return 0
}

func (x *TransactionAmountDistributionByCategoryMetric) GetStandardDeviation() float64 {
	if x != nil {
		return x.StandardDeviation
	}
	return 0
}

type Transaction_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	City        string  `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Region      string  `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	PostalCode  string  `protobuf:"bytes,4,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Country     string  `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Lat         float64 `protobuf:"fixed64,6,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon         float64 `protobuf:"fixed64,7,opt,name=lon,proto3" json:"lon,omitempty"`
	StoreNumber string  `protobuf:"bytes,8,opt,name=store_number,json=storeNumber,proto3" json:"store_number,omitempty"`
}

func (x *Transaction_Location) Reset() {
	*x = Transaction_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Location) ProtoMessage() {}

func (x *Transaction_Location) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Location.ProtoReflect.Descriptor instead.
func (*Transaction_Location) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Transaction_Location) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Transaction_Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Transaction_Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Transaction_Location) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Transaction_Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Transaction_Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Transaction_Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Transaction_Location) GetStoreNumber() string {
	if x != nil {
		return x.StoreNumber
	}
	return ""
}

type Transaction_PaymentMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByOrderOf        string `protobuf:"bytes,1,opt,name=by_order_of,json=byOrderOf,proto3" json:"by_order_of,omitempty"`
	Payee            string `protobuf:"bytes,2,opt,name=payee,proto3" json:"payee,omitempty"`
	Payer            string `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	PaymentMethod    string `protobuf:"bytes,4,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	PaymentProcessor string `protobuf:"bytes,5,opt,name=payment_processor,json=paymentProcessor,proto3" json:"payment_processor,omitempty"`
	PpdId            string `protobuf:"bytes,6,opt,name=ppd_id,json=ppdId,proto3" json:"ppd_id,omitempty"`
	Reason           string `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	ReferenceNumber  string `protobuf:"bytes,8,opt,name=reference_number,json=referenceNumber,proto3" json:"reference_number,omitempty"`
}

func (x *Transaction_PaymentMeta) Reset() {
	*x = Transaction_PaymentMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_clickhouse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_PaymentMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_PaymentMeta) ProtoMessage() {}

func (x *Transaction_PaymentMeta) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_clickhouse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_PaymentMeta.ProtoReflect.Descriptor instead.
func (*Transaction_PaymentMeta) Descriptor() ([]byte, []int) {
	return file_api_v1_clickhouse_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Transaction_PaymentMeta) GetByOrderOf() string {
	if x != nil {
		return x.ByOrderOf
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetPayee() string {
	if x != nil {
		return x.Payee
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetPaymentProcessor() string {
	if x != nil {
		return x.PaymentProcessor
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetPpdId() string {
	if x != nil {
		return x.PpdId
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Transaction_PaymentMeta) GetReferenceNumber() string {
	if x != nil {
		return x.ReferenceNumber
	}
	return ""
}

var File_api_v1_clickhouse_proto protoreflect.FileDescriptor

var file_api_v1_clickhouse_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f,
	0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xfd, 0x07, 0x0a, 0x15, 0x52, 0x65, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x49, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x22, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x6f,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x81, 0x0b, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0x92, 0x41, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x00, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a,
	0x92, 0x41, 0x00, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x1a, 0xd2, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x87, 0x02, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x70, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x70, 0x64, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x54, 0x0a, 0x20, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5e, 0x0a, 0x28, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x71, 0x0a, 0x27, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0xab, 0x01, 0x0a, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x2d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xcb, 0x02, 0x0a, 0x1f, 0x52, 0x65,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a,
	0x2e, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x49, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10,
	0x02, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x4e, 0x4e,
	0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x05, 0x2a, 0xe0, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x5f, 0x4f,
	0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x5f,
	0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x52, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45,
	0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f,
	0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0d, 0x52, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x4e, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x55, 0x54, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x42, 0xe8, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x64, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x6d, 0x69, 0x66, 0x69, 0x6e, 0x69, 0x69, 0x43, 0x54, 0x4f,
	0x2f, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x79, 0x2d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x06, 0x41,
	0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x56, 0x31, 0xd8, 0xe1, 0x1e, 0x00, 0xe0, 0xe1, 0x1e, 0x01, 0xf0, 0xe1, 0x1e, 0x01,
	0xf8, 0xe1, 0x1e, 0x01, 0x80, 0xe2, 0x1e, 0x01, 0xa8, 0xe2, 0x1e, 0x01, 0xb8, 0xe2, 0x1e, 0x01,
	0xc0, 0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xe0, 0xe2, 0x1e, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_clickhouse_proto_rawDescOnce sync.Once
	file_api_v1_clickhouse_proto_rawDescData = file_api_v1_clickhouse_proto_rawDesc
)

func file_api_v1_clickhouse_proto_rawDescGZIP() []byte {
	file_api_v1_clickhouse_proto_rawDescOnce.Do(func() {
		file_api_v1_clickhouse_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_clickhouse_proto_rawDescData)
	})
	return file_api_v1_clickhouse_proto_rawDescData
}

var file_api_v1_clickhouse_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_v1_clickhouse_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_v1_clickhouse_proto_goTypes = []interface{}{
	(ReOccuringTransactionsFrequency)(0),                   // 0: api.v1.ReOccuringTransactionsFrequency
	(ReOccuringTransactionsStatus)(0),                      // 1: api.v1.ReOccuringTransactionsStatus
	(ReCurringFlow)(0),                                     // 2: api.v1.ReCurringFlow
	(*PersonalFinanceCategory)(nil),                        // 3: api.v1.PersonalFinanceCategory
	(*ReOccuringTransaction)(nil),                          // 4: api.v1.ReOccuringTransaction
	(*Transaction)(nil),                                    // 5: api.v1.Transaction
	(*TransactionAmountByCountryMetric)(nil),               // 6: api.v1.TransactionAmountByCountryMetric
	(*AverageTransactionAmountByCategoryMetric)(nil),       // 7: api.v1.AverageTransactionAmountByCategoryMetric
	(*MonthlyTransactionCountByCategoryMetric)(nil),        // 8: api.v1.MonthlyTransactionCountByCategoryMetric
	(*TransactionCountByMerchantPaymentChannelMetric)(nil), // 9: api.v1.TransactionCountByMerchantPaymentChannelMetric
	(*TransactionAmountDistributionByCategoryMetric)(nil),  // 10: api.v1.TransactionAmountDistributionByCategoryMetric
	(*Transaction_Location)(nil),                           // 11: api.v1.Transaction.Location
	(*Transaction_PaymentMeta)(nil),                        // 12: api.v1.Transaction.PaymentMeta
}
var file_api_v1_clickhouse_proto_depIdxs = []int32{
	0,  // 0: api.v1.ReOccuringTransaction.frequency:type_name -> api.v1.ReOccuringTransactionsFrequency
	1,  // 1: api.v1.ReOccuringTransaction.status:type_name -> api.v1.ReOccuringTransactionsStatus
	2,  // 2: api.v1.ReOccuringTransaction.flow:type_name -> api.v1.ReCurringFlow
	11, // 3: api.v1.Transaction.location:type_name -> api.v1.Transaction.Location
	12, // 4: api.v1.Transaction.payment_meta:type_name -> api.v1.Transaction.PaymentMeta
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_api_v1_clickhouse_proto_init() }
func file_api_v1_clickhouse_proto_init() {
	if File_api_v1_clickhouse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_clickhouse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalFinanceCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReOccuringTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAmountByCountryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AverageTransactionAmountByCategoryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyTransactionCountByCategoryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionCountByMerchantPaymentChannelMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAmountDistributionByCategoryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_clickhouse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_PaymentMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_clickhouse_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_clickhouse_proto_goTypes,
		DependencyIndexes: file_api_v1_clickhouse_proto_depIdxs,
		EnumInfos:         file_api_v1_clickhouse_proto_enumTypes,
		MessageInfos:      file_api_v1_clickhouse_proto_msgTypes,
	}.Build()
	File_api_v1_clickhouse_proto = out.File
	file_api_v1_clickhouse_proto_rawDesc = nil
	file_api_v1_clickhouse_proto_goTypes = nil
	file_api_v1_clickhouse_proto_depIdxs = nil
}
