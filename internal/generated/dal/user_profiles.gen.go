// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	apiv1 "github.com/SimifiniiCTO/simfiny-financial-integration-service/internal/generated/api/v1"
)

func newUserProfileORM(db *gorm.DB, opts ...gen.DOOption) userProfileORM {
	_userProfileORM := userProfileORM{}

	_userProfileORM.userProfileORMDo.UseDB(db, opts...)
	_userProfileORM.userProfileORMDo.UseModel(&apiv1.UserProfileORM{})

	tableName := _userProfileORM.userProfileORMDo.TableName()
	_userProfileORM.ALL = field.NewAsterisk(tableName)
	_userProfileORM.Id = field.NewUint64(tableName, "id")
	_userProfileORM.PlaidAccessToken = field.NewString(tableName, "plaid_access_token")
	_userProfileORM.StripeCustomerId = field.NewString(tableName, "stripe_customer_id")
	_userProfileORM.UserId = field.NewUint64(tableName, "user_id")
	_userProfileORM.BankAccounts = userProfileORMHasManyBankAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BankAccounts", "apiv1.BankAccountORM"),
		Pockets: struct {
			field.RelationField
			Goals struct {
				field.RelationField
				Forecasts struct {
					field.RelationField
				}
				Milestones struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}
			}
		}{
			RelationField: field.NewRelation("BankAccounts.Pockets", "apiv1.PocketORM"),
			Goals: struct {
				field.RelationField
				Forecasts struct {
					field.RelationField
				}
				Milestones struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("BankAccounts.Pockets.Goals", "apiv1.SmartGoalORM"),
				Forecasts: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Forecasts", "apiv1.ForecastORM"),
				},
				Milestones: struct {
					field.RelationField
					Budget struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Milestones", "apiv1.MilestoneORM"),
					Budget: struct {
						field.RelationField
						Category struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Milestones.Budget", "apiv1.BudgetORM"),
						Category: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("BankAccounts.Pockets.Goals.Milestones.Budget.Category", "apiv1.CategoryORM"),
						},
					},
				},
			},
		},
	}

	_userProfileORM.CreditAccounts = userProfileORMHasManyCreditAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreditAccounts", "apiv1.CreditAccountORM"),
		Aprs: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreditAccounts.Aprs", "apiv1.AprORM"),
		},
	}

	_userProfileORM.InvestmentAccounts = userProfileORMHasManyInvestmentAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("InvestmentAccounts", "apiv1.InvestmentAccountORM"),
		Holdings: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InvestmentAccounts.Holdings", "apiv1.InvesmentHoldingORM"),
		},
		Securities: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("InvestmentAccounts.Securities", "apiv1.InvestmentSecurityORM"),
		},
	}

	_userProfileORM.MortgageAccounts = userProfileORMHasManyMortgageAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MortgageAccounts", "apiv1.MortgageAccountORM"),
	}

	_userProfileORM.StudentLoanAccounts = userProfileORMHasManyStudentLoanAccounts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("StudentLoanAccounts", "apiv1.StudentLoanAccountORM"),
	}

	_userProfileORM.fillFieldMap()

	return _userProfileORM
}

type userProfileORM struct {
	userProfileORMDo

	ALL              field.Asterisk
	Id               field.Uint64
	PlaidAccessToken field.String
	StripeCustomerId field.String
	UserId           field.Uint64
	BankAccounts     userProfileORMHasManyBankAccounts

	CreditAccounts userProfileORMHasManyCreditAccounts

	InvestmentAccounts userProfileORMHasManyInvestmentAccounts

	MortgageAccounts userProfileORMHasManyMortgageAccounts

	StudentLoanAccounts userProfileORMHasManyStudentLoanAccounts

	fieldMap map[string]field.Expr
}

func (u userProfileORM) Table(newTableName string) *userProfileORM {
	u.userProfileORMDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userProfileORM) As(alias string) *userProfileORM {
	u.userProfileORMDo.DO = *(u.userProfileORMDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userProfileORM) updateTableName(table string) *userProfileORM {
	u.ALL = field.NewAsterisk(table)
	u.Id = field.NewUint64(table, "id")
	u.PlaidAccessToken = field.NewString(table, "plaid_access_token")
	u.StripeCustomerId = field.NewString(table, "stripe_customer_id")
	u.UserId = field.NewUint64(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userProfileORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userProfileORM) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.Id
	u.fieldMap["plaid_access_token"] = u.PlaidAccessToken
	u.fieldMap["stripe_customer_id"] = u.StripeCustomerId
	u.fieldMap["user_id"] = u.UserId

}

func (u userProfileORM) clone(db *gorm.DB) userProfileORM {
	u.userProfileORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userProfileORM) replaceDB(db *gorm.DB) userProfileORM {
	u.userProfileORMDo.ReplaceDB(db)
	return u
}

type userProfileORMHasManyBankAccounts struct {
	db *gorm.DB

	field.RelationField

	Pockets struct {
		field.RelationField
		Goals struct {
			field.RelationField
			Forecasts struct {
				field.RelationField
			}
			Milestones struct {
				field.RelationField
				Budget struct {
					field.RelationField
					Category struct {
						field.RelationField
					}
				}
			}
		}
	}
}

func (a userProfileORMHasManyBankAccounts) Where(conds ...field.Expr) *userProfileORMHasManyBankAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userProfileORMHasManyBankAccounts) WithContext(ctx context.Context) *userProfileORMHasManyBankAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userProfileORMHasManyBankAccounts) Model(m *apiv1.UserProfileORM) *userProfileORMHasManyBankAccountsTx {
	return &userProfileORMHasManyBankAccountsTx{a.db.Model(m).Association(a.Name())}
}

type userProfileORMHasManyBankAccountsTx struct{ tx *gorm.Association }

func (a userProfileORMHasManyBankAccountsTx) Find() (result []*apiv1.BankAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a userProfileORMHasManyBankAccountsTx) Append(values ...*apiv1.BankAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userProfileORMHasManyBankAccountsTx) Replace(values ...*apiv1.BankAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userProfileORMHasManyBankAccountsTx) Delete(values ...*apiv1.BankAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userProfileORMHasManyBankAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a userProfileORMHasManyBankAccountsTx) Count() int64 {
	return a.tx.Count()
}

type userProfileORMHasManyCreditAccounts struct {
	db *gorm.DB

	field.RelationField

	Aprs struct {
		field.RelationField
	}
}

func (a userProfileORMHasManyCreditAccounts) Where(conds ...field.Expr) *userProfileORMHasManyCreditAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userProfileORMHasManyCreditAccounts) WithContext(ctx context.Context) *userProfileORMHasManyCreditAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userProfileORMHasManyCreditAccounts) Model(m *apiv1.UserProfileORM) *userProfileORMHasManyCreditAccountsTx {
	return &userProfileORMHasManyCreditAccountsTx{a.db.Model(m).Association(a.Name())}
}

type userProfileORMHasManyCreditAccountsTx struct{ tx *gorm.Association }

func (a userProfileORMHasManyCreditAccountsTx) Find() (result []*apiv1.CreditAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a userProfileORMHasManyCreditAccountsTx) Append(values ...*apiv1.CreditAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userProfileORMHasManyCreditAccountsTx) Replace(values ...*apiv1.CreditAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userProfileORMHasManyCreditAccountsTx) Delete(values ...*apiv1.CreditAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userProfileORMHasManyCreditAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a userProfileORMHasManyCreditAccountsTx) Count() int64 {
	return a.tx.Count()
}

type userProfileORMHasManyInvestmentAccounts struct {
	db *gorm.DB

	field.RelationField

	Holdings struct {
		field.RelationField
	}
	Securities struct {
		field.RelationField
	}
}

func (a userProfileORMHasManyInvestmentAccounts) Where(conds ...field.Expr) *userProfileORMHasManyInvestmentAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userProfileORMHasManyInvestmentAccounts) WithContext(ctx context.Context) *userProfileORMHasManyInvestmentAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userProfileORMHasManyInvestmentAccounts) Model(m *apiv1.UserProfileORM) *userProfileORMHasManyInvestmentAccountsTx {
	return &userProfileORMHasManyInvestmentAccountsTx{a.db.Model(m).Association(a.Name())}
}

type userProfileORMHasManyInvestmentAccountsTx struct{ tx *gorm.Association }

func (a userProfileORMHasManyInvestmentAccountsTx) Find() (result []*apiv1.InvestmentAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a userProfileORMHasManyInvestmentAccountsTx) Append(values ...*apiv1.InvestmentAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userProfileORMHasManyInvestmentAccountsTx) Replace(values ...*apiv1.InvestmentAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userProfileORMHasManyInvestmentAccountsTx) Delete(values ...*apiv1.InvestmentAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userProfileORMHasManyInvestmentAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a userProfileORMHasManyInvestmentAccountsTx) Count() int64 {
	return a.tx.Count()
}

type userProfileORMHasManyMortgageAccounts struct {
	db *gorm.DB

	field.RelationField
}

func (a userProfileORMHasManyMortgageAccounts) Where(conds ...field.Expr) *userProfileORMHasManyMortgageAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userProfileORMHasManyMortgageAccounts) WithContext(ctx context.Context) *userProfileORMHasManyMortgageAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userProfileORMHasManyMortgageAccounts) Model(m *apiv1.UserProfileORM) *userProfileORMHasManyMortgageAccountsTx {
	return &userProfileORMHasManyMortgageAccountsTx{a.db.Model(m).Association(a.Name())}
}

type userProfileORMHasManyMortgageAccountsTx struct{ tx *gorm.Association }

func (a userProfileORMHasManyMortgageAccountsTx) Find() (result []*apiv1.MortgageAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a userProfileORMHasManyMortgageAccountsTx) Append(values ...*apiv1.MortgageAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userProfileORMHasManyMortgageAccountsTx) Replace(values ...*apiv1.MortgageAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userProfileORMHasManyMortgageAccountsTx) Delete(values ...*apiv1.MortgageAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userProfileORMHasManyMortgageAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a userProfileORMHasManyMortgageAccountsTx) Count() int64 {
	return a.tx.Count()
}

type userProfileORMHasManyStudentLoanAccounts struct {
	db *gorm.DB

	field.RelationField
}

func (a userProfileORMHasManyStudentLoanAccounts) Where(conds ...field.Expr) *userProfileORMHasManyStudentLoanAccounts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userProfileORMHasManyStudentLoanAccounts) WithContext(ctx context.Context) *userProfileORMHasManyStudentLoanAccounts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userProfileORMHasManyStudentLoanAccounts) Model(m *apiv1.UserProfileORM) *userProfileORMHasManyStudentLoanAccountsTx {
	return &userProfileORMHasManyStudentLoanAccountsTx{a.db.Model(m).Association(a.Name())}
}

type userProfileORMHasManyStudentLoanAccountsTx struct{ tx *gorm.Association }

func (a userProfileORMHasManyStudentLoanAccountsTx) Find() (result []*apiv1.StudentLoanAccountORM, err error) {
	return result, a.tx.Find(&result)
}

func (a userProfileORMHasManyStudentLoanAccountsTx) Append(values ...*apiv1.StudentLoanAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userProfileORMHasManyStudentLoanAccountsTx) Replace(values ...*apiv1.StudentLoanAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userProfileORMHasManyStudentLoanAccountsTx) Delete(values ...*apiv1.StudentLoanAccountORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userProfileORMHasManyStudentLoanAccountsTx) Clear() error {
	return a.tx.Clear()
}

func (a userProfileORMHasManyStudentLoanAccountsTx) Count() int64 {
	return a.tx.Count()
}

type userProfileORMDo struct{ gen.DO }

type IUserProfileORMDo interface {
	gen.SubQuery
	Debug() IUserProfileORMDo
	WithContext(ctx context.Context) IUserProfileORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserProfileORMDo
	WriteDB() IUserProfileORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserProfileORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserProfileORMDo
	Not(conds ...gen.Condition) IUserProfileORMDo
	Or(conds ...gen.Condition) IUserProfileORMDo
	Select(conds ...field.Expr) IUserProfileORMDo
	Where(conds ...gen.Condition) IUserProfileORMDo
	Order(conds ...field.Expr) IUserProfileORMDo
	Distinct(cols ...field.Expr) IUserProfileORMDo
	Omit(cols ...field.Expr) IUserProfileORMDo
	Join(table schema.Tabler, on ...field.Expr) IUserProfileORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserProfileORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserProfileORMDo
	Group(cols ...field.Expr) IUserProfileORMDo
	Having(conds ...gen.Condition) IUserProfileORMDo
	Limit(limit int) IUserProfileORMDo
	Offset(offset int) IUserProfileORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProfileORMDo
	Unscoped() IUserProfileORMDo
	Create(values ...*apiv1.UserProfileORM) error
	CreateInBatches(values []*apiv1.UserProfileORM, batchSize int) error
	Save(values ...*apiv1.UserProfileORM) error
	First() (*apiv1.UserProfileORM, error)
	Take() (*apiv1.UserProfileORM, error)
	Last() (*apiv1.UserProfileORM, error)
	Find() ([]*apiv1.UserProfileORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*apiv1.UserProfileORM, err error)
	FindInBatches(result *[]*apiv1.UserProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*apiv1.UserProfileORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserProfileORMDo
	Assign(attrs ...field.AssignExpr) IUserProfileORMDo
	Joins(fields ...field.RelationField) IUserProfileORMDo
	Preload(fields ...field.RelationField) IUserProfileORMDo
	FirstOrInit() (*apiv1.UserProfileORM, error)
	FirstOrCreate() (*apiv1.UserProfileORM, error)
	FindByPage(offset int, limit int) (result []*apiv1.UserProfileORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserProfileORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByUserID(user_id int) (result apiv1.UserProfileORM, err error)
	GetByID(id int) (result apiv1.UserProfileORM, err error)
	GetByIDs(ids []int) (result []apiv1.UserProfileORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	user_id=@user_id
//
// {{end}}
func (u userProfileORMDo) GetByUserID(user_id int) (result apiv1.UserProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, user_id)
	whereSQL0.WriteString("user_id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (u userProfileORMDo) GetByID(id int) (result apiv1.UserProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (u userProfileORMDo) GetByIDs(ids []int) (result []apiv1.UserProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM user_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userProfileORMDo) Debug() IUserProfileORMDo {
	return u.withDO(u.DO.Debug())
}

func (u userProfileORMDo) WithContext(ctx context.Context) IUserProfileORMDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userProfileORMDo) ReadDB() IUserProfileORMDo {
	return u.Clauses(dbresolver.Read)
}

func (u userProfileORMDo) WriteDB() IUserProfileORMDo {
	return u.Clauses(dbresolver.Write)
}

func (u userProfileORMDo) Session(config *gorm.Session) IUserProfileORMDo {
	return u.withDO(u.DO.Session(config))
}

func (u userProfileORMDo) Clauses(conds ...clause.Expression) IUserProfileORMDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userProfileORMDo) Returning(value interface{}, columns ...string) IUserProfileORMDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userProfileORMDo) Not(conds ...gen.Condition) IUserProfileORMDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userProfileORMDo) Or(conds ...gen.Condition) IUserProfileORMDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userProfileORMDo) Select(conds ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userProfileORMDo) Where(conds ...gen.Condition) IUserProfileORMDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userProfileORMDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserProfileORMDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userProfileORMDo) Order(conds ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userProfileORMDo) Distinct(cols ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userProfileORMDo) Omit(cols ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userProfileORMDo) Join(table schema.Tabler, on ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userProfileORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userProfileORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userProfileORMDo) Group(cols ...field.Expr) IUserProfileORMDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userProfileORMDo) Having(conds ...gen.Condition) IUserProfileORMDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userProfileORMDo) Limit(limit int) IUserProfileORMDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userProfileORMDo) Offset(offset int) IUserProfileORMDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userProfileORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProfileORMDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userProfileORMDo) Unscoped() IUserProfileORMDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userProfileORMDo) Create(values ...*apiv1.UserProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userProfileORMDo) CreateInBatches(values []*apiv1.UserProfileORM, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userProfileORMDo) Save(values ...*apiv1.UserProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userProfileORMDo) First() (*apiv1.UserProfileORM, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*apiv1.UserProfileORM), nil
	}
}

func (u userProfileORMDo) Take() (*apiv1.UserProfileORM, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*apiv1.UserProfileORM), nil
	}
}

func (u userProfileORMDo) Last() (*apiv1.UserProfileORM, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*apiv1.UserProfileORM), nil
	}
}

func (u userProfileORMDo) Find() ([]*apiv1.UserProfileORM, error) {
	result, err := u.DO.Find()
	return result.([]*apiv1.UserProfileORM), err
}

func (u userProfileORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*apiv1.UserProfileORM, err error) {
	buf := make([]*apiv1.UserProfileORM, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userProfileORMDo) FindInBatches(result *[]*apiv1.UserProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userProfileORMDo) Attrs(attrs ...field.AssignExpr) IUserProfileORMDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userProfileORMDo) Assign(attrs ...field.AssignExpr) IUserProfileORMDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userProfileORMDo) Joins(fields ...field.RelationField) IUserProfileORMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userProfileORMDo) Preload(fields ...field.RelationField) IUserProfileORMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userProfileORMDo) FirstOrInit() (*apiv1.UserProfileORM, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*apiv1.UserProfileORM), nil
	}
}

func (u userProfileORMDo) FirstOrCreate() (*apiv1.UserProfileORM, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*apiv1.UserProfileORM), nil
	}
}

func (u userProfileORMDo) FindByPage(offset int, limit int) (result []*apiv1.UserProfileORM, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userProfileORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userProfileORMDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userProfileORMDo) Delete(models ...*apiv1.UserProfileORM) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userProfileORMDo) withDO(do gen.Dao) *userProfileORMDo {
	u.DO = *do.(*gen.DO)
	return u
}
