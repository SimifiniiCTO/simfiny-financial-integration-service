// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: fis_service.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinancialIntegrationServiceClient is the client API for FinancialIntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancialIntegrationServiceClient interface {
	InitiateAccountSetupAndGetLinkToken(ctx context.Context, in *InitiateAccountSetupRequest, opts ...grpc.CallOption) (*InitiateAccountSetupResponse, error)
	CreateAccountWithTokenExchange(ctx context.Context, in *CreateAccountTokenExchangeRequest, opts ...grpc.CallOption) (*CreateAccountTokenExchangeResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	GetAccountsByType(ctx context.Context, in *GetAccountsByTypeRequest, opts ...grpc.CallOption) (*GetAccountsByTypeResponse, error)
	GetAccountsBalances(ctx context.Context, in *GetAccountsBalanceRequest, opts ...grpc.CallOption) (*GetAccountsBalanceResponse, error)
	GetLiabilities(ctx context.Context, in *GetLiabilitiesRequest, opts ...grpc.CallOption) (*GetLiabilitiesResponse, error)
	GetInvestments(ctx context.Context, in *GetInvestmentsRequest, opts ...grpc.CallOption) (*GetInvestmentsResponse, error)
	GetVirtualAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetVirtualAccountId(ctx context.Context, in *GetVirtualAccountIdRequest, opts ...grpc.CallOption) (*GetVirtualAccountIdResponse, error)
}

type financialIntegrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialIntegrationServiceClient(cc grpc.ClientConnInterface) FinancialIntegrationServiceClient {
	return &financialIntegrationServiceClient{cc}
}

func (c *financialIntegrationServiceClient) InitiateAccountSetupAndGetLinkToken(ctx context.Context, in *InitiateAccountSetupRequest, opts ...grpc.CallOption) (*InitiateAccountSetupResponse, error) {
	out := new(InitiateAccountSetupResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/InitiateAccountSetupAndGetLinkToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) CreateAccountWithTokenExchange(ctx context.Context, in *CreateAccountTokenExchangeRequest, opts ...grpc.CallOption) (*CreateAccountTokenExchangeResponse, error) {
	out := new(CreateAccountTokenExchangeResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/CreateAccountWithTokenExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetAccountsByType(ctx context.Context, in *GetAccountsByTypeRequest, opts ...grpc.CallOption) (*GetAccountsByTypeResponse, error) {
	out := new(GetAccountsByTypeResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetAccountsByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetAccountsBalances(ctx context.Context, in *GetAccountsBalanceRequest, opts ...grpc.CallOption) (*GetAccountsBalanceResponse, error) {
	out := new(GetAccountsBalanceResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetAccountsBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetLiabilities(ctx context.Context, in *GetLiabilitiesRequest, opts ...grpc.CallOption) (*GetLiabilitiesResponse, error) {
	out := new(GetLiabilitiesResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetLiabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetInvestments(ctx context.Context, in *GetInvestmentsRequest, opts ...grpc.CallOption) (*GetInvestmentsResponse, error) {
	out := new(GetInvestmentsResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetInvestments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetVirtualAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetVirtualAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialIntegrationServiceClient) GetVirtualAccountId(ctx context.Context, in *GetVirtualAccountIdRequest, opts ...grpc.CallOption) (*GetVirtualAccountIdResponse, error) {
	out := new(GetVirtualAccountIdResponse)
	err := c.cc.Invoke(ctx, "/fis_service.FinancialIntegrationService/GetVirtualAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialIntegrationServiceServer is the server API for FinancialIntegrationService service.
// All implementations must embed UnimplementedFinancialIntegrationServiceServer
// for forward compatibility
type FinancialIntegrationServiceServer interface {
	InitiateAccountSetupAndGetLinkToken(context.Context, *InitiateAccountSetupRequest) (*InitiateAccountSetupResponse, error)
	CreateAccountWithTokenExchange(context.Context, *CreateAccountTokenExchangeRequest) (*CreateAccountTokenExchangeResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	GetAccountsByType(context.Context, *GetAccountsByTypeRequest) (*GetAccountsByTypeResponse, error)
	GetAccountsBalances(context.Context, *GetAccountsBalanceRequest) (*GetAccountsBalanceResponse, error)
	GetLiabilities(context.Context, *GetLiabilitiesRequest) (*GetLiabilitiesResponse, error)
	GetInvestments(context.Context, *GetInvestmentsRequest) (*GetInvestmentsResponse, error)
	GetVirtualAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetVirtualAccountId(context.Context, *GetVirtualAccountIdRequest) (*GetVirtualAccountIdResponse, error)
	mustEmbedUnimplementedFinancialIntegrationServiceServer()
}

// UnimplementedFinancialIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinancialIntegrationServiceServer struct {
}

func (UnimplementedFinancialIntegrationServiceServer) InitiateAccountSetupAndGetLinkToken(context.Context, *InitiateAccountSetupRequest) (*InitiateAccountSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateAccountSetupAndGetLinkToken not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) CreateAccountWithTokenExchange(context.Context, *CreateAccountTokenExchangeRequest) (*CreateAccountTokenExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountWithTokenExchange not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetAccountsByType(context.Context, *GetAccountsByTypeRequest) (*GetAccountsByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByType not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetAccountsBalances(context.Context, *GetAccountsBalanceRequest) (*GetAccountsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsBalances not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetLiabilities(context.Context, *GetLiabilitiesRequest) (*GetLiabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiabilities not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetInvestments(context.Context, *GetInvestmentsRequest) (*GetInvestmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestments not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetVirtualAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualAccount not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) GetVirtualAccountId(context.Context, *GetVirtualAccountIdRequest) (*GetVirtualAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualAccountId not implemented")
}
func (UnimplementedFinancialIntegrationServiceServer) mustEmbedUnimplementedFinancialIntegrationServiceServer() {
}

// UnsafeFinancialIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialIntegrationServiceServer will
// result in compilation errors.
type UnsafeFinancialIntegrationServiceServer interface {
	mustEmbedUnimplementedFinancialIntegrationServiceServer()
}

func RegisterFinancialIntegrationServiceServer(s grpc.ServiceRegistrar, srv FinancialIntegrationServiceServer) {
	s.RegisterService(&FinancialIntegrationService_ServiceDesc, srv)
}

func _FinancialIntegrationService_InitiateAccountSetupAndGetLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateAccountSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).InitiateAccountSetupAndGetLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/InitiateAccountSetupAndGetLinkToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).InitiateAccountSetupAndGetLinkToken(ctx, req.(*InitiateAccountSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_CreateAccountWithTokenExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTokenExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).CreateAccountWithTokenExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/CreateAccountWithTokenExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).CreateAccountWithTokenExchange(ctx, req.(*CreateAccountTokenExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetAccountsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetAccountsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetAccountsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetAccountsByType(ctx, req.(*GetAccountsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetAccountsBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetAccountsBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetAccountsBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetAccountsBalances(ctx, req.(*GetAccountsBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetLiabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetLiabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetLiabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetLiabilities(ctx, req.(*GetLiabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetInvestments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetInvestments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetInvestments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetInvestments(ctx, req.(*GetInvestmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetVirtualAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetVirtualAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetVirtualAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetVirtualAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialIntegrationService_GetVirtualAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialIntegrationServiceServer).GetVirtualAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fis_service.FinancialIntegrationService/GetVirtualAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialIntegrationServiceServer).GetVirtualAccountId(ctx, req.(*GetVirtualAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialIntegrationService_ServiceDesc is the grpc.ServiceDesc for FinancialIntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialIntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fis_service.FinancialIntegrationService",
	HandlerType: (*FinancialIntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateAccountSetupAndGetLinkToken",
			Handler:    _FinancialIntegrationService_InitiateAccountSetupAndGetLinkToken_Handler,
		},
		{
			MethodName: "CreateAccountWithTokenExchange",
			Handler:    _FinancialIntegrationService_CreateAccountWithTokenExchange_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _FinancialIntegrationService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _FinancialIntegrationService_GetAccounts_Handler,
		},
		{
			MethodName: "GetAccountsByType",
			Handler:    _FinancialIntegrationService_GetAccountsByType_Handler,
		},
		{
			MethodName: "GetAccountsBalances",
			Handler:    _FinancialIntegrationService_GetAccountsBalances_Handler,
		},
		{
			MethodName: "GetLiabilities",
			Handler:    _FinancialIntegrationService_GetLiabilities_Handler,
		},
		{
			MethodName: "GetInvestments",
			Handler:    _FinancialIntegrationService_GetInvestments_Handler,
		},
		{
			MethodName: "GetVirtualAccount",
			Handler:    _FinancialIntegrationService_GetVirtualAccount_Handler,
		},
		{
			MethodName: "GetVirtualAccountId",
			Handler:    _FinancialIntegrationService_GetVirtualAccountId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fis_service.proto",
}
