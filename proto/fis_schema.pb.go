// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: fis_schema.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Security provides information specific to financial security
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsCashEquivalent bool   `protobuf:"varint,2,opt,name=IsCashEquivalent,proto3" json:"IsCashEquivalent,omitempty"`
	ClosePrice       uint64 `protobuf:"varint,3,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
	CurrencyCode     string `protobuf:"bytes,4,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	SecurityID       string `protobuf:"bytes,5,opt,name=SecurityID,proto3" json:"SecurityID,omitempty"`
	TickerSymbol     string `protobuf:"bytes,6,opt,name=TickerSymbol,proto3" json:"TickerSymbol,omitempty"`
	SecurityType     string `protobuf:"bytes,7,opt,name=SecurityType,proto3" json:"SecurityType,omitempty"`
	SecurityName     string `protobuf:"bytes,8,opt,name=SecurityName,proto3" json:"SecurityName,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Security) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Security) GetIsCashEquivalent() bool {
	if x != nil {
		return x.IsCashEquivalent
	}
	return false
}

func (x *Security) GetClosePrice() uint64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *Security) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Security) GetSecurityID() string {
	if x != nil {
		return x.SecurityID
	}
	return ""
}

func (x *Security) GetTickerSymbol() string {
	if x != nil {
		return x.TickerSymbol
	}
	return ""
}

func (x *Security) GetSecurityType() string {
	if x != nil {
		return x.SecurityType
	}
	return ""
}

func (x *Security) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

// The balance table is the single source of truth for account balances in our
// backend
type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AvailableFunds float64 `protobuf:"fixed64,2,opt,name=AvailableFunds,proto3" json:"AvailableFunds,omitempty"`
	CurrentFunds   float64 `protobuf:"fixed64,3,opt,name=CurrentFunds,proto3" json:"CurrentFunds,omitempty"`
	CurrencyCode   string  `protobuf:"bytes,4,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	BalanceLimit   uint64  `protobuf:"varint,5,opt,name=BalanceLimit,proto3" json:"BalanceLimit,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Balance) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Balance) GetAvailableFunds() float64 {
	if x != nil {
		return x.AvailableFunds
	}
	return 0
}

func (x *Balance) GetCurrentFunds() float64 {
	if x != nil {
		return x.CurrentFunds
	}
	return 0
}

func (x *Balance) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Balance) GetBalanceLimit() uint64 {
	if x != nil {
		return x.BalanceLimit
	}
	return 0
}

// A virtual account abstracts a grouping of separate plaid accounts a user can
// have
type VirtualAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AccessToken           string                 `protobuf:"bytes,2,opt,name=AccessToken,proto3" json:"AccessToken,omitempty"`
	UserID                uint64                 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	DepositAccountID      []*DepositAccount      `protobuf:"bytes,4,rep,name=DepositAccountID,proto3" json:"DepositAccountID,omitempty"`
	CreditAccountID       []*CreditAccount       `protobuf:"bytes,5,rep,name=CreditAccountID,proto3" json:"CreditAccountID,omitempty"`
	MortgageLoanAccountID []*MortgageLoanAccount `protobuf:"bytes,6,rep,name=MortgageLoanAccountID,proto3" json:"MortgageLoanAccountID,omitempty"`
	StudentLoanAccountID  []*StudentLoanAccount  `protobuf:"bytes,7,rep,name=StudentLoanAccountID,proto3" json:"StudentLoanAccountID,omitempty"`
	InvestmentAccountID   []*InvestmentAccount   `protobuf:"bytes,8,rep,name=InvestmentAccountID,proto3" json:"InvestmentAccountID,omitempty"`
	Active                bool                   `protobuf:"varint,9,opt,name=Active,proto3" json:"Active,omitempty"`
	PlaidItemID           string                 `protobuf:"bytes,10,opt,name=PlaidItemID,proto3" json:"PlaidItemID,omitempty"`
}

func (x *VirtualAccount) Reset() {
	*x = VirtualAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualAccount) ProtoMessage() {}

func (x *VirtualAccount) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualAccount.ProtoReflect.Descriptor instead.
func (*VirtualAccount) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VirtualAccount) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *VirtualAccount) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *VirtualAccount) GetDepositAccountID() []*DepositAccount {
	if x != nil {
		return x.DepositAccountID
	}
	return nil
}

func (x *VirtualAccount) GetCreditAccountID() []*CreditAccount {
	if x != nil {
		return x.CreditAccountID
	}
	return nil
}

func (x *VirtualAccount) GetMortgageLoanAccountID() []*MortgageLoanAccount {
	if x != nil {
		return x.MortgageLoanAccountID
	}
	return nil
}

func (x *VirtualAccount) GetStudentLoanAccountID() []*StudentLoanAccount {
	if x != nil {
		return x.StudentLoanAccountID
	}
	return nil
}

func (x *VirtualAccount) GetInvestmentAccountID() []*InvestmentAccount {
	if x != nil {
		return x.InvestmentAccountID
	}
	return nil
}

func (x *VirtualAccount) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *VirtualAccount) GetPlaidItemID() string {
	if x != nil {
		return x.PlaidItemID
	}
	return ""
}

type DepositAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PlaidAccountID string   `protobuf:"bytes,2,opt,name=PlaidAccountID,proto3" json:"PlaidAccountID,omitempty"`
	AccountSubtype string   `protobuf:"bytes,3,opt,name=AccountSubtype,proto3" json:"AccountSubtype,omitempty"`
	AccountType    string   `protobuf:"bytes,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	AccountName    string   `protobuf:"bytes,5,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	BalanceID      *Balance `protobuf:"bytes,6,opt,name=BalanceID,proto3" json:"BalanceID,omitempty"`
}

func (x *DepositAccount) Reset() {
	*x = DepositAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositAccount) ProtoMessage() {}

func (x *DepositAccount) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositAccount.ProtoReflect.Descriptor instead.
func (*DepositAccount) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{3}
}

func (x *DepositAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DepositAccount) GetPlaidAccountID() string {
	if x != nil {
		return x.PlaidAccountID
	}
	return ""
}

func (x *DepositAccount) GetAccountSubtype() string {
	if x != nil {
		return x.AccountSubtype
	}
	return ""
}

func (x *DepositAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *DepositAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *DepositAccount) GetBalanceID() *Balance {
	if x != nil {
		return x.BalanceID
	}
	return nil
}

type CreditAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PlaidAccountID         string   `protobuf:"bytes,2,opt,name=PlaidAccountID,proto3" json:"PlaidAccountID,omitempty"`
	AccountSubtype         string   `protobuf:"bytes,3,opt,name=AccountSubtype,proto3" json:"AccountSubtype,omitempty"`
	AccountType            string   `protobuf:"bytes,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	IsOverdue              bool     `protobuf:"varint,5,opt,name=IsOverdue,proto3" json:"IsOverdue,omitempty"`
	LastPaymentAmount      float64  `protobuf:"fixed64,6,opt,name=LastPaymentAmount,proto3" json:"LastPaymentAmount,omitempty"`
	LastPaymentDate        string   `protobuf:"bytes,7,opt,name=LastPaymentDate,proto3" json:"LastPaymentDate,omitempty"`
	LastStatementIssueDate string   `protobuf:"bytes,8,opt,name=LastStatementIssueDate,proto3" json:"LastStatementIssueDate,omitempty"`
	MinimumPaymentAmount   float64  `protobuf:"fixed64,9,opt,name=MinimumPaymentAmount,proto3" json:"MinimumPaymentAmount,omitempty"`
	NextPaymentDueDate     string   `protobuf:"bytes,10,opt,name=NextPaymentDueDate,proto3" json:"NextPaymentDueDate,omitempty"`
	Aprs                   []*APR   `protobuf:"bytes,11,rep,name=Aprs,proto3" json:"Aprs,omitempty"`
	BalanceID              *Balance `protobuf:"bytes,12,opt,name=BalanceID,proto3" json:"BalanceID,omitempty"`
	AccountName            string   `protobuf:"bytes,13,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
}

func (x *CreditAccount) Reset() {
	*x = CreditAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditAccount) ProtoMessage() {}

func (x *CreditAccount) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditAccount.ProtoReflect.Descriptor instead.
func (*CreditAccount) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{4}
}

func (x *CreditAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreditAccount) GetPlaidAccountID() string {
	if x != nil {
		return x.PlaidAccountID
	}
	return ""
}

func (x *CreditAccount) GetAccountSubtype() string {
	if x != nil {
		return x.AccountSubtype
	}
	return ""
}

func (x *CreditAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *CreditAccount) GetIsOverdue() bool {
	if x != nil {
		return x.IsOverdue
	}
	return false
}

func (x *CreditAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *CreditAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *CreditAccount) GetLastStatementIssueDate() string {
	if x != nil {
		return x.LastStatementIssueDate
	}
	return ""
}

func (x *CreditAccount) GetMinimumPaymentAmount() float64 {
	if x != nil {
		return x.MinimumPaymentAmount
	}
	return 0
}

func (x *CreditAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *CreditAccount) GetAprs() []*APR {
	if x != nil {
		return x.Aprs
	}
	return nil
}

func (x *CreditAccount) GetBalanceID() *Balance {
	if x != nil {
		return x.BalanceID
	}
	return nil
}

func (x *CreditAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type APR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	APRPercentage        float64 `protobuf:"fixed64,2,opt,name=APRPercentage,proto3" json:"APRPercentage,omitempty"`
	APRType              string  `protobuf:"bytes,3,opt,name=APRType,proto3" json:"APRType,omitempty"`
	BalanceSubjectToAPR  float64 `protobuf:"fixed64,4,opt,name=BalanceSubjectToAPR,proto3" json:"BalanceSubjectToAPR,omitempty"`
	InterestChargeAmount float64 `protobuf:"fixed64,5,opt,name=InterestChargeAmount,proto3" json:"InterestChargeAmount,omitempty"`
}

func (x *APR) Reset() {
	*x = APR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APR) ProtoMessage() {}

func (x *APR) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APR.ProtoReflect.Descriptor instead.
func (*APR) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{5}
}

func (x *APR) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *APR) GetAPRPercentage() float64 {
	if x != nil {
		return x.APRPercentage
	}
	return 0
}

func (x *APR) GetAPRType() string {
	if x != nil {
		return x.APRType
	}
	return ""
}

func (x *APR) GetBalanceSubjectToAPR() float64 {
	if x != nil {
		return x.BalanceSubjectToAPR
	}
	return 0
}

func (x *APR) GetInterestChargeAmount() float64 {
	if x != nil {
		return x.InterestChargeAmount
	}
	return 0
}

type MortgageLoanAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PlaidAccountID             string    `protobuf:"bytes,2,opt,name=PlaidAccountID,proto3" json:"PlaidAccountID,omitempty"`
	AccountSubtype             string    `protobuf:"bytes,3,opt,name=AccountSubtype,proto3" json:"AccountSubtype,omitempty"`
	AccountType                string    `protobuf:"bytes,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	AccountNumber              string    `protobuf:"bytes,5,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	CurrentLateFee             float64   `protobuf:"fixed64,6,opt,name=CurrentLateFee,proto3" json:"CurrentLateFee,omitempty"`
	EscrowBalance              float64   `protobuf:"fixed64,7,opt,name=EscrowBalance,proto3" json:"EscrowBalance,omitempty"`
	HasPmi                     bool      `protobuf:"varint,8,opt,name=HasPmi,proto3" json:"HasPmi,omitempty"`
	HasPrepaymentPenalty       bool      `protobuf:"varint,9,opt,name=HasPrepaymentPenalty,proto3" json:"HasPrepaymentPenalty,omitempty"`
	LastPaymentAmount          float64   `protobuf:"fixed64,10,opt,name=LastPaymentAmount,proto3" json:"LastPaymentAmount,omitempty"`
	LastPaymentDate            string    `protobuf:"bytes,11,opt,name=LastPaymentDate,proto3" json:"LastPaymentDate,omitempty"`
	LoanTerm                   string    `protobuf:"bytes,12,opt,name=LoanTerm,proto3" json:"LoanTerm,omitempty"`
	LoanTypeDescription        string    `protobuf:"bytes,13,opt,name=LoanTypeDescription,proto3" json:"LoanTypeDescription,omitempty"`
	MaturityDate               string    `protobuf:"bytes,14,opt,name=MaturityDate,proto3" json:"MaturityDate,omitempty"`
	NexMonthlyPayment          float64   `protobuf:"fixed64,15,opt,name=NexMonthlyPayment,proto3" json:"NexMonthlyPayment,omitempty"`
	NextPaymentDueDate         string    `protobuf:"bytes,16,opt,name=NextPaymentDueDate,proto3" json:"NextPaymentDueDate,omitempty"`
	OriginationDate            string    `protobuf:"bytes,17,opt,name=OriginationDate,proto3" json:"OriginationDate,omitempty"`
	OriginationPrincipalAmount float64   `protobuf:"fixed64,18,opt,name=OriginationPrincipalAmount,proto3" json:"OriginationPrincipalAmount,omitempty"`
	PastDueAmount              float64   `protobuf:"fixed64,19,opt,name=PastDueAmount,proto3" json:"PastDueAmount,omitempty"`
	InterestID                 *Interest `protobuf:"bytes,20,opt,name=InterestID,proto3" json:"InterestID,omitempty"`
	AddressID                  *Address  `protobuf:"bytes,21,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	InterestPaidYTD            float64   `protobuf:"fixed64,22,opt,name=InterestPaidYTD,proto3" json:"InterestPaidYTD,omitempty"`
	PrincipalPaidYTD           float64   `protobuf:"fixed64,23,opt,name=PrincipalPaidYTD,proto3" json:"PrincipalPaidYTD,omitempty"`
	BalanceID                  *Balance  `protobuf:"bytes,24,opt,name=BalanceID,proto3" json:"BalanceID,omitempty"`
	AccountName                string    `protobuf:"bytes,25,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
}

func (x *MortgageLoanAccount) Reset() {
	*x = MortgageLoanAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MortgageLoanAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MortgageLoanAccount) ProtoMessage() {}

func (x *MortgageLoanAccount) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MortgageLoanAccount.ProtoReflect.Descriptor instead.
func (*MortgageLoanAccount) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{6}
}

func (x *MortgageLoanAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MortgageLoanAccount) GetPlaidAccountID() string {
	if x != nil {
		return x.PlaidAccountID
	}
	return ""
}

func (x *MortgageLoanAccount) GetAccountSubtype() string {
	if x != nil {
		return x.AccountSubtype
	}
	return ""
}

func (x *MortgageLoanAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *MortgageLoanAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *MortgageLoanAccount) GetCurrentLateFee() float64 {
	if x != nil {
		return x.CurrentLateFee
	}
	return 0
}

func (x *MortgageLoanAccount) GetEscrowBalance() float64 {
	if x != nil {
		return x.EscrowBalance
	}
	return 0
}

func (x *MortgageLoanAccount) GetHasPmi() bool {
	if x != nil {
		return x.HasPmi
	}
	return false
}

func (x *MortgageLoanAccount) GetHasPrepaymentPenalty() bool {
	if x != nil {
		return x.HasPrepaymentPenalty
	}
	return false
}

func (x *MortgageLoanAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *MortgageLoanAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *MortgageLoanAccount) GetLoanTerm() string {
	if x != nil {
		return x.LoanTerm
	}
	return ""
}

func (x *MortgageLoanAccount) GetLoanTypeDescription() string {
	if x != nil {
		return x.LoanTypeDescription
	}
	return ""
}

func (x *MortgageLoanAccount) GetMaturityDate() string {
	if x != nil {
		return x.MaturityDate
	}
	return ""
}

func (x *MortgageLoanAccount) GetNexMonthlyPayment() float64 {
	if x != nil {
		return x.NexMonthlyPayment
	}
	return 0
}

func (x *MortgageLoanAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *MortgageLoanAccount) GetOriginationDate() string {
	if x != nil {
		return x.OriginationDate
	}
	return ""
}

func (x *MortgageLoanAccount) GetOriginationPrincipalAmount() float64 {
	if x != nil {
		return x.OriginationPrincipalAmount
	}
	return 0
}

func (x *MortgageLoanAccount) GetPastDueAmount() float64 {
	if x != nil {
		return x.PastDueAmount
	}
	return 0
}

func (x *MortgageLoanAccount) GetInterestID() *Interest {
	if x != nil {
		return x.InterestID
	}
	return nil
}

func (x *MortgageLoanAccount) GetAddressID() *Address {
	if x != nil {
		return x.AddressID
	}
	return nil
}

func (x *MortgageLoanAccount) GetInterestPaidYTD() float64 {
	if x != nil {
		return x.InterestPaidYTD
	}
	return 0
}

func (x *MortgageLoanAccount) GetPrincipalPaidYTD() float64 {
	if x != nil {
		return x.PrincipalPaidYTD
	}
	return 0
}

func (x *MortgageLoanAccount) GetBalanceID() *Balance {
	if x != nil {
		return x.BalanceID
	}
	return nil
}

func (x *MortgageLoanAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type Interest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Percentage float64 `protobuf:"fixed64,2,opt,name=Percentage,proto3" json:"Percentage,omitempty"`
	Type       string  `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *Interest) Reset() {
	*x = Interest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interest) ProtoMessage() {}

func (x *Interest) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interest.ProtoReflect.Descriptor instead.
func (*Interest) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{7}
}

func (x *Interest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Interest) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Interest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=City,proto3" json:"City,omitempty"`
	Country string `protobuf:"bytes,3,opt,name=Country,proto3" json:"Country,omitempty"`
	Region  string `protobuf:"bytes,4,opt,name=Region,proto3" json:"Region,omitempty"`
	Street  string `protobuf:"bytes,5,opt,name=Street,proto3" json:"Street,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Address) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

type StudentLoanAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PlaidAccountID             string   `protobuf:"bytes,2,opt,name=PlaidAccountID,proto3" json:"PlaidAccountID,omitempty"`
	AccountSubtype             string   `protobuf:"bytes,3,opt,name=AccountSubtype,proto3" json:"AccountSubtype,omitempty"`
	AccountType                string   `protobuf:"bytes,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	AccountNumber              string   `protobuf:"bytes,5,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	DisbursementDates          []string `protobuf:"bytes,6,rep,name=DisbursementDates,proto3" json:"DisbursementDates,omitempty"`
	ExpectedPayoffDate         string   `protobuf:"bytes,7,opt,name=ExpectedPayoffDate,proto3" json:"ExpectedPayoffDate,omitempty"`
	Guarantor                  string   `protobuf:"bytes,8,opt,name=Guarantor,proto3" json:"Guarantor,omitempty"`
	InterestRatePercentage     float64  `protobuf:"fixed64,9,opt,name=InterestRatePercentage,proto3" json:"InterestRatePercentage,omitempty"`
	IsOverdue                  bool     `protobuf:"varint,10,opt,name=IsOverdue,proto3" json:"IsOverdue,omitempty"`
	LastPaymentAmount          float64  `protobuf:"fixed64,11,opt,name=LastPaymentAmount,proto3" json:"LastPaymentAmount,omitempty"`
	LastPaymentDate            string   `protobuf:"bytes,12,opt,name=LastPaymentDate,proto3" json:"LastPaymentDate,omitempty"`
	LastStatementIssueDate     string   `protobuf:"bytes,13,opt,name=LastStatementIssueDate,proto3" json:"LastStatementIssueDate,omitempty"`
	LoanStatementIssueDate     string   `protobuf:"bytes,14,opt,name=LoanStatementIssueDate,proto3" json:"LoanStatementIssueDate,omitempty"`
	LoanName                   string   `protobuf:"bytes,15,opt,name=LoanName,proto3" json:"LoanName,omitempty"`
	LoanRepaymentEndDate       string   `protobuf:"bytes,16,opt,name=LoanRepaymentEndDate,proto3" json:"LoanRepaymentEndDate,omitempty"`
	MinimumPaymentAmount       float64  `protobuf:"fixed64,17,opt,name=MinimumPaymentAmount,proto3" json:"MinimumPaymentAmount,omitempty"`
	NextPaymentDueDate         string   `protobuf:"bytes,18,opt,name=NextPaymentDueDate,proto3" json:"NextPaymentDueDate,omitempty"`
	OriginationDate            string   `protobuf:"bytes,19,opt,name=OriginationDate,proto3" json:"OriginationDate,omitempty"`
	OriginationPrincipalAmount float64  `protobuf:"fixed64,20,opt,name=OriginationPrincipalAmount,proto3" json:"OriginationPrincipalAmount,omitempty"`
	OutstandingInterestAmount  float64  `protobuf:"fixed64,21,opt,name=OutstandingInterestAmount,proto3" json:"OutstandingInterestAmount,omitempty"`
	PaymentReferenceNumber     string   `protobuf:"bytes,22,opt,name=PaymentReferenceNumber,proto3" json:"PaymentReferenceNumber,omitempty"`
	SequenceNumber             string   `protobuf:"bytes,23,opt,name=SequenceNumber,proto3" json:"SequenceNumber,omitempty"`
	PslfID                     *Pslf    `protobuf:"bytes,24,opt,name=PslfID,proto3" json:"PslfID,omitempty"`
	RepaymentPlan              string   `protobuf:"bytes,25,opt,name=RepaymentPlan,proto3" json:"RepaymentPlan,omitempty"`
	ServisorAddressID          *Address `protobuf:"bytes,26,opt,name=ServisorAddressID,proto3" json:"ServisorAddressID,omitempty"`
	InterestPaidYTD            float64  `protobuf:"fixed64,27,opt,name=InterestPaidYTD,proto3" json:"InterestPaidYTD,omitempty"`
	PrincipalPaidYTD           float64  `protobuf:"fixed64,28,opt,name=PrincipalPaidYTD,proto3" json:"PrincipalPaidYTD,omitempty"`
	BalanceID                  *Balance `protobuf:"bytes,29,opt,name=BalanceID,proto3" json:"BalanceID,omitempty"`
	AccountName                string   `protobuf:"bytes,30,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
}

func (x *StudentLoanAccount) Reset() {
	*x = StudentLoanAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentLoanAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentLoanAccount) ProtoMessage() {}

func (x *StudentLoanAccount) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentLoanAccount.ProtoReflect.Descriptor instead.
func (*StudentLoanAccount) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{9}
}

func (x *StudentLoanAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StudentLoanAccount) GetPlaidAccountID() string {
	if x != nil {
		return x.PlaidAccountID
	}
	return ""
}

func (x *StudentLoanAccount) GetAccountSubtype() string {
	if x != nil {
		return x.AccountSubtype
	}
	return ""
}

func (x *StudentLoanAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *StudentLoanAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetDisbursementDates() []string {
	if x != nil {
		return x.DisbursementDates
	}
	return nil
}

func (x *StudentLoanAccount) GetExpectedPayoffDate() string {
	if x != nil {
		return x.ExpectedPayoffDate
	}
	return ""
}

func (x *StudentLoanAccount) GetGuarantor() string {
	if x != nil {
		return x.Guarantor
	}
	return ""
}

func (x *StudentLoanAccount) GetInterestRatePercentage() float64 {
	if x != nil {
		return x.InterestRatePercentage
	}
	return 0
}

func (x *StudentLoanAccount) GetIsOverdue() bool {
	if x != nil {
		return x.IsOverdue
	}
	return false
}

func (x *StudentLoanAccount) GetLastPaymentAmount() float64 {
	if x != nil {
		return x.LastPaymentAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetLastPaymentDate() string {
	if x != nil {
		return x.LastPaymentDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLastStatementIssueDate() string {
	if x != nil {
		return x.LastStatementIssueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanStatementIssueDate() string {
	if x != nil {
		return x.LoanStatementIssueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanName() string {
	if x != nil {
		return x.LoanName
	}
	return ""
}

func (x *StudentLoanAccount) GetLoanRepaymentEndDate() string {
	if x != nil {
		return x.LoanRepaymentEndDate
	}
	return ""
}

func (x *StudentLoanAccount) GetMinimumPaymentAmount() float64 {
	if x != nil {
		return x.MinimumPaymentAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetNextPaymentDueDate() string {
	if x != nil {
		return x.NextPaymentDueDate
	}
	return ""
}

func (x *StudentLoanAccount) GetOriginationDate() string {
	if x != nil {
		return x.OriginationDate
	}
	return ""
}

func (x *StudentLoanAccount) GetOriginationPrincipalAmount() float64 {
	if x != nil {
		return x.OriginationPrincipalAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetOutstandingInterestAmount() float64 {
	if x != nil {
		return x.OutstandingInterestAmount
	}
	return 0
}

func (x *StudentLoanAccount) GetPaymentReferenceNumber() string {
	if x != nil {
		return x.PaymentReferenceNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetSequenceNumber() string {
	if x != nil {
		return x.SequenceNumber
	}
	return ""
}

func (x *StudentLoanAccount) GetPslfID() *Pslf {
	if x != nil {
		return x.PslfID
	}
	return nil
}

func (x *StudentLoanAccount) GetRepaymentPlan() string {
	if x != nil {
		return x.RepaymentPlan
	}
	return ""
}

func (x *StudentLoanAccount) GetServisorAddressID() *Address {
	if x != nil {
		return x.ServisorAddressID
	}
	return nil
}

func (x *StudentLoanAccount) GetInterestPaidYTD() float64 {
	if x != nil {
		return x.InterestPaidYTD
	}
	return 0
}

func (x *StudentLoanAccount) GetPrincipalPaidYTD() float64 {
	if x != nil {
		return x.PrincipalPaidYTD
	}
	return 0
}

func (x *StudentLoanAccount) GetBalanceID() *Balance {
	if x != nil {
		return x.BalanceID
	}
	return nil
}

func (x *StudentLoanAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type Pslf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	EstimatedEligibilityDate string `protobuf:"bytes,2,opt,name=EstimatedEligibilityDate,proto3" json:"EstimatedEligibilityDate,omitempty"`
	PaymentsMade             uint64 `protobuf:"varint,3,opt,name=PaymentsMade,proto3" json:"PaymentsMade,omitempty"`
	PaymentsRemaining        uint64 `protobuf:"varint,4,opt,name=PaymentsRemaining,proto3" json:"PaymentsRemaining,omitempty"`
}

func (x *Pslf) Reset() {
	*x = Pslf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pslf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pslf) ProtoMessage() {}

func (x *Pslf) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pslf.ProtoReflect.Descriptor instead.
func (*Pslf) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{10}
}

func (x *Pslf) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pslf) GetEstimatedEligibilityDate() string {
	if x != nil {
		return x.EstimatedEligibilityDate
	}
	return ""
}

func (x *Pslf) GetPaymentsMade() uint64 {
	if x != nil {
		return x.PaymentsMade
	}
	return 0
}

func (x *Pslf) GetPaymentsRemaining() uint64 {
	if x != nil {
		return x.PaymentsRemaining
	}
	return 0
}

type InvestmentAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PlaidAccountID string      `protobuf:"bytes,2,opt,name=PlaidAccountID,proto3" json:"PlaidAccountID,omitempty"`
	AccountSubtype string      `protobuf:"bytes,3,opt,name=AccountSubtype,proto3" json:"AccountSubtype,omitempty"`
	AccountType    string      `protobuf:"bytes,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	AccountName    string      `protobuf:"bytes,5,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	BalanceID      *Balance    `protobuf:"bytes,6,opt,name=BalanceID,proto3" json:"BalanceID,omitempty"`
	SecurityID     []*Security `protobuf:"bytes,7,rep,name=SecurityID,proto3" json:"SecurityID,omitempty"`
}

func (x *InvestmentAccount) Reset() {
	*x = InvestmentAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fis_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvestmentAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestmentAccount) ProtoMessage() {}

func (x *InvestmentAccount) ProtoReflect() protoreflect.Message {
	mi := &file_fis_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestmentAccount.ProtoReflect.Descriptor instead.
func (*InvestmentAccount) Descriptor() ([]byte, []int) {
	return file_fis_schema_proto_rawDescGZIP(), []int{11}
}

func (x *InvestmentAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestmentAccount) GetPlaidAccountID() string {
	if x != nil {
		return x.PlaidAccountID
	}
	return ""
}

func (x *InvestmentAccount) GetAccountSubtype() string {
	if x != nil {
		return x.AccountSubtype
	}
	return ""
}

func (x *InvestmentAccount) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *InvestmentAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *InvestmentAccount) GetBalanceID() *Balance {
	if x != nil {
		return x.BalanceID
	}
	return nil
}

func (x *InvestmentAccount) GetSecurityID() []*Security {
	if x != nil {
		return x.SecurityID
	}
	return nil
}

var File_fis_schema_proto protoreflect.FileDescriptor

var file_fis_schema_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x17,
	0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x0a, 0x0c, 0x12, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x43, 0x61,
	0x73, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x43, 0x61, 0x73, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc9, 0x01, 0x0a,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x0a, 0x0c, 0x12, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xd7, 0x04, 0x0a, 0x0e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x5f, 0x0a, 0x15, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x15, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x5c, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x14, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x59, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x13, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x69,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x6c, 0x61, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50,
	0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb9,
	0x04, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x41, 0x70, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x41, 0x50, 0x52, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x41,
	0x70, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x03, 0x41,
	0x50, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x50, 0x52, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x41, 0x50, 0x52, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x50, 0x52, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x50, 0x52, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x41, 0x50, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x41, 0x50, 0x52, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01,
	0x22, 0xc9, 0x08, 0x0a, 0x13, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x69,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x73, 0x63, 0x72,
	0x6f, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x61, 0x73, 0x50, 0x6d, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x48, 0x61, 0x73, 0x50, 0x6d, 0x69, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x61, 0x73, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x48, 0x61, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x30,
	0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x6f, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x4e, 0x65, 0x78, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x61, 0x73, 0x74, 0x44, 0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x3b, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04,
	0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x59,
	0x54, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x59, 0x54, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x59, 0x54, 0x44, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61,
	0x69, 0x64, 0x59, 0x54, 0x44, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xba,
	0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x56, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0x7f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xf6, 0x0a, 0x0a, 0x12, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x66, 0x66, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72,
	0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x64, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4c, 0x6f, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x6f, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x6f,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x6f, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x50, 0x73,
	0x6c, 0x66, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x73,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x73, 0x6c, 0x66, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x06, 0x50, 0x73, 0x6c, 0x66, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x11,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69,
	0x64, 0x59, 0x54, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x59, 0x54, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x50, 0x61, 0x69, 0x64, 0x59, 0x54, 0x44, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x50, 0x61, 0x69, 0x64, 0x59, 0x54, 0x44, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xac,
	0x01, 0x0a, 0x04, 0x50, 0x73, 0x6c, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d,
	0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xbc, 0x02,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6c, 0x61,
	0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x73,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x73, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x08,
	0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x5b, 0x5a, 0x59,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x6d, 0x69, 0x66,
	0x69, 0x6e, 0x69, 0x69, 0x43, 0x54, 0x4f, 0x2f, 0x73, 0x69, 0x6d, 0x66, 0x69, 0x6e, 0x69, 0x69,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_fis_schema_proto_rawDescOnce sync.Once
	file_fis_schema_proto_rawDescData = file_fis_schema_proto_rawDesc
)

func file_fis_schema_proto_rawDescGZIP() []byte {
	file_fis_schema_proto_rawDescOnce.Do(func() {
		file_fis_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_fis_schema_proto_rawDescData)
	})
	return file_fis_schema_proto_rawDescData
}

var file_fis_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_fis_schema_proto_goTypes = []interface{}{
	(*Security)(nil),            // 0: fis_schema.Security
	(*Balance)(nil),             // 1: fis_schema.Balance
	(*VirtualAccount)(nil),      // 2: fis_schema.VirtualAccount
	(*DepositAccount)(nil),      // 3: fis_schema.DepositAccount
	(*CreditAccount)(nil),       // 4: fis_schema.CreditAccount
	(*APR)(nil),                 // 5: fis_schema.APR
	(*MortgageLoanAccount)(nil), // 6: fis_schema.MortgageLoanAccount
	(*Interest)(nil),            // 7: fis_schema.Interest
	(*Address)(nil),             // 8: fis_schema.Address
	(*StudentLoanAccount)(nil),  // 9: fis_schema.StudentLoanAccount
	(*Pslf)(nil),                // 10: fis_schema.Pslf
	(*InvestmentAccount)(nil),   // 11: fis_schema.InvestmentAccount
}
var file_fis_schema_proto_depIdxs = []int32{
	3,  // 0: fis_schema.VirtualAccount.DepositAccountID:type_name -> fis_schema.DepositAccount
	4,  // 1: fis_schema.VirtualAccount.CreditAccountID:type_name -> fis_schema.CreditAccount
	6,  // 2: fis_schema.VirtualAccount.MortgageLoanAccountID:type_name -> fis_schema.MortgageLoanAccount
	9,  // 3: fis_schema.VirtualAccount.StudentLoanAccountID:type_name -> fis_schema.StudentLoanAccount
	11, // 4: fis_schema.VirtualAccount.InvestmentAccountID:type_name -> fis_schema.InvestmentAccount
	1,  // 5: fis_schema.DepositAccount.BalanceID:type_name -> fis_schema.Balance
	5,  // 6: fis_schema.CreditAccount.Aprs:type_name -> fis_schema.APR
	1,  // 7: fis_schema.CreditAccount.BalanceID:type_name -> fis_schema.Balance
	7,  // 8: fis_schema.MortgageLoanAccount.InterestID:type_name -> fis_schema.Interest
	8,  // 9: fis_schema.MortgageLoanAccount.AddressID:type_name -> fis_schema.Address
	1,  // 10: fis_schema.MortgageLoanAccount.BalanceID:type_name -> fis_schema.Balance
	10, // 11: fis_schema.StudentLoanAccount.PslfID:type_name -> fis_schema.Pslf
	8,  // 12: fis_schema.StudentLoanAccount.ServisorAddressID:type_name -> fis_schema.Address
	1,  // 13: fis_schema.StudentLoanAccount.BalanceID:type_name -> fis_schema.Balance
	1,  // 14: fis_schema.InvestmentAccount.BalanceID:type_name -> fis_schema.Balance
	0,  // 15: fis_schema.InvestmentAccount.SecurityID:type_name -> fis_schema.Security
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_fis_schema_proto_init() }
func file_fis_schema_proto_init() {
	if File_fis_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fis_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MortgageLoanAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudentLoanAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pslf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fis_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvestmentAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fis_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fis_schema_proto_goTypes,
		DependencyIndexes: file_fis_schema_proto_depIdxs,
		MessageInfos:      file_fis_schema_proto_msgTypes,
	}.Build()
	File_fis_schema_proto = out.File
	file_fis_schema_proto_rawDesc = nil
	file_fis_schema_proto_goTypes = nil
	file_fis_schema_proto_depIdxs = nil
}
