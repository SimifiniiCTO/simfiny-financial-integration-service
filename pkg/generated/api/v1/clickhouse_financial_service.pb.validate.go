// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/clickhouse_financial_service.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InvestmentTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvestmentTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvestmentTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvestmentTransactionMultiError, or nil if none found.
func (m *InvestmentTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *InvestmentTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Ammount

	// no validation rules for InvestmentTransactionId

	// no validation rules for SecurityId

	// no validation rules for Date

	// no validation rules for Name

	// no validation rules for Quantity

	// no validation rules for Amount

	// no validation rules for Price

	// no validation rules for Fees

	// no validation rules for Type

	// no validation rules for Subtype

	// no validation rules for IsoCurrencyCode

	// no validation rules for UnofficialCurrencyCode

	if m.GetLinkId() <= 0 {
		err := InvestmentTransactionValidationError{
			field:  "LinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	if m.GetUserId() <= 0 {
		err := InvestmentTransactionValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for Sign

	if len(errors) > 0 {
		return InvestmentTransactionMultiError(errors)
	}

	return nil
}

// InvestmentTransactionMultiError is an error wrapping multiple validation
// errors returned by InvestmentTransaction.ValidateAll() if the designated
// constraints aren't met.
type InvestmentTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvestmentTransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvestmentTransactionMultiError) AllErrors() []error { return m }

// InvestmentTransactionValidationError is the validation error returned by
// InvestmentTransaction.Validate if the designated constraints aren't met.
type InvestmentTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvestmentTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvestmentTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvestmentTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvestmentTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvestmentTransactionValidationError) ErrorName() string {
	return "InvestmentTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e InvestmentTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvestmentTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvestmentTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvestmentTransactionValidationError{}

// Validate checks the field values on ReOccuringTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReOccuringTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReOccuringTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReOccuringTransactionMultiError, or nil if none found.
func (m *ReOccuringTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *ReOccuringTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for StreamId

	// no validation rules for CategoryId

	// no validation rules for Description

	// no validation rules for MerchantName

	// no validation rules for PersonalFinanceCategoryPrimary

	// no validation rules for PersonalFinanceCategoryDetailed

	// no validation rules for FirstDate

	// no validation rules for LastDate

	// no validation rules for Frequency

	// no validation rules for TransactionIds

	// no validation rules for AverageAmount

	// no validation rules for AverageAmountIsoCurrencyCode

	// no validation rules for LastAmount

	// no validation rules for LastAmountIsoCurrencyCode

	// no validation rules for IsActive

	// no validation rules for Status

	// no validation rules for UpdatedTime

	if m.GetUserId() <= 0 {
		err := ReOccuringTransactionValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLinkId() <= 0 {
		err := ReOccuringTransactionValidationError{
			field:  "LinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	// no validation rules for Flow

	// no validation rules for Sign

	if len(errors) > 0 {
		return ReOccuringTransactionMultiError(errors)
	}

	return nil
}

// ReOccuringTransactionMultiError is an error wrapping multiple validation
// errors returned by ReOccuringTransaction.ValidateAll() if the designated
// constraints aren't met.
type ReOccuringTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReOccuringTransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReOccuringTransactionMultiError) AllErrors() []error { return m }

// ReOccuringTransactionValidationError is the validation error returned by
// ReOccuringTransaction.Validate if the designated constraints aren't met.
type ReOccuringTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReOccuringTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReOccuringTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReOccuringTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReOccuringTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReOccuringTransactionValidationError) ErrorName() string {
	return "ReOccuringTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e ReOccuringTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReOccuringTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReOccuringTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReOccuringTransactionValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Amount

	// no validation rules for IsoCurrencyCode

	// no validation rules for UnofficialCurrencyCode

	// no validation rules for CategoryId

	// no validation rules for CheckNumber

	// no validation rules for Date

	// no validation rules for Datetime

	// no validation rules for AuthorizedDate

	// no validation rules for AuthorizedDatetime

	// no validation rules for Name

	// no validation rules for MerchantName

	// no validation rules for PaymentChannel

	// no validation rules for Pending

	// no validation rules for PendingTransactionId

	// no validation rules for AccountOwner

	// no validation rules for TransactionId

	// no validation rules for TransactionCode

	// no validation rules for Id

	if m.GetUserId() <= 0 {
		err := TransactionValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLinkId() <= 0 {
		err := TransactionValidationError{
			field:  "LinkId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sign

	// no validation rules for PersonalFinanceCategoryPrimary

	// no validation rules for PersonalFinanceCategoryDetailed

	// no validation rules for LocationAddress

	// no validation rules for LocationCity

	// no validation rules for LocationRegion

	// no validation rules for LocationPostalCode

	// no validation rules for LocationCountry

	// no validation rules for LocationLat

	// no validation rules for LocationLon

	// no validation rules for LocationStoreNumber

	// no validation rules for PaymentMetaByOrderOf

	// no validation rules for PaymentMetaPayee

	// no validation rules for PaymentMetaPayer

	// no validation rules for PaymentMetaPaymentMethod

	// no validation rules for PaymentMetaPaymentProcessor

	// no validation rules for PaymentMetaPpdId

	// no validation rules for PaymentMetaReason

	// no validation rules for PaymentMetaReferenceNumber

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on TransactionAmountByCountryMetric with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TransactionAmountByCountryMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionAmountByCountryMetric with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TransactionAmountByCountryMetricMultiError, or nil if none found.
func (m *TransactionAmountByCountryMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionAmountByCountryMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Country

	// no validation rules for Amount

	if len(errors) > 0 {
		return TransactionAmountByCountryMetricMultiError(errors)
	}

	return nil
}

// TransactionAmountByCountryMetricMultiError is an error wrapping multiple
// validation errors returned by
// TransactionAmountByCountryMetric.ValidateAll() if the designated
// constraints aren't met.
type TransactionAmountByCountryMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionAmountByCountryMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionAmountByCountryMetricMultiError) AllErrors() []error { return m }

// TransactionAmountByCountryMetricValidationError is the validation error
// returned by TransactionAmountByCountryMetric.Validate if the designated
// constraints aren't met.
type TransactionAmountByCountryMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionAmountByCountryMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionAmountByCountryMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionAmountByCountryMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionAmountByCountryMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionAmountByCountryMetricValidationError) ErrorName() string {
	return "TransactionAmountByCountryMetricValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionAmountByCountryMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionAmountByCountryMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionAmountByCountryMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionAmountByCountryMetricValidationError{}

// Validate checks the field values on AverageTransactionAmountByCategoryMetric
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AverageTransactionAmountByCategoryMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AverageTransactionAmountByCategoryMetric with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AverageTransactionAmountByCategoryMetricMultiError, or nil if none found.
func (m *AverageTransactionAmountByCategoryMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *AverageTransactionAmountByCategoryMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Amount

	if len(errors) > 0 {
		return AverageTransactionAmountByCategoryMetricMultiError(errors)
	}

	return nil
}

// AverageTransactionAmountByCategoryMetricMultiError is an error wrapping
// multiple validation errors returned by
// AverageTransactionAmountByCategoryMetric.ValidateAll() if the designated
// constraints aren't met.
type AverageTransactionAmountByCategoryMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AverageTransactionAmountByCategoryMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AverageTransactionAmountByCategoryMetricMultiError) AllErrors() []error { return m }

// AverageTransactionAmountByCategoryMetricValidationError is the validation
// error returned by AverageTransactionAmountByCategoryMetric.Validate if the
// designated constraints aren't met.
type AverageTransactionAmountByCategoryMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AverageTransactionAmountByCategoryMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AverageTransactionAmountByCategoryMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AverageTransactionAmountByCategoryMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AverageTransactionAmountByCategoryMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AverageTransactionAmountByCategoryMetricValidationError) ErrorName() string {
	return "AverageTransactionAmountByCategoryMetricValidationError"
}

// Error satisfies the builtin error interface
func (e AverageTransactionAmountByCategoryMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAverageTransactionAmountByCategoryMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AverageTransactionAmountByCategoryMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AverageTransactionAmountByCategoryMetricValidationError{}

// Validate checks the field values on MonthlyTransactionCountByCategoryMetric
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MonthlyTransactionCountByCategoryMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MonthlyTransactionCountByCategoryMetric with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MonthlyTransactionCountByCategoryMetricMultiError, or nil if none found.
func (m *MonthlyTransactionCountByCategoryMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *MonthlyTransactionCountByCategoryMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Count

	// no validation rules for Month

	if len(errors) > 0 {
		return MonthlyTransactionCountByCategoryMetricMultiError(errors)
	}

	return nil
}

// MonthlyTransactionCountByCategoryMetricMultiError is an error wrapping
// multiple validation errors returned by
// MonthlyTransactionCountByCategoryMetric.ValidateAll() if the designated
// constraints aren't met.
type MonthlyTransactionCountByCategoryMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonthlyTransactionCountByCategoryMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonthlyTransactionCountByCategoryMetricMultiError) AllErrors() []error { return m }

// MonthlyTransactionCountByCategoryMetricValidationError is the validation
// error returned by MonthlyTransactionCountByCategoryMetric.Validate if the
// designated constraints aren't met.
type MonthlyTransactionCountByCategoryMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonthlyTransactionCountByCategoryMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonthlyTransactionCountByCategoryMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonthlyTransactionCountByCategoryMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonthlyTransactionCountByCategoryMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonthlyTransactionCountByCategoryMetricValidationError) ErrorName() string {
	return "MonthlyTransactionCountByCategoryMetricValidationError"
}

// Error satisfies the builtin error interface
func (e MonthlyTransactionCountByCategoryMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonthlyTransactionCountByCategoryMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonthlyTransactionCountByCategoryMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonthlyTransactionCountByCategoryMetricValidationError{}

// Validate checks the field values on
// TransactionCountByMerchantPaymentChannelMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransactionCountByMerchantPaymentChannelMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TransactionCountByMerchantPaymentChannelMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TransactionCountByMerchantPaymentChannelMetricMultiError, or nil if none found.
func (m *TransactionCountByMerchantPaymentChannelMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionCountByMerchantPaymentChannelMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantName

	// no validation rules for PaymentChannel

	// no validation rules for TransactionCount

	if len(errors) > 0 {
		return TransactionCountByMerchantPaymentChannelMetricMultiError(errors)
	}

	return nil
}

// TransactionCountByMerchantPaymentChannelMetricMultiError is an error
// wrapping multiple validation errors returned by
// TransactionCountByMerchantPaymentChannelMetric.ValidateAll() if the
// designated constraints aren't met.
type TransactionCountByMerchantPaymentChannelMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionCountByMerchantPaymentChannelMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionCountByMerchantPaymentChannelMetricMultiError) AllErrors() []error { return m }

// TransactionCountByMerchantPaymentChannelMetricValidationError is the
// validation error returned by
// TransactionCountByMerchantPaymentChannelMetric.Validate if the designated
// constraints aren't met.
type TransactionCountByMerchantPaymentChannelMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionCountByMerchantPaymentChannelMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionCountByMerchantPaymentChannelMetricValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TransactionCountByMerchantPaymentChannelMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionCountByMerchantPaymentChannelMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionCountByMerchantPaymentChannelMetricValidationError) ErrorName() string {
	return "TransactionCountByMerchantPaymentChannelMetricValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionCountByMerchantPaymentChannelMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionCountByMerchantPaymentChannelMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionCountByMerchantPaymentChannelMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionCountByMerchantPaymentChannelMetricValidationError{}

// Validate checks the field values on
// TransactionAmountDistributionByCategoryMetric with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransactionAmountDistributionByCategoryMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TransactionAmountDistributionByCategoryMetric with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TransactionAmountDistributionByCategoryMetricMultiError, or nil if none found.
func (m *TransactionAmountDistributionByCategoryMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionAmountDistributionByCategoryMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Mean

	// no validation rules for Median

	// no validation rules for StandardDeviation

	if len(errors) > 0 {
		return TransactionAmountDistributionByCategoryMetricMultiError(errors)
	}

	return nil
}

// TransactionAmountDistributionByCategoryMetricMultiError is an error wrapping
// multiple validation errors returned by
// TransactionAmountDistributionByCategoryMetric.ValidateAll() if the
// designated constraints aren't met.
type TransactionAmountDistributionByCategoryMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionAmountDistributionByCategoryMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionAmountDistributionByCategoryMetricMultiError) AllErrors() []error { return m }

// TransactionAmountDistributionByCategoryMetricValidationError is the
// validation error returned by
// TransactionAmountDistributionByCategoryMetric.Validate if the designated
// constraints aren't met.
type TransactionAmountDistributionByCategoryMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionAmountDistributionByCategoryMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionAmountDistributionByCategoryMetricValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TransactionAmountDistributionByCategoryMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionAmountDistributionByCategoryMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionAmountDistributionByCategoryMetricValidationError) ErrorName() string {
	return "TransactionAmountDistributionByCategoryMetricValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionAmountDistributionByCategoryMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionAmountDistributionByCategoryMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionAmountDistributionByCategoryMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionAmountDistributionByCategoryMetricValidationError{}
