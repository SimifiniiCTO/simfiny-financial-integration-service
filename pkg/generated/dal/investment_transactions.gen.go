// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	financial_integration_service_apiv1 "github.com/SimifiniiCTO/simfiny-financial-integration-service/pkg/generated/financial_integration_service_api/v1"
)

func newInvestmentTransactionORM(db *gorm.DB, opts ...gen.DOOption) investmentTransactionORM {
	_investmentTransactionORM := investmentTransactionORM{}

	_investmentTransactionORM.investmentTransactionORMDo.UseDB(db, opts...)
	_investmentTransactionORM.investmentTransactionORMDo.UseModel(&financial_integration_service_apiv1.InvestmentTransactionORM{})

	tableName := _investmentTransactionORM.investmentTransactionORMDo.TableName()
	_investmentTransactionORM.ALL = field.NewAsterisk(tableName)
	_investmentTransactionORM.AccountId = field.NewString(tableName, "account_id")
	_investmentTransactionORM.Ammount = field.NewString(tableName, "ammount")
	_investmentTransactionORM.Amount = field.NewFloat64(tableName, "amount")
	_investmentTransactionORM.CreatedAt = field.NewString(tableName, "created_at")
	_investmentTransactionORM.Date = field.NewString(tableName, "date")
	_investmentTransactionORM.Fees = field.NewFloat64(tableName, "fees")
	_investmentTransactionORM.Id = field.NewUint64(tableName, "id")
	_investmentTransactionORM.InvestmentTransactionId = field.NewString(tableName, "investment_transaction_id")
	_investmentTransactionORM.IsoCurrencyCode = field.NewString(tableName, "iso_currency_code")
	_investmentTransactionORM.LinkId = field.NewUint64(tableName, "link_id")
	_investmentTransactionORM.Name = field.NewString(tableName, "name")
	_investmentTransactionORM.Price = field.NewFloat64(tableName, "price")
	_investmentTransactionORM.Quantity = field.NewFloat64(tableName, "quantity")
	_investmentTransactionORM.SecurityId = field.NewString(tableName, "security_id")
	_investmentTransactionORM.Sign = field.NewInt32(tableName, "sign")
	_investmentTransactionORM.Subtype = field.NewString(tableName, "subtype")
	_investmentTransactionORM.Time = field.NewTime(tableName, "time")
	_investmentTransactionORM.Type = field.NewString(tableName, "type")
	_investmentTransactionORM.UnofficialCurrencyCode = field.NewString(tableName, "unofficial_currency_code")
	_investmentTransactionORM.UserId = field.NewUint64(tableName, "user_id")

	_investmentTransactionORM.fillFieldMap()

	return _investmentTransactionORM
}

type investmentTransactionORM struct {
	investmentTransactionORMDo

	ALL                     field.Asterisk
	AccountId               field.String
	Ammount                 field.String
	Amount                  field.Float64
	CreatedAt               field.String
	Date                    field.String
	Fees                    field.Float64
	Id                      field.Uint64
	InvestmentTransactionId field.String
	IsoCurrencyCode         field.String
	LinkId                  field.Uint64
	Name                    field.String
	Price                   field.Float64
	Quantity                field.Float64
	SecurityId              field.String
	Sign                    field.Int32
	Subtype                 field.String
	Time                    field.Time
	Type                    field.String
	UnofficialCurrencyCode  field.String
	UserId                  field.Uint64

	fieldMap map[string]field.Expr
}

func (i investmentTransactionORM) Table(newTableName string) *investmentTransactionORM {
	i.investmentTransactionORMDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i investmentTransactionORM) As(alias string) *investmentTransactionORM {
	i.investmentTransactionORMDo.DO = *(i.investmentTransactionORMDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *investmentTransactionORM) updateTableName(table string) *investmentTransactionORM {
	i.ALL = field.NewAsterisk(table)
	i.AccountId = field.NewString(table, "account_id")
	i.Ammount = field.NewString(table, "ammount")
	i.Amount = field.NewFloat64(table, "amount")
	i.CreatedAt = field.NewString(table, "created_at")
	i.Date = field.NewString(table, "date")
	i.Fees = field.NewFloat64(table, "fees")
	i.Id = field.NewUint64(table, "id")
	i.InvestmentTransactionId = field.NewString(table, "investment_transaction_id")
	i.IsoCurrencyCode = field.NewString(table, "iso_currency_code")
	i.LinkId = field.NewUint64(table, "link_id")
	i.Name = field.NewString(table, "name")
	i.Price = field.NewFloat64(table, "price")
	i.Quantity = field.NewFloat64(table, "quantity")
	i.SecurityId = field.NewString(table, "security_id")
	i.Sign = field.NewInt32(table, "sign")
	i.Subtype = field.NewString(table, "subtype")
	i.Time = field.NewTime(table, "time")
	i.Type = field.NewString(table, "type")
	i.UnofficialCurrencyCode = field.NewString(table, "unofficial_currency_code")
	i.UserId = field.NewUint64(table, "user_id")

	i.fillFieldMap()

	return i
}

func (i *investmentTransactionORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *investmentTransactionORM) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 20)
	i.fieldMap["account_id"] = i.AccountId
	i.fieldMap["ammount"] = i.Ammount
	i.fieldMap["amount"] = i.Amount
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["date"] = i.Date
	i.fieldMap["fees"] = i.Fees
	i.fieldMap["id"] = i.Id
	i.fieldMap["investment_transaction_id"] = i.InvestmentTransactionId
	i.fieldMap["iso_currency_code"] = i.IsoCurrencyCode
	i.fieldMap["link_id"] = i.LinkId
	i.fieldMap["name"] = i.Name
	i.fieldMap["price"] = i.Price
	i.fieldMap["quantity"] = i.Quantity
	i.fieldMap["security_id"] = i.SecurityId
	i.fieldMap["sign"] = i.Sign
	i.fieldMap["subtype"] = i.Subtype
	i.fieldMap["time"] = i.Time
	i.fieldMap["type"] = i.Type
	i.fieldMap["unofficial_currency_code"] = i.UnofficialCurrencyCode
	i.fieldMap["user_id"] = i.UserId
}

func (i investmentTransactionORM) clone(db *gorm.DB) investmentTransactionORM {
	i.investmentTransactionORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i investmentTransactionORM) replaceDB(db *gorm.DB) investmentTransactionORM {
	i.investmentTransactionORMDo.ReplaceDB(db)
	return i
}

type investmentTransactionORMDo struct{ gen.DO }

type IInvestmentTransactionORMDo interface {
	gen.SubQuery
	Debug() IInvestmentTransactionORMDo
	WithContext(ctx context.Context) IInvestmentTransactionORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInvestmentTransactionORMDo
	WriteDB() IInvestmentTransactionORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInvestmentTransactionORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInvestmentTransactionORMDo
	Not(conds ...gen.Condition) IInvestmentTransactionORMDo
	Or(conds ...gen.Condition) IInvestmentTransactionORMDo
	Select(conds ...field.Expr) IInvestmentTransactionORMDo
	Where(conds ...gen.Condition) IInvestmentTransactionORMDo
	Order(conds ...field.Expr) IInvestmentTransactionORMDo
	Distinct(cols ...field.Expr) IInvestmentTransactionORMDo
	Omit(cols ...field.Expr) IInvestmentTransactionORMDo
	Join(table schema.Tabler, on ...field.Expr) IInvestmentTransactionORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInvestmentTransactionORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInvestmentTransactionORMDo
	Group(cols ...field.Expr) IInvestmentTransactionORMDo
	Having(conds ...gen.Condition) IInvestmentTransactionORMDo
	Limit(limit int) IInvestmentTransactionORMDo
	Offset(offset int) IInvestmentTransactionORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInvestmentTransactionORMDo
	Unscoped() IInvestmentTransactionORMDo
	Create(values ...*financial_integration_service_apiv1.InvestmentTransactionORM) error
	CreateInBatches(values []*financial_integration_service_apiv1.InvestmentTransactionORM, batchSize int) error
	Save(values ...*financial_integration_service_apiv1.InvestmentTransactionORM) error
	First() (*financial_integration_service_apiv1.InvestmentTransactionORM, error)
	Take() (*financial_integration_service_apiv1.InvestmentTransactionORM, error)
	Last() (*financial_integration_service_apiv1.InvestmentTransactionORM, error)
	Find() ([]*financial_integration_service_apiv1.InvestmentTransactionORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_integration_service_apiv1.InvestmentTransactionORM, err error)
	FindInBatches(result *[]*financial_integration_service_apiv1.InvestmentTransactionORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_integration_service_apiv1.InvestmentTransactionORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInvestmentTransactionORMDo
	Assign(attrs ...field.AssignExpr) IInvestmentTransactionORMDo
	Joins(fields ...field.RelationField) IInvestmentTransactionORMDo
	Preload(fields ...field.RelationField) IInvestmentTransactionORMDo
	FirstOrInit() (*financial_integration_service_apiv1.InvestmentTransactionORM, error)
	FirstOrCreate() (*financial_integration_service_apiv1.InvestmentTransactionORM, error)
	FindByPage(offset int, limit int) (result []*financial_integration_service_apiv1.InvestmentTransactionORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInvestmentTransactionORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByUserID(user_id int) (result financial_integration_service_apiv1.InvestmentTransactionORM, err error)
	GetByID(id int) (result financial_integration_service_apiv1.InvestmentTransactionORM, err error)
	GetByIDs(ids []int) (result []financial_integration_service_apiv1.InvestmentTransactionORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	user_id=@user_id
//
// {{end}}
func (i investmentTransactionORMDo) GetByUserID(user_id int) (result financial_integration_service_apiv1.InvestmentTransactionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_transactions ")
	var whereSQL0 strings.Builder
	params = append(params, user_id)
	whereSQL0.WriteString("user_id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (i investmentTransactionORMDo) GetByID(id int) (result financial_integration_service_apiv1.InvestmentTransactionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_transactions ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (i investmentTransactionORMDo) GetByIDs(ids []int) (result []financial_integration_service_apiv1.InvestmentTransactionORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM investment_transactions ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = i.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (i investmentTransactionORMDo) Debug() IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Debug())
}

func (i investmentTransactionORMDo) WithContext(ctx context.Context) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i investmentTransactionORMDo) ReadDB() IInvestmentTransactionORMDo {
	return i.Clauses(dbresolver.Read)
}

func (i investmentTransactionORMDo) WriteDB() IInvestmentTransactionORMDo {
	return i.Clauses(dbresolver.Write)
}

func (i investmentTransactionORMDo) Session(config *gorm.Session) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Session(config))
}

func (i investmentTransactionORMDo) Clauses(conds ...clause.Expression) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i investmentTransactionORMDo) Returning(value interface{}, columns ...string) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i investmentTransactionORMDo) Not(conds ...gen.Condition) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i investmentTransactionORMDo) Or(conds ...gen.Condition) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i investmentTransactionORMDo) Select(conds ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i investmentTransactionORMDo) Where(conds ...gen.Condition) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i investmentTransactionORMDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IInvestmentTransactionORMDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i investmentTransactionORMDo) Order(conds ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i investmentTransactionORMDo) Distinct(cols ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i investmentTransactionORMDo) Omit(cols ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i investmentTransactionORMDo) Join(table schema.Tabler, on ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i investmentTransactionORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i investmentTransactionORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i investmentTransactionORMDo) Group(cols ...field.Expr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i investmentTransactionORMDo) Having(conds ...gen.Condition) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i investmentTransactionORMDo) Limit(limit int) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i investmentTransactionORMDo) Offset(offset int) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i investmentTransactionORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i investmentTransactionORMDo) Unscoped() IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Unscoped())
}

func (i investmentTransactionORMDo) Create(values ...*financial_integration_service_apiv1.InvestmentTransactionORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i investmentTransactionORMDo) CreateInBatches(values []*financial_integration_service_apiv1.InvestmentTransactionORM, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i investmentTransactionORMDo) Save(values ...*financial_integration_service_apiv1.InvestmentTransactionORM) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i investmentTransactionORMDo) First() (*financial_integration_service_apiv1.InvestmentTransactionORM, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_integration_service_apiv1.InvestmentTransactionORM), nil
	}
}

func (i investmentTransactionORMDo) Take() (*financial_integration_service_apiv1.InvestmentTransactionORM, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_integration_service_apiv1.InvestmentTransactionORM), nil
	}
}

func (i investmentTransactionORMDo) Last() (*financial_integration_service_apiv1.InvestmentTransactionORM, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_integration_service_apiv1.InvestmentTransactionORM), nil
	}
}

func (i investmentTransactionORMDo) Find() ([]*financial_integration_service_apiv1.InvestmentTransactionORM, error) {
	result, err := i.DO.Find()
	return result.([]*financial_integration_service_apiv1.InvestmentTransactionORM), err
}

func (i investmentTransactionORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_integration_service_apiv1.InvestmentTransactionORM, err error) {
	buf := make([]*financial_integration_service_apiv1.InvestmentTransactionORM, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i investmentTransactionORMDo) FindInBatches(result *[]*financial_integration_service_apiv1.InvestmentTransactionORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i investmentTransactionORMDo) Attrs(attrs ...field.AssignExpr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i investmentTransactionORMDo) Assign(attrs ...field.AssignExpr) IInvestmentTransactionORMDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i investmentTransactionORMDo) Joins(fields ...field.RelationField) IInvestmentTransactionORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i investmentTransactionORMDo) Preload(fields ...field.RelationField) IInvestmentTransactionORMDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i investmentTransactionORMDo) FirstOrInit() (*financial_integration_service_apiv1.InvestmentTransactionORM, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_integration_service_apiv1.InvestmentTransactionORM), nil
	}
}

func (i investmentTransactionORMDo) FirstOrCreate() (*financial_integration_service_apiv1.InvestmentTransactionORM, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_integration_service_apiv1.InvestmentTransactionORM), nil
	}
}

func (i investmentTransactionORMDo) FindByPage(offset int, limit int) (result []*financial_integration_service_apiv1.InvestmentTransactionORM, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i investmentTransactionORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i investmentTransactionORMDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i investmentTransactionORMDo) Delete(models ...*financial_integration_service_apiv1.InvestmentTransactionORM) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *investmentTransactionORMDo) withDO(do gen.Dao) *investmentTransactionORMDo {
	i.DO = *do.(*gen.DO)
	return i
}
