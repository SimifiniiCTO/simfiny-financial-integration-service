// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: financial_integration_service_api/v1/request_response_financial_analytics_service.proto

package financial_integration_service_apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTransactionAggregatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionAggregatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionAggregatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionAggregatesRequestMultiError, or nil if none found.
func (m *GetTransactionAggregatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionAggregatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetTransactionAggregatesRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PersonalFinanceCategoryPrimary

	// no validation rules for LocationCity

	// no validation rules for PaymentChannel

	// no validation rules for MerchantName

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetTransactionAggregatesRequestMultiError(errors)
	}

	return nil
}

// GetTransactionAggregatesRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionAggregatesRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionAggregatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionAggregatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionAggregatesRequestMultiError) AllErrors() []error { return m }

// GetTransactionAggregatesRequestValidationError is the validation error
// returned by GetTransactionAggregatesRequest.Validate if the designated
// constraints aren't met.
type GetTransactionAggregatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionAggregatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionAggregatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionAggregatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionAggregatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionAggregatesRequestValidationError) ErrorName() string {
	return "GetTransactionAggregatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionAggregatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionAggregatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionAggregatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionAggregatesRequestValidationError{}

// Validate checks the field values on GetTransactionAggregatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTransactionAggregatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionAggregatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionAggregatesResponseMultiError, or nil if none found.
func (m *GetTransactionAggregatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionAggregatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactionAggregates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransactionAggregatesResponseValidationError{
						field:  fmt.Sprintf("TransactionAggregates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransactionAggregatesResponseValidationError{
						field:  fmt.Sprintf("TransactionAggregates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionAggregatesResponseValidationError{
					field:  fmt.Sprintf("TransactionAggregates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetTransactionAggregatesResponseMultiError(errors)
	}

	return nil
}

// GetTransactionAggregatesResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTransactionAggregatesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionAggregatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionAggregatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionAggregatesResponseMultiError) AllErrors() []error { return m }

// GetTransactionAggregatesResponseValidationError is the validation error
// returned by GetTransactionAggregatesResponse.Validate if the designated
// constraints aren't met.
type GetTransactionAggregatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionAggregatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionAggregatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionAggregatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionAggregatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionAggregatesResponseValidationError) ErrorName() string {
	return "GetTransactionAggregatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionAggregatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionAggregatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionAggregatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionAggregatesResponseValidationError{}

// Validate checks the field values on GetUserAccountBalanceHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserAccountBalanceHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountBalanceHistoryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserAccountBalanceHistoryRequestMultiError, or nil if none found.
func (m *GetUserAccountBalanceHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountBalanceHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserAccountBalanceHistoryRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserAccountBalanceHistoryRequestMultiError(errors)
	}

	return nil
}

// GetUserAccountBalanceHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserAccountBalanceHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountBalanceHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountBalanceHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountBalanceHistoryRequestMultiError) AllErrors() []error { return m }

// GetUserAccountBalanceHistoryRequestValidationError is the validation error
// returned by GetUserAccountBalanceHistoryRequest.Validate if the designated
// constraints aren't met.
type GetUserAccountBalanceHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountBalanceHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountBalanceHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountBalanceHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountBalanceHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountBalanceHistoryRequestValidationError) ErrorName() string {
	return "GetUserAccountBalanceHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountBalanceHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountBalanceHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountBalanceHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountBalanceHistoryRequestValidationError{}

// Validate checks the field values on GetUserAccountBalanceHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserAccountBalanceHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountBalanceHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserAccountBalanceHistoryResponseMultiError, or nil if none found.
func (m *GetUserAccountBalanceHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountBalanceHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccountBalanceHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserAccountBalanceHistoryResponseValidationError{
						field:  fmt.Sprintf("AccountBalanceHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserAccountBalanceHistoryResponseValidationError{
						field:  fmt.Sprintf("AccountBalanceHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserAccountBalanceHistoryResponseValidationError{
					field:  fmt.Sprintf("AccountBalanceHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserAccountBalanceHistoryResponseMultiError(errors)
	}

	return nil
}

// GetUserAccountBalanceHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserAccountBalanceHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountBalanceHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountBalanceHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountBalanceHistoryResponseMultiError) AllErrors() []error { return m }

// GetUserAccountBalanceHistoryResponseValidationError is the validation error
// returned by GetUserAccountBalanceHistoryResponse.Validate if the designated
// constraints aren't met.
type GetUserAccountBalanceHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountBalanceHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountBalanceHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountBalanceHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountBalanceHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountBalanceHistoryResponseValidationError) ErrorName() string {
	return "GetUserAccountBalanceHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountBalanceHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountBalanceHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountBalanceHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountBalanceHistoryResponseValidationError{}

// Validate checks the field values on GetAccountBalanceHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountBalanceHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountBalanceHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccountBalanceHistoryRequestMultiError, or nil if none found.
func (m *GetAccountBalanceHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountBalanceHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaidAccountId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetAccountBalanceHistoryRequestMultiError(errors)
	}

	return nil
}

// GetAccountBalanceHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetAccountBalanceHistoryRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAccountBalanceHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountBalanceHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountBalanceHistoryRequestMultiError) AllErrors() []error { return m }

// GetAccountBalanceHistoryRequestValidationError is the validation error
// returned by GetAccountBalanceHistoryRequest.Validate if the designated
// constraints aren't met.
type GetAccountBalanceHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountBalanceHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountBalanceHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountBalanceHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountBalanceHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountBalanceHistoryRequestValidationError) ErrorName() string {
	return "GetAccountBalanceHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountBalanceHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountBalanceHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountBalanceHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountBalanceHistoryRequestValidationError{}

// Validate checks the field values on GetAccountBalanceHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccountBalanceHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountBalanceHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccountBalanceHistoryResponseMultiError, or nil if none found.
func (m *GetAccountBalanceHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountBalanceHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccountBalanceHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountBalanceHistoryResponseValidationError{
						field:  fmt.Sprintf("AccountBalanceHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountBalanceHistoryResponseValidationError{
						field:  fmt.Sprintf("AccountBalanceHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountBalanceHistoryResponseValidationError{
					field:  fmt.Sprintf("AccountBalanceHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountBalanceHistoryResponseMultiError(errors)
	}

	return nil
}

// GetAccountBalanceHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAccountBalanceHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountBalanceHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountBalanceHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountBalanceHistoryResponseMultiError) AllErrors() []error { return m }

// GetAccountBalanceHistoryResponseValidationError is the validation error
// returned by GetAccountBalanceHistoryResponse.Validate if the designated
// constraints aren't met.
type GetAccountBalanceHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountBalanceHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountBalanceHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountBalanceHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountBalanceHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountBalanceHistoryResponseValidationError) ErrorName() string {
	return "GetAccountBalanceHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountBalanceHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountBalanceHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountBalanceHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountBalanceHistoryResponseValidationError{}

// Validate checks the field values on GetUserCategoryMonthlyExpenditureRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserCategoryMonthlyExpenditureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserCategoryMonthlyExpenditureRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserCategoryMonthlyExpenditureRequestMultiError, or nil if none found.
func (m *GetUserCategoryMonthlyExpenditureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCategoryMonthlyExpenditureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserCategoryMonthlyExpenditureRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PersonalFinanceCategoryPrimary

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserCategoryMonthlyExpenditureRequestMultiError(errors)
	}

	return nil
}

// GetUserCategoryMonthlyExpenditureRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetUserCategoryMonthlyExpenditureRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCategoryMonthlyExpenditureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCategoryMonthlyExpenditureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCategoryMonthlyExpenditureRequestMultiError) AllErrors() []error { return m }

// GetUserCategoryMonthlyExpenditureRequestValidationError is the validation
// error returned by GetUserCategoryMonthlyExpenditureRequest.Validate if the
// designated constraints aren't met.
type GetUserCategoryMonthlyExpenditureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCategoryMonthlyExpenditureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCategoryMonthlyExpenditureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCategoryMonthlyExpenditureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCategoryMonthlyExpenditureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCategoryMonthlyExpenditureRequestValidationError) ErrorName() string {
	return "GetUserCategoryMonthlyExpenditureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCategoryMonthlyExpenditureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCategoryMonthlyExpenditureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCategoryMonthlyExpenditureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCategoryMonthlyExpenditureRequestValidationError{}

// Validate checks the field values on
// GetUserCategoryMonthlyExpenditureResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserCategoryMonthlyExpenditureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserCategoryMonthlyExpenditureResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserCategoryMonthlyExpenditureResponseMultiError, or nil if none found.
func (m *GetUserCategoryMonthlyExpenditureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCategoryMonthlyExpenditureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategoryMonthlyExpenditure() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCategoryMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyExpenditure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCategoryMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyExpenditure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCategoryMonthlyExpenditureResponseValidationError{
					field:  fmt.Sprintf("CategoryMonthlyExpenditure[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetUserCategoryMonthlyExpenditureResponseMultiError(errors)
	}

	return nil
}

// GetUserCategoryMonthlyExpenditureResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserCategoryMonthlyExpenditureResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserCategoryMonthlyExpenditureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCategoryMonthlyExpenditureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCategoryMonthlyExpenditureResponseMultiError) AllErrors() []error { return m }

// GetUserCategoryMonthlyExpenditureResponseValidationError is the validation
// error returned by GetUserCategoryMonthlyExpenditureResponse.Validate if the
// designated constraints aren't met.
type GetUserCategoryMonthlyExpenditureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCategoryMonthlyExpenditureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCategoryMonthlyExpenditureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCategoryMonthlyExpenditureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCategoryMonthlyExpenditureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCategoryMonthlyExpenditureResponseValidationError) ErrorName() string {
	return "GetUserCategoryMonthlyExpenditureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCategoryMonthlyExpenditureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCategoryMonthlyExpenditureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCategoryMonthlyExpenditureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCategoryMonthlyExpenditureResponseValidationError{}

// Validate checks the field values on GetUserCategoryMonthlyIncomeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserCategoryMonthlyIncomeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCategoryMonthlyIncomeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserCategoryMonthlyIncomeRequestMultiError, or nil if none found.
func (m *GetUserCategoryMonthlyIncomeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCategoryMonthlyIncomeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserCategoryMonthlyIncomeRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PersonalFinanceCategoryPrimary

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetUserCategoryMonthlyIncomeRequestMultiError(errors)
	}

	return nil
}

// GetUserCategoryMonthlyIncomeRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserCategoryMonthlyIncomeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCategoryMonthlyIncomeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCategoryMonthlyIncomeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCategoryMonthlyIncomeRequestMultiError) AllErrors() []error { return m }

// GetUserCategoryMonthlyIncomeRequestValidationError is the validation error
// returned by GetUserCategoryMonthlyIncomeRequest.Validate if the designated
// constraints aren't met.
type GetUserCategoryMonthlyIncomeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCategoryMonthlyIncomeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCategoryMonthlyIncomeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCategoryMonthlyIncomeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCategoryMonthlyIncomeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCategoryMonthlyIncomeRequestValidationError) ErrorName() string {
	return "GetUserCategoryMonthlyIncomeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCategoryMonthlyIncomeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCategoryMonthlyIncomeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCategoryMonthlyIncomeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCategoryMonthlyIncomeRequestValidationError{}

// Validate checks the field values on GetUserCategoryMonthlyIncomeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserCategoryMonthlyIncomeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCategoryMonthlyIncomeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserCategoryMonthlyIncomeResponseMultiError, or nil if none found.
func (m *GetUserCategoryMonthlyIncomeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCategoryMonthlyIncomeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategoryMonthlyIncome() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCategoryMonthlyIncomeResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyIncome[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCategoryMonthlyIncomeResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyIncome[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCategoryMonthlyIncomeResponseValidationError{
					field:  fmt.Sprintf("CategoryMonthlyIncome[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetUserCategoryMonthlyIncomeResponseMultiError(errors)
	}

	return nil
}

// GetUserCategoryMonthlyIncomeResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserCategoryMonthlyIncomeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserCategoryMonthlyIncomeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCategoryMonthlyIncomeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCategoryMonthlyIncomeResponseMultiError) AllErrors() []error { return m }

// GetUserCategoryMonthlyIncomeResponseValidationError is the validation error
// returned by GetUserCategoryMonthlyIncomeResponse.Validate if the designated
// constraints aren't met.
type GetUserCategoryMonthlyIncomeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCategoryMonthlyIncomeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCategoryMonthlyIncomeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCategoryMonthlyIncomeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCategoryMonthlyIncomeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCategoryMonthlyIncomeResponseValidationError) ErrorName() string {
	return "GetUserCategoryMonthlyIncomeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCategoryMonthlyIncomeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCategoryMonthlyIncomeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCategoryMonthlyIncomeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCategoryMonthlyIncomeResponseValidationError{}

// Validate checks the field values on
// GetCategoryMonthlyTransactionCountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCategoryMonthlyTransactionCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCategoryMonthlyTransactionCountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCategoryMonthlyTransactionCountRequestMultiError, or nil if none found.
func (m *GetCategoryMonthlyTransactionCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryMonthlyTransactionCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetCategoryMonthlyTransactionCountRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PersonalFinanceCategoryPrimary

	if len(errors) > 0 {
		return GetCategoryMonthlyTransactionCountRequestMultiError(errors)
	}

	return nil
}

// GetCategoryMonthlyTransactionCountRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetCategoryMonthlyTransactionCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryMonthlyTransactionCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryMonthlyTransactionCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryMonthlyTransactionCountRequestMultiError) AllErrors() []error { return m }

// GetCategoryMonthlyTransactionCountRequestValidationError is the validation
// error returned by GetCategoryMonthlyTransactionCountRequest.Validate if the
// designated constraints aren't met.
type GetCategoryMonthlyTransactionCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryMonthlyTransactionCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryMonthlyTransactionCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryMonthlyTransactionCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryMonthlyTransactionCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryMonthlyTransactionCountRequestValidationError) ErrorName() string {
	return "GetCategoryMonthlyTransactionCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryMonthlyTransactionCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryMonthlyTransactionCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryMonthlyTransactionCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryMonthlyTransactionCountRequestValidationError{}

// Validate checks the field values on
// GetCategoryMonthlyTransactionCountResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCategoryMonthlyTransactionCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCategoryMonthlyTransactionCountResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCategoryMonthlyTransactionCountResponseMultiError, or nil if none found.
func (m *GetCategoryMonthlyTransactionCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryMonthlyTransactionCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategoryMonthlyTransactionCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoryMonthlyTransactionCountResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyTransactionCount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoryMonthlyTransactionCountResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyTransactionCount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoryMonthlyTransactionCountResponseValidationError{
					field:  fmt.Sprintf("CategoryMonthlyTransactionCount[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCategoryMonthlyTransactionCountResponseMultiError(errors)
	}

	return nil
}

// GetCategoryMonthlyTransactionCountResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetCategoryMonthlyTransactionCountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryMonthlyTransactionCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryMonthlyTransactionCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryMonthlyTransactionCountResponseMultiError) AllErrors() []error { return m }

// GetCategoryMonthlyTransactionCountResponseValidationError is the validation
// error returned by GetCategoryMonthlyTransactionCountResponse.Validate if
// the designated constraints aren't met.
type GetCategoryMonthlyTransactionCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryMonthlyTransactionCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryMonthlyTransactionCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryMonthlyTransactionCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryMonthlyTransactionCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryMonthlyTransactionCountResponseValidationError) ErrorName() string {
	return "GetCategoryMonthlyTransactionCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryMonthlyTransactionCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryMonthlyTransactionCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryMonthlyTransactionCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryMonthlyTransactionCountResponseValidationError{}

// Validate checks the field values on
// ListCategoryMonthlyTransactionCountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCategoryMonthlyTransactionCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCategoryMonthlyTransactionCountRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCategoryMonthlyTransactionCountRequestMultiError, or nil if none found.
func (m *ListCategoryMonthlyTransactionCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoryMonthlyTransactionCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListCategoryMonthlyTransactionCountRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCategoryMonthlyTransactionCountRequestMultiError(errors)
	}

	return nil
}

// ListCategoryMonthlyTransactionCountRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListCategoryMonthlyTransactionCountRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoryMonthlyTransactionCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoryMonthlyTransactionCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoryMonthlyTransactionCountRequestMultiError) AllErrors() []error { return m }

// ListCategoryMonthlyTransactionCountRequestValidationError is the validation
// error returned by ListCategoryMonthlyTransactionCountRequest.Validate if
// the designated constraints aren't met.
type ListCategoryMonthlyTransactionCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoryMonthlyTransactionCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoryMonthlyTransactionCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoryMonthlyTransactionCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoryMonthlyTransactionCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoryMonthlyTransactionCountRequestValidationError) ErrorName() string {
	return "ListCategoryMonthlyTransactionCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoryMonthlyTransactionCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoryMonthlyTransactionCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoryMonthlyTransactionCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoryMonthlyTransactionCountRequestValidationError{}

// Validate checks the field values on
// ListCategoryMonthlyTransactionCountResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCategoryMonthlyTransactionCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCategoryMonthlyTransactionCountResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCategoryMonthlyTransactionCountResponseMultiError, or nil if none found.
func (m *ListCategoryMonthlyTransactionCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoryMonthlyTransactionCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategoryMonthlyTransactionCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoryMonthlyTransactionCountResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyTransactionCount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoryMonthlyTransactionCountResponseValidationError{
						field:  fmt.Sprintf("CategoryMonthlyTransactionCount[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoryMonthlyTransactionCountResponseValidationError{
					field:  fmt.Sprintf("CategoryMonthlyTransactionCount[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListCategoryMonthlyTransactionCountResponseMultiError(errors)
	}

	return nil
}

// ListCategoryMonthlyTransactionCountResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListCategoryMonthlyTransactionCountResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoryMonthlyTransactionCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoryMonthlyTransactionCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoryMonthlyTransactionCountResponseMultiError) AllErrors() []error { return m }

// ListCategoryMonthlyTransactionCountResponseValidationError is the validation
// error returned by ListCategoryMonthlyTransactionCountResponse.Validate if
// the designated constraints aren't met.
type ListCategoryMonthlyTransactionCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoryMonthlyTransactionCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoryMonthlyTransactionCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoryMonthlyTransactionCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoryMonthlyTransactionCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoryMonthlyTransactionCountResponseValidationError) ErrorName() string {
	return "ListCategoryMonthlyTransactionCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoryMonthlyTransactionCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoryMonthlyTransactionCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoryMonthlyTransactionCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoryMonthlyTransactionCountResponseValidationError{}

// Validate checks the field values on GetDebtToIncomeRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebtToIncomeRatioRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebtToIncomeRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDebtToIncomeRatioRequestMultiError, or nil if none found.
func (m *GetDebtToIncomeRatioRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebtToIncomeRatioRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetDebtToIncomeRatioRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	if len(errors) > 0 {
		return GetDebtToIncomeRatioRequestMultiError(errors)
	}

	return nil
}

// GetDebtToIncomeRatioRequestMultiError is an error wrapping multiple
// validation errors returned by GetDebtToIncomeRatioRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDebtToIncomeRatioRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebtToIncomeRatioRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebtToIncomeRatioRequestMultiError) AllErrors() []error { return m }

// GetDebtToIncomeRatioRequestValidationError is the validation error returned
// by GetDebtToIncomeRatioRequest.Validate if the designated constraints
// aren't met.
type GetDebtToIncomeRatioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebtToIncomeRatioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebtToIncomeRatioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebtToIncomeRatioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebtToIncomeRatioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebtToIncomeRatioRequestValidationError) ErrorName() string {
	return "GetDebtToIncomeRatioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebtToIncomeRatioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebtToIncomeRatioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebtToIncomeRatioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebtToIncomeRatioRequestValidationError{}

// Validate checks the field values on GetDebtToIncomeRatioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDebtToIncomeRatioResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDebtToIncomeRatioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDebtToIncomeRatioResponseMultiError, or nil if none found.
func (m *GetDebtToIncomeRatioResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDebtToIncomeRatioResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDebtToIncomeRatios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDebtToIncomeRatioResponseValidationError{
						field:  fmt.Sprintf("DebtToIncomeRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDebtToIncomeRatioResponseValidationError{
						field:  fmt.Sprintf("DebtToIncomeRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDebtToIncomeRatioResponseValidationError{
					field:  fmt.Sprintf("DebtToIncomeRatios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDebtToIncomeRatioResponseMultiError(errors)
	}

	return nil
}

// GetDebtToIncomeRatioResponseMultiError is an error wrapping multiple
// validation errors returned by GetDebtToIncomeRatioResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDebtToIncomeRatioResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDebtToIncomeRatioResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDebtToIncomeRatioResponseMultiError) AllErrors() []error { return m }

// GetDebtToIncomeRatioResponseValidationError is the validation error returned
// by GetDebtToIncomeRatioResponse.Validate if the designated constraints
// aren't met.
type GetDebtToIncomeRatioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDebtToIncomeRatioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDebtToIncomeRatioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDebtToIncomeRatioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDebtToIncomeRatioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDebtToIncomeRatioResponseValidationError) ErrorName() string {
	return "GetDebtToIncomeRatioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDebtToIncomeRatioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDebtToIncomeRatioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDebtToIncomeRatioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDebtToIncomeRatioResponseValidationError{}

// Validate checks the field values on ListDebtToIncomeRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDebtToIncomeRatioRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDebtToIncomeRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDebtToIncomeRatioRequestMultiError, or nil if none found.
func (m *ListDebtToIncomeRatioRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDebtToIncomeRatioRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListDebtToIncomeRatioRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListDebtToIncomeRatioRequestMultiError(errors)
	}

	return nil
}

// ListDebtToIncomeRatioRequestMultiError is an error wrapping multiple
// validation errors returned by ListDebtToIncomeRatioRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDebtToIncomeRatioRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDebtToIncomeRatioRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDebtToIncomeRatioRequestMultiError) AllErrors() []error { return m }

// ListDebtToIncomeRatioRequestValidationError is the validation error returned
// by ListDebtToIncomeRatioRequest.Validate if the designated constraints
// aren't met.
type ListDebtToIncomeRatioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDebtToIncomeRatioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDebtToIncomeRatioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDebtToIncomeRatioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDebtToIncomeRatioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDebtToIncomeRatioRequestValidationError) ErrorName() string {
	return "ListDebtToIncomeRatioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDebtToIncomeRatioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDebtToIncomeRatioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDebtToIncomeRatioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDebtToIncomeRatioRequestValidationError{}

// Validate checks the field values on ListDebtToIncomeRatioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDebtToIncomeRatioResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDebtToIncomeRatioResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDebtToIncomeRatioResponseMultiError, or nil if none found.
func (m *ListDebtToIncomeRatioResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDebtToIncomeRatioResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDebtToIncomeRatios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDebtToIncomeRatioResponseValidationError{
						field:  fmt.Sprintf("DebtToIncomeRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDebtToIncomeRatioResponseValidationError{
						field:  fmt.Sprintf("DebtToIncomeRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDebtToIncomeRatioResponseValidationError{
					field:  fmt.Sprintf("DebtToIncomeRatios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListDebtToIncomeRatioResponseMultiError(errors)
	}

	return nil
}

// ListDebtToIncomeRatioResponseMultiError is an error wrapping multiple
// validation errors returned by ListDebtToIncomeRatioResponse.ValidateAll()
// if the designated constraints aren't met.
type ListDebtToIncomeRatioResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDebtToIncomeRatioResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDebtToIncomeRatioResponseMultiError) AllErrors() []error { return m }

// ListDebtToIncomeRatioResponseValidationError is the validation error
// returned by ListDebtToIncomeRatioResponse.Validate if the designated
// constraints aren't met.
type ListDebtToIncomeRatioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDebtToIncomeRatioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDebtToIncomeRatioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDebtToIncomeRatioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDebtToIncomeRatioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDebtToIncomeRatioResponseValidationError) ErrorName() string {
	return "ListDebtToIncomeRatioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDebtToIncomeRatioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDebtToIncomeRatioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDebtToIncomeRatioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDebtToIncomeRatioResponseValidationError{}

// Validate checks the field values on GetExpenseMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExpenseMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExpenseMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExpenseMetricsRequestMultiError, or nil if none found.
func (m *GetExpenseMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExpenseMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetExpenseMetricsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PersonalFinanceCategoryPrimary

	if len(errors) > 0 {
		return GetExpenseMetricsRequestMultiError(errors)
	}

	return nil
}

// GetExpenseMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by GetExpenseMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExpenseMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExpenseMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExpenseMetricsRequestMultiError) AllErrors() []error { return m }

// GetExpenseMetricsRequestValidationError is the validation error returned by
// GetExpenseMetricsRequest.Validate if the designated constraints aren't met.
type GetExpenseMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExpenseMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExpenseMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExpenseMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExpenseMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExpenseMetricsRequestValidationError) ErrorName() string {
	return "GetExpenseMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExpenseMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExpenseMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExpenseMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExpenseMetricsRequestValidationError{}

// Validate checks the field values on GetExpenseMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExpenseMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExpenseMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExpenseMetricsResponseMultiError, or nil if none found.
func (m *GetExpenseMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExpenseMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExpenseMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetExpenseMetricsResponseValidationError{
						field:  fmt.Sprintf("ExpenseMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetExpenseMetricsResponseValidationError{
						field:  fmt.Sprintf("ExpenseMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetExpenseMetricsResponseValidationError{
					field:  fmt.Sprintf("ExpenseMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetExpenseMetricsResponseMultiError(errors)
	}

	return nil
}

// GetExpenseMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by GetExpenseMetricsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetExpenseMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExpenseMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExpenseMetricsResponseMultiError) AllErrors() []error { return m }

// GetExpenseMetricsResponseValidationError is the validation error returned by
// GetExpenseMetricsResponse.Validate if the designated constraints aren't met.
type GetExpenseMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExpenseMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExpenseMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExpenseMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExpenseMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExpenseMetricsResponseValidationError) ErrorName() string {
	return "GetExpenseMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExpenseMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExpenseMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExpenseMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExpenseMetricsResponseValidationError{}

// Validate checks the field values on ListExpenseMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExpenseMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExpenseMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExpenseMetricsRequestMultiError, or nil if none found.
func (m *ListExpenseMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExpenseMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListExpenseMetricsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListExpenseMetricsRequestMultiError(errors)
	}

	return nil
}

// ListExpenseMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by ListExpenseMetricsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListExpenseMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExpenseMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExpenseMetricsRequestMultiError) AllErrors() []error { return m }

// ListExpenseMetricsRequestValidationError is the validation error returned by
// ListExpenseMetricsRequest.Validate if the designated constraints aren't met.
type ListExpenseMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExpenseMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExpenseMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExpenseMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExpenseMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExpenseMetricsRequestValidationError) ErrorName() string {
	return "ListExpenseMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListExpenseMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExpenseMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExpenseMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExpenseMetricsRequestValidationError{}

// Validate checks the field values on ListExpenseMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExpenseMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExpenseMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExpenseMetricsResponseMultiError, or nil if none found.
func (m *ListExpenseMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExpenseMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExpenseMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListExpenseMetricsResponseValidationError{
						field:  fmt.Sprintf("ExpenseMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListExpenseMetricsResponseValidationError{
						field:  fmt.Sprintf("ExpenseMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListExpenseMetricsResponseValidationError{
					field:  fmt.Sprintf("ExpenseMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListExpenseMetricsResponseMultiError(errors)
	}

	return nil
}

// ListExpenseMetricsResponseMultiError is an error wrapping multiple
// validation errors returned by ListExpenseMetricsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListExpenseMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExpenseMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExpenseMetricsResponseMultiError) AllErrors() []error { return m }

// ListExpenseMetricsResponseValidationError is the validation error returned
// by ListExpenseMetricsResponse.Validate if the designated constraints aren't met.
type ListExpenseMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExpenseMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExpenseMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExpenseMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExpenseMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExpenseMetricsResponseValidationError) ErrorName() string {
	return "ListExpenseMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListExpenseMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExpenseMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExpenseMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExpenseMetricsResponseValidationError{}

// Validate checks the field values on GetFinancialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFinancialProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFinancialProfileRequestMultiError, or nil if none found.
func (m *GetFinancialProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetFinancialProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	if len(errors) > 0 {
		return GetFinancialProfileRequestMultiError(errors)
	}

	return nil
}

// GetFinancialProfileRequestMultiError is an error wrapping multiple
// validation errors returned by GetFinancialProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFinancialProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialProfileRequestMultiError) AllErrors() []error { return m }

// GetFinancialProfileRequestValidationError is the validation error returned
// by GetFinancialProfileRequest.Validate if the designated constraints aren't met.
type GetFinancialProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialProfileRequestValidationError) ErrorName() string {
	return "GetFinancialProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialProfileRequestValidationError{}

// Validate checks the field values on GetFinancialProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFinancialProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFinancialProfileResponseMultiError, or nil if none found.
func (m *GetFinancialProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFinancialProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFinancialProfileResponseValidationError{
						field:  fmt.Sprintf("FinancialProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFinancialProfileResponseValidationError{
						field:  fmt.Sprintf("FinancialProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFinancialProfileResponseValidationError{
					field:  fmt.Sprintf("FinancialProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFinancialProfileResponseMultiError(errors)
	}

	return nil
}

// GetFinancialProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetFinancialProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFinancialProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialProfileResponseMultiError) AllErrors() []error { return m }

// GetFinancialProfileResponseValidationError is the validation error returned
// by GetFinancialProfileResponse.Validate if the designated constraints
// aren't met.
type GetFinancialProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialProfileResponseValidationError) ErrorName() string {
	return "GetFinancialProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialProfileResponseValidationError{}

// Validate checks the field values on ListFinancialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFinancialProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFinancialProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFinancialProfileRequestMultiError, or nil if none found.
func (m *ListFinancialProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFinancialProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListFinancialProfileRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListFinancialProfileRequestMultiError(errors)
	}

	return nil
}

// ListFinancialProfileRequestMultiError is an error wrapping multiple
// validation errors returned by ListFinancialProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type ListFinancialProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFinancialProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFinancialProfileRequestMultiError) AllErrors() []error { return m }

// ListFinancialProfileRequestValidationError is the validation error returned
// by ListFinancialProfileRequest.Validate if the designated constraints
// aren't met.
type ListFinancialProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFinancialProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFinancialProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFinancialProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFinancialProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFinancialProfileRequestValidationError) ErrorName() string {
	return "ListFinancialProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFinancialProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFinancialProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFinancialProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFinancialProfileRequestValidationError{}

// Validate checks the field values on ListFinancialProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFinancialProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFinancialProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFinancialProfileResponseMultiError, or nil if none found.
func (m *ListFinancialProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFinancialProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFinancialProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFinancialProfileResponseValidationError{
						field:  fmt.Sprintf("FinancialProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFinancialProfileResponseValidationError{
						field:  fmt.Sprintf("FinancialProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFinancialProfileResponseValidationError{
					field:  fmt.Sprintf("FinancialProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListFinancialProfileResponseMultiError(errors)
	}

	return nil
}

// ListFinancialProfileResponseMultiError is an error wrapping multiple
// validation errors returned by ListFinancialProfileResponse.ValidateAll() if
// the designated constraints aren't met.
type ListFinancialProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFinancialProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFinancialProfileResponseMultiError) AllErrors() []error { return m }

// ListFinancialProfileResponseValidationError is the validation error returned
// by ListFinancialProfileResponse.Validate if the designated constraints
// aren't met.
type ListFinancialProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFinancialProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFinancialProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFinancialProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFinancialProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFinancialProfileResponseValidationError) ErrorName() string {
	return "ListFinancialProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFinancialProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFinancialProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFinancialProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFinancialProfileResponseValidationError{}

// Validate checks the field values on GetIncomeExpenseRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncomeExpenseRatioRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncomeExpenseRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncomeExpenseRatioRequestMultiError, or nil if none found.
func (m *GetIncomeExpenseRatioRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncomeExpenseRatioRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetIncomeExpenseRatioRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	if len(errors) > 0 {
		return GetIncomeExpenseRatioRequestMultiError(errors)
	}

	return nil
}

// GetIncomeExpenseRatioRequestMultiError is an error wrapping multiple
// validation errors returned by GetIncomeExpenseRatioRequest.ValidateAll() if
// the designated constraints aren't met.
type GetIncomeExpenseRatioRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncomeExpenseRatioRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncomeExpenseRatioRequestMultiError) AllErrors() []error { return m }

// GetIncomeExpenseRatioRequestValidationError is the validation error returned
// by GetIncomeExpenseRatioRequest.Validate if the designated constraints
// aren't met.
type GetIncomeExpenseRatioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncomeExpenseRatioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncomeExpenseRatioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncomeExpenseRatioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncomeExpenseRatioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncomeExpenseRatioRequestValidationError) ErrorName() string {
	return "GetIncomeExpenseRatioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncomeExpenseRatioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncomeExpenseRatioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncomeExpenseRatioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncomeExpenseRatioRequestValidationError{}

// Validate checks the field values on GetIncomeExpenseRatioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncomeExpenseRatioResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncomeExpenseRatioResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIncomeExpenseRatioResponseMultiError, or nil if none found.
func (m *GetIncomeExpenseRatioResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncomeExpenseRatioResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIncomeExpenseRatios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncomeExpenseRatioResponseValidationError{
						field:  fmt.Sprintf("IncomeExpenseRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncomeExpenseRatioResponseValidationError{
						field:  fmt.Sprintf("IncomeExpenseRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncomeExpenseRatioResponseValidationError{
					field:  fmt.Sprintf("IncomeExpenseRatios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIncomeExpenseRatioResponseMultiError(errors)
	}

	return nil
}

// GetIncomeExpenseRatioResponseMultiError is an error wrapping multiple
// validation errors returned by GetIncomeExpenseRatioResponse.ValidateAll()
// if the designated constraints aren't met.
type GetIncomeExpenseRatioResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncomeExpenseRatioResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncomeExpenseRatioResponseMultiError) AllErrors() []error { return m }

// GetIncomeExpenseRatioResponseValidationError is the validation error
// returned by GetIncomeExpenseRatioResponse.Validate if the designated
// constraints aren't met.
type GetIncomeExpenseRatioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncomeExpenseRatioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncomeExpenseRatioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncomeExpenseRatioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncomeExpenseRatioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncomeExpenseRatioResponseValidationError) ErrorName() string {
	return "GetIncomeExpenseRatioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncomeExpenseRatioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncomeExpenseRatioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncomeExpenseRatioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncomeExpenseRatioResponseValidationError{}

// Validate checks the field values on ListIncomeExpenseRatioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIncomeExpenseRatioRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIncomeExpenseRatioRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListIncomeExpenseRatioRequestMultiError, or nil if none found.
func (m *ListIncomeExpenseRatioRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIncomeExpenseRatioRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListIncomeExpenseRatioRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListIncomeExpenseRatioRequestMultiError(errors)
	}

	return nil
}

// ListIncomeExpenseRatioRequestMultiError is an error wrapping multiple
// validation errors returned by ListIncomeExpenseRatioRequest.ValidateAll()
// if the designated constraints aren't met.
type ListIncomeExpenseRatioRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIncomeExpenseRatioRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIncomeExpenseRatioRequestMultiError) AllErrors() []error { return m }

// ListIncomeExpenseRatioRequestValidationError is the validation error
// returned by ListIncomeExpenseRatioRequest.Validate if the designated
// constraints aren't met.
type ListIncomeExpenseRatioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIncomeExpenseRatioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIncomeExpenseRatioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIncomeExpenseRatioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIncomeExpenseRatioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIncomeExpenseRatioRequestValidationError) ErrorName() string {
	return "ListIncomeExpenseRatioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIncomeExpenseRatioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIncomeExpenseRatioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIncomeExpenseRatioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIncomeExpenseRatioRequestValidationError{}

// Validate checks the field values on ListIncomeExpenseRatioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIncomeExpenseRatioResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIncomeExpenseRatioResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListIncomeExpenseRatioResponseMultiError, or nil if none found.
func (m *ListIncomeExpenseRatioResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIncomeExpenseRatioResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIncomeExpenseRatios() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIncomeExpenseRatioResponseValidationError{
						field:  fmt.Sprintf("IncomeExpenseRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIncomeExpenseRatioResponseValidationError{
						field:  fmt.Sprintf("IncomeExpenseRatios[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIncomeExpenseRatioResponseValidationError{
					field:  fmt.Sprintf("IncomeExpenseRatios[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListIncomeExpenseRatioResponseMultiError(errors)
	}

	return nil
}

// ListIncomeExpenseRatioResponseMultiError is an error wrapping multiple
// validation errors returned by ListIncomeExpenseRatioResponse.ValidateAll()
// if the designated constraints aren't met.
type ListIncomeExpenseRatioResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIncomeExpenseRatioResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIncomeExpenseRatioResponseMultiError) AllErrors() []error { return m }

// ListIncomeExpenseRatioResponseValidationError is the validation error
// returned by ListIncomeExpenseRatioResponse.Validate if the designated
// constraints aren't met.
type ListIncomeExpenseRatioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIncomeExpenseRatioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIncomeExpenseRatioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIncomeExpenseRatioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIncomeExpenseRatioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIncomeExpenseRatioResponseValidationError) ErrorName() string {
	return "ListIncomeExpenseRatioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIncomeExpenseRatioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIncomeExpenseRatioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIncomeExpenseRatioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIncomeExpenseRatioResponseValidationError{}

// Validate checks the field values on GetIncomeMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncomeMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncomeMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncomeMetricsRequestMultiError, or nil if none found.
func (m *GetIncomeMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncomeMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetIncomeMetricsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PersonalFinanceCategoryPrimary

	if len(errors) > 0 {
		return GetIncomeMetricsRequestMultiError(errors)
	}

	return nil
}

// GetIncomeMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by GetIncomeMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIncomeMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncomeMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncomeMetricsRequestMultiError) AllErrors() []error { return m }

// GetIncomeMetricsRequestValidationError is the validation error returned by
// GetIncomeMetricsRequest.Validate if the designated constraints aren't met.
type GetIncomeMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncomeMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncomeMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncomeMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncomeMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncomeMetricsRequestValidationError) ErrorName() string {
	return "GetIncomeMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncomeMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncomeMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncomeMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncomeMetricsRequestValidationError{}

// Validate checks the field values on GetIncomeMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIncomeMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIncomeMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIncomeMetricsResponseMultiError, or nil if none found.
func (m *GetIncomeMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIncomeMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIncomeMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIncomeMetricsResponseValidationError{
						field:  fmt.Sprintf("IncomeMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIncomeMetricsResponseValidationError{
						field:  fmt.Sprintf("IncomeMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncomeMetricsResponseValidationError{
					field:  fmt.Sprintf("IncomeMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIncomeMetricsResponseMultiError(errors)
	}

	return nil
}

// GetIncomeMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by GetIncomeMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIncomeMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIncomeMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIncomeMetricsResponseMultiError) AllErrors() []error { return m }

// GetIncomeMetricsResponseValidationError is the validation error returned by
// GetIncomeMetricsResponse.Validate if the designated constraints aren't met.
type GetIncomeMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncomeMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncomeMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncomeMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncomeMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncomeMetricsResponseValidationError) ErrorName() string {
	return "GetIncomeMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncomeMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncomeMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncomeMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncomeMetricsResponseValidationError{}

// Validate checks the field values on ListIncomeMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIncomeMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIncomeMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIncomeMetricsRequestMultiError, or nil if none found.
func (m *ListIncomeMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIncomeMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListIncomeMetricsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListIncomeMetricsRequestMultiError(errors)
	}

	return nil
}

// ListIncomeMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by ListIncomeMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListIncomeMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIncomeMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIncomeMetricsRequestMultiError) AllErrors() []error { return m }

// ListIncomeMetricsRequestValidationError is the validation error returned by
// ListIncomeMetricsRequest.Validate if the designated constraints aren't met.
type ListIncomeMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIncomeMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIncomeMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIncomeMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIncomeMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIncomeMetricsRequestValidationError) ErrorName() string {
	return "ListIncomeMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIncomeMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIncomeMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIncomeMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIncomeMetricsRequestValidationError{}

// Validate checks the field values on ListIncomeMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIncomeMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIncomeMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIncomeMetricsResponseMultiError, or nil if none found.
func (m *ListIncomeMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIncomeMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIncomeMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIncomeMetricsResponseValidationError{
						field:  fmt.Sprintf("IncomeMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIncomeMetricsResponseValidationError{
						field:  fmt.Sprintf("IncomeMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIncomeMetricsResponseValidationError{
					field:  fmt.Sprintf("IncomeMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListIncomeMetricsResponseMultiError(errors)
	}

	return nil
}

// ListIncomeMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by ListIncomeMetricsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListIncomeMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIncomeMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIncomeMetricsResponseMultiError) AllErrors() []error { return m }

// ListIncomeMetricsResponseValidationError is the validation error returned by
// ListIncomeMetricsResponse.Validate if the designated constraints aren't met.
type ListIncomeMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIncomeMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIncomeMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIncomeMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIncomeMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIncomeMetricsResponseValidationError) ErrorName() string {
	return "ListIncomeMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIncomeMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIncomeMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIncomeMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIncomeMetricsResponseValidationError{}

// Validate checks the field values on GetMerchantMonthlyExpenditureRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetMerchantMonthlyExpenditureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantMonthlyExpenditureRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMerchantMonthlyExpenditureRequestMultiError, or nil if none found.
func (m *GetMerchantMonthlyExpenditureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantMonthlyExpenditureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMerchantMonthlyExpenditureRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for MerchantName

	if len(errors) > 0 {
		return GetMerchantMonthlyExpenditureRequestMultiError(errors)
	}

	return nil
}

// GetMerchantMonthlyExpenditureRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetMerchantMonthlyExpenditureRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMerchantMonthlyExpenditureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantMonthlyExpenditureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantMonthlyExpenditureRequestMultiError) AllErrors() []error { return m }

// GetMerchantMonthlyExpenditureRequestValidationError is the validation error
// returned by GetMerchantMonthlyExpenditureRequest.Validate if the designated
// constraints aren't met.
type GetMerchantMonthlyExpenditureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantMonthlyExpenditureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantMonthlyExpenditureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantMonthlyExpenditureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantMonthlyExpenditureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantMonthlyExpenditureRequestValidationError) ErrorName() string {
	return "GetMerchantMonthlyExpenditureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantMonthlyExpenditureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantMonthlyExpenditureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantMonthlyExpenditureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantMonthlyExpenditureRequestValidationError{}

// Validate checks the field values on GetMerchantMonthlyExpenditureResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetMerchantMonthlyExpenditureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantMonthlyExpenditureResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMerchantMonthlyExpenditureResponseMultiError, or nil if none found.
func (m *GetMerchantMonthlyExpenditureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantMonthlyExpenditureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMerchantMonthlyExpenditures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMerchantMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("MerchantMonthlyExpenditures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMerchantMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("MerchantMonthlyExpenditures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMerchantMonthlyExpenditureResponseValidationError{
					field:  fmt.Sprintf("MerchantMonthlyExpenditures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMerchantMonthlyExpenditureResponseMultiError(errors)
	}

	return nil
}

// GetMerchantMonthlyExpenditureResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetMerchantMonthlyExpenditureResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMerchantMonthlyExpenditureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantMonthlyExpenditureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantMonthlyExpenditureResponseMultiError) AllErrors() []error { return m }

// GetMerchantMonthlyExpenditureResponseValidationError is the validation error
// returned by GetMerchantMonthlyExpenditureResponse.Validate if the
// designated constraints aren't met.
type GetMerchantMonthlyExpenditureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantMonthlyExpenditureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantMonthlyExpenditureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantMonthlyExpenditureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantMonthlyExpenditureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantMonthlyExpenditureResponseValidationError) ErrorName() string {
	return "GetMerchantMonthlyExpenditureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantMonthlyExpenditureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantMonthlyExpenditureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantMonthlyExpenditureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantMonthlyExpenditureResponseValidationError{}

// Validate checks the field values on ListMerchantMonthlyExpenditureRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListMerchantMonthlyExpenditureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMerchantMonthlyExpenditureRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListMerchantMonthlyExpenditureRequestMultiError, or nil if none found.
func (m *ListMerchantMonthlyExpenditureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMerchantMonthlyExpenditureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListMerchantMonthlyExpenditureRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListMerchantMonthlyExpenditureRequestMultiError(errors)
	}

	return nil
}

// ListMerchantMonthlyExpenditureRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListMerchantMonthlyExpenditureRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMerchantMonthlyExpenditureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMerchantMonthlyExpenditureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMerchantMonthlyExpenditureRequestMultiError) AllErrors() []error { return m }

// ListMerchantMonthlyExpenditureRequestValidationError is the validation error
// returned by ListMerchantMonthlyExpenditureRequest.Validate if the
// designated constraints aren't met.
type ListMerchantMonthlyExpenditureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantMonthlyExpenditureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantMonthlyExpenditureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantMonthlyExpenditureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantMonthlyExpenditureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantMonthlyExpenditureRequestValidationError) ErrorName() string {
	return "ListMerchantMonthlyExpenditureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantMonthlyExpenditureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantMonthlyExpenditureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantMonthlyExpenditureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantMonthlyExpenditureRequestValidationError{}

// Validate checks the field values on ListMerchantMonthlyExpenditureResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListMerchantMonthlyExpenditureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMerchantMonthlyExpenditureResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListMerchantMonthlyExpenditureResponseMultiError, or nil if none found.
func (m *ListMerchantMonthlyExpenditureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMerchantMonthlyExpenditureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMerchantMonthlyExpenditures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMerchantMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("MerchantMonthlyExpenditures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMerchantMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("MerchantMonthlyExpenditures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMerchantMonthlyExpenditureResponseValidationError{
					field:  fmt.Sprintf("MerchantMonthlyExpenditures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return ListMerchantMonthlyExpenditureResponseMultiError(errors)
	}

	return nil
}

// ListMerchantMonthlyExpenditureResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListMerchantMonthlyExpenditureResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMerchantMonthlyExpenditureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMerchantMonthlyExpenditureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMerchantMonthlyExpenditureResponseMultiError) AllErrors() []error { return m }

// ListMerchantMonthlyExpenditureResponseValidationError is the validation
// error returned by ListMerchantMonthlyExpenditureResponse.Validate if the
// designated constraints aren't met.
type ListMerchantMonthlyExpenditureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantMonthlyExpenditureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantMonthlyExpenditureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantMonthlyExpenditureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantMonthlyExpenditureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantMonthlyExpenditureResponseValidationError) ErrorName() string {
	return "ListMerchantMonthlyExpenditureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantMonthlyExpenditureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantMonthlyExpenditureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantMonthlyExpenditureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantMonthlyExpenditureResponseValidationError{}

// Validate checks the field values on GetMonthlyBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyBalanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlyBalanceRequestMultiError, or nil if none found.
func (m *GetMonthlyBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMonthlyBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMonthlyBalanceRequestMultiError(errors)
	}

	return nil
}

// GetMonthlyBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetMonthlyBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMonthlyBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyBalanceRequestMultiError) AllErrors() []error { return m }

// GetMonthlyBalanceRequestValidationError is the validation error returned by
// GetMonthlyBalanceRequest.Validate if the designated constraints aren't met.
type GetMonthlyBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyBalanceRequestValidationError) ErrorName() string {
	return "GetMonthlyBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyBalanceRequestValidationError{}

// Validate checks the field values on GetMonthlyBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyBalanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlyBalanceResponseMultiError, or nil if none found.
func (m *GetMonthlyBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonthlyBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMonthlyBalanceResponseValidationError{
						field:  fmt.Sprintf("MonthlyBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMonthlyBalanceResponseValidationError{
						field:  fmt.Sprintf("MonthlyBalances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMonthlyBalanceResponseValidationError{
					field:  fmt.Sprintf("MonthlyBalances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetMonthlyBalanceResponseMultiError(errors)
	}

	return nil
}

// GetMonthlyBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetMonthlyBalanceResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMonthlyBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyBalanceResponseMultiError) AllErrors() []error { return m }

// GetMonthlyBalanceResponseValidationError is the validation error returned by
// GetMonthlyBalanceResponse.Validate if the designated constraints aren't met.
type GetMonthlyBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyBalanceResponseValidationError) ErrorName() string {
	return "GetMonthlyBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyBalanceResponseValidationError{}

// Validate checks the field values on GetMonthlyExpenditureRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyExpenditureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyExpenditureRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlyExpenditureRequestMultiError, or nil if none found.
func (m *GetMonthlyExpenditureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyExpenditureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMonthlyExpenditureRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMonthlyExpenditureRequestMultiError(errors)
	}

	return nil
}

// GetMonthlyExpenditureRequestMultiError is an error wrapping multiple
// validation errors returned by GetMonthlyExpenditureRequest.ValidateAll() if
// the designated constraints aren't met.
type GetMonthlyExpenditureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyExpenditureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyExpenditureRequestMultiError) AllErrors() []error { return m }

// GetMonthlyExpenditureRequestValidationError is the validation error returned
// by GetMonthlyExpenditureRequest.Validate if the designated constraints
// aren't met.
type GetMonthlyExpenditureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyExpenditureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyExpenditureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyExpenditureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyExpenditureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyExpenditureRequestValidationError) ErrorName() string {
	return "GetMonthlyExpenditureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyExpenditureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyExpenditureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyExpenditureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyExpenditureRequestValidationError{}

// Validate checks the field values on GetMonthlyExpenditureResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyExpenditureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyExpenditureResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMonthlyExpenditureResponseMultiError, or nil if none found.
func (m *GetMonthlyExpenditureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyExpenditureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonthlyExpenditures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("MonthlyExpenditures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("MonthlyExpenditures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMonthlyExpenditureResponseValidationError{
					field:  fmt.Sprintf("MonthlyExpenditures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetMonthlyExpenditureResponseMultiError(errors)
	}

	return nil
}

// GetMonthlyExpenditureResponseMultiError is an error wrapping multiple
// validation errors returned by GetMonthlyExpenditureResponse.ValidateAll()
// if the designated constraints aren't met.
type GetMonthlyExpenditureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyExpenditureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyExpenditureResponseMultiError) AllErrors() []error { return m }

// GetMonthlyExpenditureResponseValidationError is the validation error
// returned by GetMonthlyExpenditureResponse.Validate if the designated
// constraints aren't met.
type GetMonthlyExpenditureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyExpenditureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyExpenditureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyExpenditureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyExpenditureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyExpenditureResponseValidationError) ErrorName() string {
	return "GetMonthlyExpenditureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyExpenditureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyExpenditureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyExpenditureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyExpenditureResponseValidationError{}

// Validate checks the field values on GetMonthlyIncomeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyIncomeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyIncomeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlyIncomeRequestMultiError, or nil if none found.
func (m *GetMonthlyIncomeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyIncomeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMonthlyIncomeRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMonthlyIncomeRequestMultiError(errors)
	}

	return nil
}

// GetMonthlyIncomeRequestMultiError is an error wrapping multiple validation
// errors returned by GetMonthlyIncomeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMonthlyIncomeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyIncomeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyIncomeRequestMultiError) AllErrors() []error { return m }

// GetMonthlyIncomeRequestValidationError is the validation error returned by
// GetMonthlyIncomeRequest.Validate if the designated constraints aren't met.
type GetMonthlyIncomeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyIncomeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyIncomeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyIncomeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyIncomeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyIncomeRequestValidationError) ErrorName() string {
	return "GetMonthlyIncomeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyIncomeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyIncomeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyIncomeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyIncomeRequestValidationError{}

// Validate checks the field values on GetMonthlyIncomeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyIncomeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyIncomeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlyIncomeResponseMultiError, or nil if none found.
func (m *GetMonthlyIncomeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyIncomeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonthlyIncomes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMonthlyIncomeResponseValidationError{
						field:  fmt.Sprintf("MonthlyIncomes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMonthlyIncomeResponseValidationError{
						field:  fmt.Sprintf("MonthlyIncomes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMonthlyIncomeResponseValidationError{
					field:  fmt.Sprintf("MonthlyIncomes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetMonthlyIncomeResponseMultiError(errors)
	}

	return nil
}

// GetMonthlyIncomeResponseMultiError is an error wrapping multiple validation
// errors returned by GetMonthlyIncomeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMonthlyIncomeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyIncomeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyIncomeResponseMultiError) AllErrors() []error { return m }

// GetMonthlyIncomeResponseValidationError is the validation error returned by
// GetMonthlyIncomeResponse.Validate if the designated constraints aren't met.
type GetMonthlyIncomeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyIncomeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyIncomeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyIncomeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyIncomeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyIncomeResponseValidationError) ErrorName() string {
	return "GetMonthlyIncomeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyIncomeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyIncomeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyIncomeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyIncomeResponseValidationError{}

// Validate checks the field values on GetMonthlySavingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlySavingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlySavingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlySavingsRequestMultiError, or nil if none found.
func (m *GetMonthlySavingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlySavingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMonthlySavingsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMonthlySavingsRequestMultiError(errors)
	}

	return nil
}

// GetMonthlySavingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMonthlySavingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMonthlySavingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlySavingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlySavingsRequestMultiError) AllErrors() []error { return m }

// GetMonthlySavingsRequestValidationError is the validation error returned by
// GetMonthlySavingsRequest.Validate if the designated constraints aren't met.
type GetMonthlySavingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlySavingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlySavingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlySavingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlySavingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlySavingsRequestValidationError) ErrorName() string {
	return "GetMonthlySavingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlySavingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlySavingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlySavingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlySavingsRequestValidationError{}

// Validate checks the field values on GetMonthlySavingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMonthlySavingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlySavingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMonthlySavingsResponseMultiError, or nil if none found.
func (m *GetMonthlySavingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlySavingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonthlySavings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMonthlySavingsResponseValidationError{
						field:  fmt.Sprintf("MonthlySavings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMonthlySavingsResponseValidationError{
						field:  fmt.Sprintf("MonthlySavings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMonthlySavingsResponseValidationError{
					field:  fmt.Sprintf("MonthlySavings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetMonthlySavingsResponseMultiError(errors)
	}

	return nil
}

// GetMonthlySavingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMonthlySavingsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMonthlySavingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlySavingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlySavingsResponseMultiError) AllErrors() []error { return m }

// GetMonthlySavingsResponseValidationError is the validation error returned by
// GetMonthlySavingsResponse.Validate if the designated constraints aren't met.
type GetMonthlySavingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlySavingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlySavingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlySavingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlySavingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlySavingsResponseValidationError) ErrorName() string {
	return "GetMonthlySavingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlySavingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlySavingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlySavingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlySavingsResponseValidationError{}

// Validate checks the field values on
// GetMonthlyTotalQuantityBySecurityAndUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyTotalQuantityBySecurityAndUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMonthlyTotalQuantityBySecurityAndUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetMonthlyTotalQuantityBySecurityAndUserRequestMultiError, or nil if none found.
func (m *GetMonthlyTotalQuantityBySecurityAndUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyTotalQuantityBySecurityAndUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for SecurityId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMonthlyTotalQuantityBySecurityAndUserRequestMultiError(errors)
	}

	return nil
}

// GetMonthlyTotalQuantityBySecurityAndUserRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetMonthlyTotalQuantityBySecurityAndUserRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMonthlyTotalQuantityBySecurityAndUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyTotalQuantityBySecurityAndUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyTotalQuantityBySecurityAndUserRequestMultiError) AllErrors() []error { return m }

// GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError is the
// validation error returned by
// GetMonthlyTotalQuantityBySecurityAndUserRequest.Validate if the designated
// constraints aren't met.
type GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError) ErrorName() string {
	return "GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyTotalQuantityBySecurityAndUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyTotalQuantityBySecurityAndUserRequestValidationError{}

// Validate checks the field values on
// GetMonthlyTotalQuantityBySecurityAndUserResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMonthlyTotalQuantityBySecurityAndUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMonthlyTotalQuantityBySecurityAndUserResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetMonthlyTotalQuantityBySecurityAndUserResponseMultiError, or nil if none found.
func (m *GetMonthlyTotalQuantityBySecurityAndUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyTotalQuantityBySecurityAndUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonthlyTotalQuantityBySecurityAndUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError{
						field:  fmt.Sprintf("MonthlyTotalQuantityBySecurityAndUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError{
						field:  fmt.Sprintf("MonthlyTotalQuantityBySecurityAndUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError{
					field:  fmt.Sprintf("MonthlyTotalQuantityBySecurityAndUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetMonthlyTotalQuantityBySecurityAndUserResponseMultiError(errors)
	}

	return nil
}

// GetMonthlyTotalQuantityBySecurityAndUserResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetMonthlyTotalQuantityBySecurityAndUserResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMonthlyTotalQuantityBySecurityAndUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyTotalQuantityBySecurityAndUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyTotalQuantityBySecurityAndUserResponseMultiError) AllErrors() []error { return m }

// GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError is the
// validation error returned by
// GetMonthlyTotalQuantityBySecurityAndUserResponse.Validate if the designated
// constraints aren't met.
type GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError) ErrorName() string {
	return "GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyTotalQuantityBySecurityAndUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyTotalQuantityBySecurityAndUserResponseValidationError{}

// Validate checks the field values on GetMonthlyTransactionCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMonthlyTransactionCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyTransactionCountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMonthlyTransactionCountRequestMultiError, or nil if none found.
func (m *GetMonthlyTransactionCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyTransactionCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetMonthlyTransactionCountRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetMonthlyTransactionCountRequestMultiError(errors)
	}

	return nil
}

// GetMonthlyTransactionCountRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetMonthlyTransactionCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMonthlyTransactionCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyTransactionCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyTransactionCountRequestMultiError) AllErrors() []error { return m }

// GetMonthlyTransactionCountRequestValidationError is the validation error
// returned by GetMonthlyTransactionCountRequest.Validate if the designated
// constraints aren't met.
type GetMonthlyTransactionCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyTransactionCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyTransactionCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyTransactionCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyTransactionCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyTransactionCountRequestValidationError) ErrorName() string {
	return "GetMonthlyTransactionCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyTransactionCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyTransactionCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyTransactionCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyTransactionCountRequestValidationError{}

// Validate checks the field values on GetMonthlyTransactionCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMonthlyTransactionCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMonthlyTransactionCountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMonthlyTransactionCountResponseMultiError, or nil if none found.
func (m *GetMonthlyTransactionCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMonthlyTransactionCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonthlyTransactionCounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMonthlyTransactionCountResponseValidationError{
						field:  fmt.Sprintf("MonthlyTransactionCounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMonthlyTransactionCountResponseValidationError{
						field:  fmt.Sprintf("MonthlyTransactionCounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMonthlyTransactionCountResponseValidationError{
					field:  fmt.Sprintf("MonthlyTransactionCounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetMonthlyTransactionCountResponseMultiError(errors)
	}

	return nil
}

// GetMonthlyTransactionCountResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetMonthlyTransactionCountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMonthlyTransactionCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMonthlyTransactionCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMonthlyTransactionCountResponseMultiError) AllErrors() []error { return m }

// GetMonthlyTransactionCountResponseValidationError is the validation error
// returned by GetMonthlyTransactionCountResponse.Validate if the designated
// constraints aren't met.
type GetMonthlyTransactionCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMonthlyTransactionCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMonthlyTransactionCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMonthlyTransactionCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMonthlyTransactionCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMonthlyTransactionCountResponseValidationError) ErrorName() string {
	return "GetMonthlyTransactionCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMonthlyTransactionCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMonthlyTransactionCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMonthlyTransactionCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMonthlyTransactionCountResponseValidationError{}

// Validate checks the field values on
// GetPaymentChannelMonthlyExpenditureRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPaymentChannelMonthlyExpenditureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPaymentChannelMonthlyExpenditureRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetPaymentChannelMonthlyExpenditureRequestMultiError, or nil if none found.
func (m *GetPaymentChannelMonthlyExpenditureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentChannelMonthlyExpenditureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetPaymentChannelMonthlyExpenditureRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Month

	// no validation rules for PaymentChannel

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPaymentChannelMonthlyExpenditureRequestMultiError(errors)
	}

	return nil
}

// GetPaymentChannelMonthlyExpenditureRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetPaymentChannelMonthlyExpenditureRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentChannelMonthlyExpenditureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentChannelMonthlyExpenditureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentChannelMonthlyExpenditureRequestMultiError) AllErrors() []error { return m }

// GetPaymentChannelMonthlyExpenditureRequestValidationError is the validation
// error returned by GetPaymentChannelMonthlyExpenditureRequest.Validate if
// the designated constraints aren't met.
type GetPaymentChannelMonthlyExpenditureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentChannelMonthlyExpenditureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentChannelMonthlyExpenditureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentChannelMonthlyExpenditureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentChannelMonthlyExpenditureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentChannelMonthlyExpenditureRequestValidationError) ErrorName() string {
	return "GetPaymentChannelMonthlyExpenditureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentChannelMonthlyExpenditureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentChannelMonthlyExpenditureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentChannelMonthlyExpenditureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentChannelMonthlyExpenditureRequestValidationError{}

// Validate checks the field values on
// GetPaymentChannelMonthlyExpenditureResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPaymentChannelMonthlyExpenditureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPaymentChannelMonthlyExpenditureResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetPaymentChannelMonthlyExpenditureResponseMultiError, or nil if none found.
func (m *GetPaymentChannelMonthlyExpenditureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentChannelMonthlyExpenditureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentChannelMonthlyExpenditure() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentChannelMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("PaymentChannelMonthlyExpenditure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentChannelMonthlyExpenditureResponseValidationError{
						field:  fmt.Sprintf("PaymentChannelMonthlyExpenditure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentChannelMonthlyExpenditureResponseValidationError{
					field:  fmt.Sprintf("PaymentChannelMonthlyExpenditure[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetPaymentChannelMonthlyExpenditureResponseMultiError(errors)
	}

	return nil
}

// GetPaymentChannelMonthlyExpenditureResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPaymentChannelMonthlyExpenditureResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentChannelMonthlyExpenditureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentChannelMonthlyExpenditureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentChannelMonthlyExpenditureResponseMultiError) AllErrors() []error { return m }

// GetPaymentChannelMonthlyExpenditureResponseValidationError is the validation
// error returned by GetPaymentChannelMonthlyExpenditureResponse.Validate if
// the designated constraints aren't met.
type GetPaymentChannelMonthlyExpenditureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentChannelMonthlyExpenditureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentChannelMonthlyExpenditureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentChannelMonthlyExpenditureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentChannelMonthlyExpenditureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentChannelMonthlyExpenditureResponseValidationError) ErrorName() string {
	return "GetPaymentChannelMonthlyExpenditureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentChannelMonthlyExpenditureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentChannelMonthlyExpenditureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentChannelMonthlyExpenditureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentChannelMonthlyExpenditureResponseValidationError{}

// Validate checks the field values on GetTotalInvestmentBySecurityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTotalInvestmentBySecurityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTotalInvestmentBySecurityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTotalInvestmentBySecurityRequestMultiError, or nil if none found.
func (m *GetTotalInvestmentBySecurityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTotalInvestmentBySecurityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetTotalInvestmentBySecurityRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SecurityId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetTotalInvestmentBySecurityRequestMultiError(errors)
	}

	return nil
}

// GetTotalInvestmentBySecurityRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTotalInvestmentBySecurityRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTotalInvestmentBySecurityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTotalInvestmentBySecurityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTotalInvestmentBySecurityRequestMultiError) AllErrors() []error { return m }

// GetTotalInvestmentBySecurityRequestValidationError is the validation error
// returned by GetTotalInvestmentBySecurityRequest.Validate if the designated
// constraints aren't met.
type GetTotalInvestmentBySecurityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalInvestmentBySecurityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalInvestmentBySecurityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalInvestmentBySecurityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalInvestmentBySecurityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalInvestmentBySecurityRequestValidationError) ErrorName() string {
	return "GetTotalInvestmentBySecurityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalInvestmentBySecurityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalInvestmentBySecurityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalInvestmentBySecurityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalInvestmentBySecurityRequestValidationError{}

// Validate checks the field values on GetTotalInvestmentBySecurityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTotalInvestmentBySecurityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTotalInvestmentBySecurityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTotalInvestmentBySecurityResponseMultiError, or nil if none found.
func (m *GetTotalInvestmentBySecurityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTotalInvestmentBySecurityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTotalInvestmentBySecurity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTotalInvestmentBySecurityResponseValidationError{
						field:  fmt.Sprintf("TotalInvestmentBySecurity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTotalInvestmentBySecurityResponseValidationError{
						field:  fmt.Sprintf("TotalInvestmentBySecurity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTotalInvestmentBySecurityResponseValidationError{
					field:  fmt.Sprintf("TotalInvestmentBySecurity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageNumber

	if len(errors) > 0 {
		return GetTotalInvestmentBySecurityResponseMultiError(errors)
	}

	return nil
}

// GetTotalInvestmentBySecurityResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTotalInvestmentBySecurityResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTotalInvestmentBySecurityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTotalInvestmentBySecurityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTotalInvestmentBySecurityResponseMultiError) AllErrors() []error { return m }

// GetTotalInvestmentBySecurityResponseValidationError is the validation error
// returned by GetTotalInvestmentBySecurityResponse.Validate if the designated
// constraints aren't met.
type GetTotalInvestmentBySecurityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalInvestmentBySecurityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalInvestmentBySecurityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalInvestmentBySecurityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalInvestmentBySecurityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalInvestmentBySecurityResponseValidationError) ErrorName() string {
	return "GetTotalInvestmentBySecurityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalInvestmentBySecurityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalInvestmentBySecurityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalInvestmentBySecurityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalInvestmentBySecurityResponseValidationError{}

// Validate checks the field values on GetMelodyFinancialContextRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMelodyFinancialContextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMelodyFinancialContextRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMelodyFinancialContextRequestMultiError, or nil if none found.
func (m *GetMelodyFinancialContextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMelodyFinancialContextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetMelodyFinancialContextRequestMultiError(errors)
	}

	return nil
}

// GetMelodyFinancialContextRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetMelodyFinancialContextRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMelodyFinancialContextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMelodyFinancialContextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMelodyFinancialContextRequestMultiError) AllErrors() []error { return m }

// GetMelodyFinancialContextRequestValidationError is the validation error
// returned by GetMelodyFinancialContextRequest.Validate if the designated
// constraints aren't met.
type GetMelodyFinancialContextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMelodyFinancialContextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMelodyFinancialContextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMelodyFinancialContextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMelodyFinancialContextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMelodyFinancialContextRequestValidationError) ErrorName() string {
	return "GetMelodyFinancialContextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMelodyFinancialContextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMelodyFinancialContextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMelodyFinancialContextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMelodyFinancialContextRequestValidationError{}

// Validate checks the field values on GetMelodyFinancialContextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMelodyFinancialContextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMelodyFinancialContextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMelodyFinancialContextResponseMultiError, or nil if none found.
func (m *GetMelodyFinancialContextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMelodyFinancialContextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMelodyFinancialContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMelodyFinancialContextResponseValidationError{
					field:  "MelodyFinancialContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMelodyFinancialContextResponseValidationError{
					field:  "MelodyFinancialContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMelodyFinancialContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMelodyFinancialContextResponseValidationError{
				field:  "MelodyFinancialContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMelodyFinancialContextResponseMultiError(errors)
	}

	return nil
}

// GetMelodyFinancialContextResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetMelodyFinancialContextResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMelodyFinancialContextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMelodyFinancialContextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMelodyFinancialContextResponseMultiError) AllErrors() []error { return m }

// GetMelodyFinancialContextResponseValidationError is the validation error
// returned by GetMelodyFinancialContextResponse.Validate if the designated
// constraints aren't met.
type GetMelodyFinancialContextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMelodyFinancialContextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMelodyFinancialContextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMelodyFinancialContextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMelodyFinancialContextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMelodyFinancialContextResponseValidationError) ErrorName() string {
	return "GetMelodyFinancialContextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMelodyFinancialContextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMelodyFinancialContextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMelodyFinancialContextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMelodyFinancialContextResponseValidationError{}
